module.exports=function(e){var t={};function i(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=5)}([function(e,t){e.exports=require("vscode")},function(e,t){e.exports=require("tslib")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("copy-paste")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,s,r=i(1);!function(e){e.entries=function*(e){for(const t in e)yield[t,e[t]]},e.flatten=function(e,t="",i=!1){const o=Object.create(null);return function e(t,i,o,s=!1){if(Object(o)!==o)t[i]=s?null==o?null:"string"==typeof o?o:JSON.stringify(o):o;else if(Array.isArray(o)){const r=o.length;for(let n=0;n<r;n++)e(t,`${i}[${n}]`,o[n],s);0===r&&(t[i]=null)}else{let r=!0;for(const n in o)r=!1,e(t,i?`${i}.${n}`:n,o[n],s);r&&i&&(t[i]=null)}}(o,t,e,i),o},e.values=function*(e){for(const t in e)yield e[t]}}(o||(o={})),function(e){function t(e,i,s=!0){if(void 0===e.children)return e;const r=[...o.values(e.children)];for(const e of r)t(e,i,!1);if(!s&&1===r.length){const t=r[0];void 0===t.value&&(e.name=i(e.name,t.name),e.relativePath=t.relativePath,e.children=t.children)}return e}e.countUniques=function(e,t){const i=Object.create(null);for(const o of e){const e=t(o);i[e]=(i[e]||0)+1}return i},e.filterMap=function(e,t){return e.reduce((e,i)=>{const o=t(i);return null!=o&&e.push(o),e},[])},e.filterMapAsync=function(e,t){return r.__awaiter(this,void 0,void 0,function*(){return e.reduce((e,i)=>r.__awaiter(this,void 0,void 0,function*(){const o=yield t(i);return null!=o&&e.push(o),e}),[])})},e.groupBy=function(e,t){return e.reduce((e,i)=>{const o=t(i);return e[o]=e[o]||[],e[o].push(i),e},Object.create(null))},e.makeHierarchical=function(e,i,o,s=!1){const r={name:"",relativePath:"",children:Object.create(null),descendants:[]},n=e.reduce((e,t)=>{let s=e,r="";for(const e of i(t)){r=o(r,e),void 0===s.children&&(s.children=Object.create(null));let i=s.children[e];void 0===i&&(s.children[e]=i={name:e,relativePath:r,children:void 0,descendants:void 0}),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(t),s=i}return s.value=t,e},r);return s?t(n,o,!0):n},e.compactHierarchy=t,e.uniqueBy=function(e,t,i){const o=Object.create(null);return e.filter(e=>{const s=t(e);return!o[s]&&(o[s]=t,!i||i(e))})}}(s||(s={}));var n=i(6),a=i(7);const h=6e4,c=864e5;const l=a;l.distanceInWords=function(){const e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"a few seconds",other:"less than {{count}} minutes"},xMinutes:{one:"a minute",other:"{{count}} minutes"},aboutXHours:{one:"an hour",other:"{{count}} hours"},xHours:{one:"an hour",other:"{{count}} hours"},xDays:{one:"a day",other:"{{count}} days"},aboutXMonths:{one:"a month",other:"{{count}} months"},xMonths:{one:"a month",other:"{{count}} months"},aboutXYears:{one:"a year",other:"{{count}} years"},xYears:{one:"a year",other:"{{count}} years"},overXYears:{one:"a year",other:"{{count}} years"},almostXYears:{one:"a year",other:"{{count}} years"}};return{localize:function(t,i,o){o=o||{},12===i&&"xMonths"===t&&(t="aboutXYears",i=1);const s=e[t];let r;return r="string"==typeof s?s:1===i?s.one:s.other.replace("{{count}}",i.toString()),o.addSuffix?o.comparison>0?"in "+r:r+" ago":r}}}();const d={addSuffix:!0,locale:l};var u;!function(e){function t(e){const t=new Date("number"==typeof e?e:e.getTime());return t.setHours(0,0,0,0),t}e.dateDaysFromNow=function(e,i=Date.now()){const o=t(i),s=t(e),r=o.getTime()-o.getTimezoneOffset()*h,n=s.getTime()-s.getTimezoneOffset()*h;return Math.round((r-n)/c)},e.startOfDay=t,e.toFormatter=function(e){return{fromNow:()=>Object(n.distanceInWordsToNow)(e,d),format:t=>Object(n.format)(e,t)}}}(u||(u={}));const m=i(8),g=i(9);var p,f;!function(e){e.debounce=function(e,t,i){const o=Object.assign({track:!1},i||{}),{track:s}=o,n=r.__rest(o,["track"]);if(!0!==s)return m(e,t,n);let a=!1;const h=m(function(){return a=!1,e.apply(this,arguments)},t,i),c=function(){return a=!0,h.apply(this,arguments)};return c.pending=function(){return a},c.cancel=function(){return h.cancel.apply(h,arguments)},c.flush=function(...e){return h.flush.apply(h,arguments)},c},e.once=function(e){return g(e)},e.propOf=function(e,t){const i=(e,t)=>{const o=void 0===i.value?t:`${i.value}.${t}`;return i.value=o,Object.assign(o=>i(e[t],o),{value:o})};return i(e,t)},e.seeded=function(e,t){let i=t;return(...t)=>{if(void 0!==i){const e=Promise.resolve(i);return i=void 0,e}return e(...t)}},e.wait=function(e){return r.__awaiter(this,void 0,void 0,function*(){yield new Promise(t=>setTimeout(t,e))})}}(p||(p={})),function(e){function t(e,t){for(const i of e)if(t(i))return!0;return!1}e.count=function(e){let t,i=0;for(;!(t=e.next()).done;)i++;return i},e.every=function(e,t){for(const i of e)if(!t(i))return!1;return!0},e.filter=function*(e,t){if(void 0===t)for(const t of e)null!=t&&(yield t);else for(const i of e)t(i)&&(yield i)},e.filterMap=function*(e,t){for(const i of e){const e=t(i);null!=e&&(yield e)}},e.forEach=function(e,t){let i=0;for(const o of e)t(o,i),i++},e.find=function(e,t){for(const i of e)if(t(i))return i;return null},e.first=function(e){return e[Symbol.iterator]().next().value},e.flatMap=function*(e,t){for(const i of e)yield*t(i)},e.has=function(e,i){return t(e,e=>e===i)},e.isIterable=function(e){return"function"==typeof e[Symbol.iterator]},e.join=function(e,t){let i="";const o=e[Symbol.iterator]();let s=o.next();if(s.done)return i;for(;;){const e=s.value.toString();if((s=o.next()).done){i+=e;break}i+=`${e}${t}`}return i},e.last=function(e){let t=null;for(t of e);return t},e.map=function*(e,t){for(const i of e)yield t(i)},e.next=function(e){return e.next().value},e.skip=function*(e,t){let i=0;for(const o of e)i>=t&&(yield o),i++},e.some=t,e.take=function*(e,t){if(t>0){let i=0;for(const o of e)if(yield o,++i>=t)break}},e.union=function*(...e){for(const t of e)for(const e of t)yield e}}(f||(f={}));class v{constructor(){this._value="",this._pos=0}reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}join(e){return e.join("")}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}class w{reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}join(e){return e.join("/")}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(t===w._fwd||t===w._bwd){if(!e)break;this._from++}else e=!1}return this}cmp(e){let t=0;const i=e.length;let o=this._from;for(;t<i&&o<this._to;){const i=e.charCodeAt(t)-this._value.charCodeAt(o);if(0!==i)return i;t+=1,o+=1}return i===this._to-this._from?0:t<i?-1:1}value(){return this._value.substring(this._from,this._to)}}w._fwd="/".charCodeAt(0),w._bwd="\\".charCodeAt(0);class C{isEmpty(){return void 0===this.left&&void 0===this.mid&&void 0===this.right&&void 0===this.element}}class b{constructor(e){this._iter=e}static forPaths(){return new b(new w)}static forStrings(){return new b(new v)}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let o;for(this._root||(this._root=new C,this._root.str=i.value()),o=this._root;;){const e=i.cmp(o.str);if(e>0)o.left||(o.left=new C,o.left.str=i.value()),o=o.left;else if(e<0)o.right||(o.right=new C,o.right.str=i.value()),o=o.right;else{if(!i.hasNext())break;i.next(),o.mid||(o.mid=new C,o.mid.str=i.value()),o=o.mid}}const s=o.element;return o.element=t,s}get(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.str);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i?i.element:void 0}delete(e){const t=this._iter.reset(e),i=[];let o=this._root;for(;o;){const e=t.cmp(o.str);if(e>0)i.push([1,o]),o=o.left;else if(e<0)i.push([-1,o]),o=o.right;else{if(!t.hasNext()){for(o.element=void 0;i.length>0&&o.isEmpty();){const[e,t]=i.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}o=t}break}t.next(),i.push([0,o]),o=o.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,o=this._root;for(;o;){const e=t.cmp(o.str);if(e>0)o=o.left;else if(e<0)o=o.right;else{if(!t.hasNext())break;t.next(),i=o.element||i,o=o.mid}}return o&&o.element||i}findSuperstr(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.str);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext()){if(!i.mid)return;const e=new b(this._iter);return e._root=i.mid,e}t.next(),i=i.mid}}}forEach(e){this._forEach(this._root,[],e)}_forEach(e,t,i){void 0!==e&&(this._forEach(e.left,t,i),t.push(e.str),e.element&&i(e.element,this._iter.join(t)),this._forEach(e.mid,t,i),t.pop(),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(){return void 0===this._root||this._root.isEmpty()?0:f.count(this.entries())}entries(){return this._iterator(this._root,[])}values(){return f.map(this.entries(),e=>e[0])}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,o=0;for(;!(t=e.next()).done;)if(i=t.value,++o>1)return;return i}*_iterator(e,t){void 0!==e&&(yield*this._iterator(e.left,t),t.push(e.str),e.element&&(yield[e.element,this._iter.join(t)]),yield*this._iterator(e.mid,t),t.pop(),yield*this._iterator(e.right,t))}}var y,_,x=i(10);!function(e){const t=/\$\{([^|]*?)(?:\|(\d+)(\-|\?)?)?\}/g,i=/\$\{(\w*?)(?:\W|\d)*?\}/g;function o(e,t,i="Â "){const o=t-h(e);return o<=0?e:i.repeat(o)+e}function s(e,t,i="Â "){const o=t-h(e);return o<=0?e:e+i.repeat(o)}e.getTokensFromTemplate=function(e){const i=[];let o=t.exec(e);for(;null!=o;){const s=o[2],r=o[3];i.push({key:o[1],options:{truncateTo:null==s?void 0:parseInt(s,10),padDirection:"-"===r?"left":"right",collapseWhitespace:"?"===r}}),o=t.exec(e)}return i},e.interpolate=function(e,t){return e?void 0===t?e.replace(i,""):(e=e.replace(i,"$${this.$1}"),new Function(`return \`${e}\`;`).call(t)):e},e.lines=function*(e){let t=0;for(;t<e.length;){let i=e.indexOf("\n",t);-1===i&&(i=e.length),yield e.substring(t,i),t=i+1}},e.md5=function(e,t="base64"){return Object(x.createHash)("md5").update(e).digest(t)},e.normalizePath=function(e){return e&&e.replace(/\\/g,"/")},e.pad=function(e,t=0,i=0,o="Â "){return 0===t&&0===i?e:`${0===t?"":o.repeat(t)}${e}${0===i?"":o.repeat(i)}`},e.padLeft=o,e.padLeftOrTruncate=function(e,t,i){const s=h(e);return s<t?o(e,t,i):s>t?n(e,t):e},e.padRight=s,e.padOrTruncate=function(e,t,i){const r=t<0;t=Math.abs(t);const a=h(e);return a<t?r?o(e,t,i):s(e,t,i):a>t?n(e,t):e},e.padRightOrTruncate=function(e,t,i){const o=h(e);return o<t?s(e,t,i):o>t?n(e,t):e};const r=/[\\/:*?"<>|\x00-\x1f\x80-\x9f]/g;function n(e,t,i="â¦"){if(!e)return e;const o=h(e);if(o<=t)return e;if(o===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(o/e.length)),r=h(e.substring(0,s));for(;r<t;)r+=h(e[s++]);return r>=t&&s--,`${e.substring(0,s)}${i}`}e.sanitizeForFileSystem=function(e,t="_"){return e?e.replace(r,t):e},e.sha1=function(e,t="base64"){return Object(x.createHash)("sha1").update(e).digest(t)},e.truncate=n;const a=/[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))/g;function h(e){if(!e||0===e.length)return 0;let t=0,i=0,o=0;const s=[...e=e.replace(a,"")];for(let e=0;e<s.length;e++){const r=s[e].codePointAt(0);if(!(r<=31||r>=127&&r<=159)&&!(r>=768&&r<=879))if(r>=128512&&r<=128591||r>=127744&&r<=128511||r>=128640&&r<=128767||r>=9728&&r<=9983||r>=9984&&r<=10175||r>=65024&&r<=65039||r>=129280&&r<=129535||r>=65024&&r<=65039||r>=8400&&r<=8447){if(r>=127995&&r<=127999)continue;i++,t+=2}else 8205!==r?(r>65535&&e++,t+=c(r)?2:1):(o++,t-=2)}const r=i-o;return r>1&&(t+=r-1),t}function c(e){return e>=4352&&(e<=4447||9001===e||9002===e||11904<=e&&e<=12871&&12351!==e||12880<=e&&e<=19903||19968<=e&&e<=42182||43360<=e&&e<=43388||44032<=e&&e<=55203||63744<=e&&e<=64255||65040<=e&&e<=65049||65072<=e&&e<=65131||65281<=e&&e<=65376||65504<=e&&e<=65510||110592<=e&&e<=110593||127488<=e&&e<=127569||131072<=e&&e<=262141)}e.width=h}(y||(y={})),function(e){function t(e,t,i,o){return{major:"string"==typeof e?parseInt(e,10):e,minor:"string"==typeof t?parseInt(t,10):t,patch:"string"==typeof i?parseInt(i,10):i,pre:o}}e.compare=function(e,t){return e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?e.pre.localeCompare(t.pre):0},e.from=t,e.fromString=function(e){const[i,o]=e.split("-"),[s,r,n]=i.split(".");return t(s,r,n,o)}}(_||(_={}));var S,$,D,k,P,F,R,T,E,B,N,A,U,O=i(0);!function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame"}(S||(S={})),function(e){e.Document="document",e.Containers="containers",e.Blocks="blocks"}($||($={})),function(e){e.Bitbucket="Bitbucket",e.BitbucketServer="BitbucketServer",e.Custom="Custom",e.GitHub="GitHub",e.GitLab="GitLab"}(D||(D={})),function(e){e.Absolute="absolute",e.Relative="relative"}(k||(k={})),function(e){e.Auto="auto",e.List="list",e.Tree="tree"}(P||(P={})),function(e){e.Gutter="gutter",e.Heatmap="heatmap",e.Hover="hover",e.RecentChanges="recentChanges"}(F||(F={})),function(e){e.Auto="auto",e.History="history",e.Repository="repository"}(R||(R={})),function(e){e.Faces="wavatar",e.Geometric="identicon",e.Monster="monsterid",e.MysteryMan="mm",e.Retro="retro",e.Robot="robohash"}(T||(T={})),function(e){e.Standard="standard",e.Chorded="chorded",e.None="none"}(E||(E={})),function(e){e.Trailing="trailing",e.Hover="hover"}(B||(B={})),function(e){e.Gutter="gutter",e.Line="line",e.OverviewRuler="overviewRuler"}(N||(N={})),function(e){e.Silent="silent",e.Errors="errors",e.Verbose="verbose"}(A||(A={})),function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame"}(U||(U={}));const L="gitlens",I="GitLens",M="GitLens",W="eamodio.gitlens",H=1e8;var j,G,Q,V,K,q;function z(e,t){return O.commands.executeCommand(j.SetContext,e,t)}function Y(e){const t=O.window.activeTextEditor;return void 0!==t&&t.document===e}function X(e){const t=e.document.uri.scheme;return t!==Q.Output&&t!==Q.DebugConsole}!function(e){e.CloseActiveEditor="workbench.action.closeActiveEditor",e.CloseAllEditors="workbench.action.closeAllEditors",e.CursorMove="cursorMove",e.Diff="vscode.diff",e.EditorScroll="editorScroll",e.ExecuteDocumentSymbolProvider="vscode.executeDocumentSymbolProvider",e.ExecuteCodeLensProvider="vscode.executeCodeLensProvider",e.Open="vscode.open",e.NextEditor="workbench.action.nextEditor",e.PreviewHtml="vscode.previewHtml",e.RevealLine="revealLine",e.SetContext="setContext",e.ShowReferences="editor.action.showReferences"}(j||(j={})),function(e){e.ActiveHasRemote="gitlens:activeHasRemote",e.ActiveIsBlameable="gitlens:activeIsBlameable",e.ActiveFileIsTracked="gitlens:activeIsTracked",e.ActiveIsRevision="gitlens:activeIsRevision",e.AnnotationStatus="gitlens:annotationStatus",e.CanToggleCodeLens="gitlens:canToggleCodeLens",e.Enabled="gitlens:enabled",e.ExplorersCanCompare="gitlens:explorers:canCompare",e.GitExplorer="gitlens:gitExplorer",e.GitExplorerAutoRefresh="gitlens:gitExplorer:autoRefresh",e.GitExplorerView="gitlens:gitExplorer:view",e.HasRemotes="gitlens:hasRemotes",e.Key="gitlens:key",e.KeyMap="gitlens:keymap",e.ResultsExplorer="gitlens:resultsExplorer",e.ResultsExplorerKeepResults="gitlens:resultsExplorer:keepResults"}(G||(G={})),function(e){e.DebugConsole="debug",e.File="file",e.Git="git",e.GitLensGit="gitlens-git",e.Output="output"}(Q||(Q={})),function(e){e.ArrowBack="â©",e.ArrowDown="â",e.ArrowDropRight="â¤·",e.ArrowLeft="â",e.ArrowLeftRight="â",e.ArrowRight="â",e.ArrowRightHollow="â¨",e.ArrowUp="â",e.ArrowUpRight="â",e.Asterisk="â",e.Check="â",e.Dash="â",e.Dot="â¢",e.DoubleArrowLeft="âª",e.DoubleArrowRight="â",e.Ellipsis="â¦",e.MiddleEllipsis="â¯",e.Pensil="â",e.Space="Â ",e.SquareWithBottomShadow="â",e.SquareWithTopShadow="â",e.ZeroWidthSpace="â"}(V||(V={})),function(e){e.GitLensVersion="gitlensVersion"}(K||(K={})),function(e){e.GitExplorerAutoRefresh="gitlens:gitExplorer:autoRefresh",e.GitExplorerView="gitlens:gitExplorer:view",e.ResultsExplorerKeepResults="gitlens:resultsExplorer:keepResults"}(q||(q={}));class Z{}const J=new class extends Z{equals(e,t){return e===t}},ee=new class extends Z{equals(e,t,i={useId:!1,usePosition:!1}){return e===t||void 0!==e&&void 0!==t&&(!i.usePosition||e.viewColumn===t.viewColumn)&&(!i.useId||e.document&&t.document?J.equals(e.document,t.document):e.id===t.id)}},te=new class extends Z{equals(e,t){return e===t||void 0!==e&&void 0!==t&&e.scheme===t.scheme&&e.fsPath===t.fsPath}};class ie extends O.Disposable{constructor(e,t,i,o){super(()=>this.dispose()),this.editor=e,this.trackedDocument=t,this.decoration=i,this.highlightDecoration=o,this.correlationKey=ie.getCorrelationKey(this.editor),this.document=this.editor.document,this.disposable=O.Disposable.from(O.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}static getCorrelationKey(e){return void 0!==e?e.id:""}dispose(){return r.__awaiter(this,void 0,void 0,function*(){yield this.clear(),this.disposable&&this.disposable.dispose()})}onTextEditorSelectionChanged(e){return r.__awaiter(this,void 0,void 0,function*(){if(J.equals(this.document,e.textEditor&&e.textEditor.document))return this.selection(e.selections[0].active.line)})}get editorId(){return void 0===this.editor||void 0===this.editor.document?"":this.editor.id}get editorUri(){if(void 0!==this.editor&&void 0!==this.editor.document)return this.editor.document.uri}clear(){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==this.editor){if(void 0!==this.decoration)try{this.editor.setDecorations(this.decoration,[])}catch(e){}if(void 0!==this.additionalDecorations&&this.additionalDecorations.length>0){for(const e of this.additionalDecorations)try{this.editor.setDecorations(e.decoration,[])}catch(e){}this.additionalDecorations=void 0}if(void 0!==this.highlightDecoration)try{this.editor.setDecorations(this.highlightDecoration,[])}catch(e){}}})}reset(e){return r.__awaiter(this,void 0,void 0,function*(){void 0===this._resetDebounced&&(this._resetDebounced=p.debounce(this.onReset,250)),this._resetDebounced(e)})}onReset(e){return r.__awaiter(this,void 0,void 0,function*(){void 0!==e&&(yield this.clear(),this.decoration=e.decoration,this.highlightDecoration=e.highlightDecoration),yield this.provideAnnotation(void 0===this.editor?void 0:this.editor.selection.active.line)})}restore(e,t=!1){if((t||!1!==this.editor._disposed)&&(this.editor=e,this.correlationKey=ie.getCorrelationKey(e),this.document=e.document,void 0!==this.decorations&&this.decorations.length&&(this.editor.setDecorations(this.decoration,this.decorations),void 0!==this.additionalDecorations&&this.additionalDecorations.length)))for(const e of this.additionalDecorations)this.editor.setDecorations(e.decoration,e.ranges)}provideAnnotation(e){return this.onProvideAnnotation(e)}}const oe=`[${I}]`;class se{static configure(e){e.subscriptions.push(Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}static onConfigurationChanged(e){const t=Hs.initializing(e);let i=Hs.name("debug").value;(t||Hs.changed(e,i))&&(this.debug=Hs.get(i)),i=Hs.name("outputLevel").value,(t||Hs.changed(e,i))&&(this.level=Hs.get(i),this.level===A.Silent?void 0!==this.output&&(this.output.dispose(),this.output=void 0):this.output=this.output||O.window.createOutputChannel(I))}static log(e,...t){this.debug&&console.log(this.timestamp,oe,e,...t),void 0!==this.output&&this.level===A.Verbose&&this.output.appendLine((this.debug?[this.timestamp,e,...t]:[e,...t]).join(" "))}static error(e,t,...i){this.debug&&console.error(this.timestamp,oe,t,e,...i),void 0!==this.output&&this.level!==A.Silent&&this.output.appendLine((this.debug?[this.timestamp,t,e,...i]:[t,e,...i]).join(" "))}static warn(e,...t){this.debug&&console.warn(this.timestamp,oe,e,...t),void 0!==this.output&&this.level!==A.Silent&&this.output.appendLine((this.debug?[this.timestamp,e,...t]:[e,...t]).join(" "))}static get timestamp(){const e=new Date;return`[${e.toISOString().replace(/T/," ").replace(/\..+/,"")}:${("00"+e.getUTCMilliseconds()).slice(-3)}]`}static logGitCommand(e,t){this.debug&&(void 0===this.gitOutput&&(this.gitOutput=O.window.createOutputChannel(`${I} (Git)`)),this.gitOutput.appendLine(`${this.timestamp} ${e} (${t})`))}}se.debug=!1,se.level=A.Silent;class re extends O.Disposable{constructor(e,t,i,o){super(()=>this.dispose()),this._document=e,this.key=t,this.dirty=i,this._eventDelegates=o,this._onDidBlameStateChange=new O.EventEmitter,this._disposed=!1,this._forceDirtyStateChangeOnNextDocumentChange=!1,this._hasRemotes=!1,this._isDirtyIdle=!1,this._isTracked=!1,this._blameFailed=!1,this._repo=this.initialize(e.uri)}get onDidBlameStateChange(){return this._onDidBlameStateChange.event}dispose(){this._disposed=!0,this.reset("dispose"),this._disposable&&this._disposable.dispose()}initialize(e){return r.__awaiter(this,void 0,void 0,function*(){if(this._uri=yield Te.fromUri(e),this._disposed)return;const t=yield Is.git.getRepository(this._uri);return this._disposed?void 0:(this._repo=t,void 0!==t&&(this._disposable=t.onDidChange(this.onRepositoryChanged,this)),yield this.update({initializing:!0}),t)})}onRepositoryChanged(e){e.changed(Qe.Repository)&&(this.reset("repository"),this.update())}get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}get hasRemotes(){return this._hasRemotes}get isBlameable(){return!this._blameFailed&&this._isTracked}get isDirtyIdle(){return this._isDirtyIdle}set isDirtyIdle(e){this._isDirtyIdle=e}get isRevision(){return void 0!==this._uri&&!!this._uri.sha}get isTracked(){return this._isTracked}get lineCount(){return this._document.lineCount}get uri(){return this._uri}activate(){z(G.ActiveIsRevision,this.isRevision),z(G.ActiveFileIsTracked,this.isTracked),z(G.ActiveIsBlameable,this.isBlameable),z(G.ActiveHasRemote,this.hasRemotes)}ensureInitialized(){return r.__awaiter(this,void 0,void 0,function*(){yield this._repo})}is(e){return e===this._document}reset(e){this._blameFailed=!1,this._isDirtyIdle=!1,void 0!==this.state&&(this.state=void 0,se.log(`Reset state for '${this.key}', reason=${e}`))}setBlameFailure(){const e=this.isBlameable;this._blameFailed=!0,e&&Y(this._document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}update(e={}){return r.__awaiter(this,void 0,void 0,function*(){if(this._disposed||void 0===this._uri)return this._hasRemotes=!1,void(this._isTracked=!1);this._isDirtyIdle=!1;const t=function(e){const t=O.window.activeTextEditor;return void 0!==t&&t.document===e?t:void 0}(this._document),i=e.forceBlameChange?void 0:this.isBlameable;this._isTracked=yield Is.git.isTracked(this._uri);let o=void 0;if(this._isTracked&&(o=yield this._repo),this._hasRemotes=void 0!==o&&(yield o.hasRemote()),void 0!==t){const o=this.isBlameable;if(z(G.ActiveIsRevision,this.isRevision),z(G.ActiveFileIsTracked,this.isTracked),z(G.ActiveIsBlameable,o),z(G.ActiveHasRemote,this.hasRemotes),!e.initializing&&i!==o){const e={editor:t,document:this,blameable:o};this._onDidBlameStateChange.fire(e),this._eventDelegates.onDidBlameStateChange(e)}}})}}class ne{constructor(e){this.key=e,this.cache=new Map}get(e){return this.cache.get(e)}set(e,t){this.cache.set(e,t)}}class ae{constructor(e,t){this.commit=e,this.logCommit=t}}class he extends O.Disposable{constructor(){super(()=>this.dispose()),this._onDidChangeBlameState=new O.EventEmitter,this._onDidChangeDirtyState=new O.EventEmitter,this._onDidTriggerDirtyIdle=new O.EventEmitter,this._documentMap=new Map,this._disposable=O.Disposable.from(Hs.onDidChange(this.onConfigurationChanged,this),O.window.onDidChangeActiveTextEditor(p.debounce(this.onActiveTextEditorChanged,0),this),O.workspace.onDidChangeTextDocument(p.debounce(this.onTextDocumentChanged,50),this),O.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),O.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}get onDidChangeBlameState(){return this._onDidChangeBlameState.event}get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}dispose(){this._disposable&&this._disposable.dispose(),this.clear()}initialize(){this.onActiveTextEditorChanged(O.window.activeTextEditor)}onConfigurationChanged(e){const t=Hs.initializing(e);if(!t&&(Hs.changed(e,Hs.name("blame")("ignoreWhitespace").value,null)||Hs.changed(e,Hs.name("advanced")("caching")("enabled").value)))for(const e of this._documentMap.values())e.reset("config");const i=Hs.name("advanced")("blame")("delayAfterEdit").value;(t||Hs.changed(e,i))&&(this._dirtyIdleTriggerDelay=Hs.get(i),this._dirtyIdleTriggeredDebounced=void 0)}onActiveTextEditorChanged(e){if(void 0!==e&&!X(e))return;if(void 0===e)return z(G.ActiveIsRevision,!1),z(G.ActiveFileIsTracked,!1),z(G.ActiveIsBlameable,!1),void z(G.ActiveHasRemote,!1);const t=this._documentMap.get(e.document);void 0===t?this.addCore(e.document):t.activate()}onTextDocumentChanged(e){if(e.document.uri.scheme!==Q.File)return;let t=this._documentMap.get(e.document);void 0===t&&(t=this.addCore(e.document)),t.reset("document");const i=e.document.isDirty,o=O.window.activeTextEditor;void 0!==this._dirtyIdleTriggeredDebounced&&(i?this._dirtyIdleTriggeredDebounced({editor:o,document:t}):this._dirtyIdleTriggeredDebounced.cancel()),(t.forceDirtyStateChangeOnNextDocumentChange||t.dirty!==i)&&(t.resetForceDirtyStateChangeOnNextDocumentChange(),t.dirty=i,void 0!==o&&o.document===e.document&&this.fireDocumentDirtyStateChanged({editor:o,document:t,dirty:t.dirty}))}onTextDocumentClosed(e){const t=this._documentMap.get(e);void 0!==t&&(t.dispose(),this._documentMap.delete(e),this._documentMap.delete(t.key))}onTextDocumentSaved(e){let t=this._documentMap.get(e);void 0===t?Y(e)&&(t=this.addCore(e)):t.update({forceBlameChange:!0})}add(e){return r.__awaiter(this,void 0,void 0,function*(){return this._add(e)})}clear(){for(const e of this._documentMap.values())e.dispose();this._documentMap.clear()}get(e){return r.__awaiter(this,void 0,void 0,function*(){return yield this._get(e)})}getOrAdd(e){return r.__awaiter(this,void 0,void 0,function*(){return(yield this._get(e))||(yield this._add(e))})}has(e){return("string"==typeof e||e instanceof O.Uri)&&(e=Te.toKey(e)),this._documentMap.has(e)}_add(e){return r.__awaiter(this,void 0,void 0,function*(){if(e instanceof Te)try{e=yield O.workspace.openTextDocument(e.fileUri({useVersionedPath:!0}))}catch(t){if(!t.toString().includes("File not found"))throw t;e=new ce(e)}else e instanceof O.Uri&&(e=yield O.workspace.openTextDocument(e));const t=yield this.addCore(e);return yield t.ensureInitialized(),t})}_get(e){return r.__awaiter(this,void 0,void 0,function*(){e instanceof Te?e=Te.toKey(e.fileUri({useVersionedPath:!0})):("string"==typeof e||e instanceof O.Uri)&&(e=Te.toKey(e));const t=this._documentMap.get(e);if(void 0!==t)return yield t.ensureInitialized(),t})}addCore(e){const t=Te.toKey(e.uri),i=new re(e,t,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)});return this._documentMap.set(e,i),this._documentMap.set(t,i),i}fireDocumentDirtyStateChanged(e){if(e.dirty)return setImmediate(()=>r.__awaiter(this,void 0,void 0,function*(){void 0!==this._dirtyStateChangedDebounced&&this._dirtyStateChangedDebounced.cancel(),O.window.activeTextEditor===e.editor&&(yield e.document.ensureInitialized(),this._onDidChangeDirtyState.fire(e))})),void(this._dirtyIdleTriggerDelay>0&&(void 0===this._dirtyIdleTriggeredDebounced&&(this._dirtyIdleTriggeredDebounced=p.debounce(e=>r.__awaiter(this,void 0,void 0,function*(){void 0!==this._dirtyIdleTriggeredDebounced&&this._dirtyIdleTriggeredDebounced.pending()||(yield e.document.ensureInitialized(),e.document.isDirtyIdle=!0,this._onDidTriggerDirtyIdle.fire(e))}),this._dirtyIdleTriggerDelay,{track:!0})),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document})));void 0===this._dirtyStateChangedDebounced&&(this._dirtyStateChangedDebounced=p.debounce(e=>r.__awaiter(this,void 0,void 0,function*(){O.window.activeTextEditor===e.editor&&(yield e.document.ensureInitialized(),this._onDidChangeDirtyState.fire(e))}),250)),this._dirtyStateChangedDebounced(e)}}class ce{constructor(e){this.gitUri=e,this.uri=e.fileUri({useVersionedPath:!0}),this.eol=O.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.lineCount=0,this.version=0}getText(e){throw new Error("Method not supported.")}getWordRangeAtPosition(e,t){throw new Error("Method not supported.")}lineAt(e){throw new Error("Method not supported.")}offsetAt(e){throw new Error("Method not supported.")}positionAt(e){throw new Error("Method not supported.")}save(){throw new Error("Method not supported.")}validatePosition(e){throw new Error("Method not supported.")}validateRange(e){throw new Error("Method not supported.")}}var le;function de(e){switch(e.type){case le.Branch:return"Branch";case le.Branches:return"Branches";case le.Commit:return"Commit";case le.File:return"File";case le.Repo:return"Repository";case le.Revision:return"Revision";default:return""}}!function(e){e.Branch="branch",e.Branches="branches",e.Commit="commit",e.File="file",e.Repo="repo",e.Revision="revision"}(le||(le={}));class ue{constructor(e,t,i="https",o,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=o}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return void 0!==this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){const e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}openUrl(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)return O.commands.executeCommand(j.Open,O.Uri.parse(e))})}open(e){switch(e.type){case le.Branch:return this.openBranch(e.branch);case le.Branches:return this.openBranches();case le.Commit:return this.openCommit(e.sha);case le.File:return this.openFile(e.fileName,e.branch,void 0,e.range);case le.Repo:return this.openRepo();case le.Revision:return this.openFile(e.fileName,e.branch,e.sha,e.range)}}openRepo(){return this.openUrl(this.getUrlForRepository())}openBranches(){return this.openUrl(this.getUrlForBranches())}openBranch(e){return this.openUrl(this.getUrlForBranch(e))}openCommit(e){return this.openUrl(this.getUrlForCommit(e))}openFile(e,t,i,o){return this.openUrl(this.getUrlForFile(e,t,i,o))}}class me extends ue{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("Bitbucket")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/branch/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${e}-${o.start.line}`:`#${e}-${o.start.line}:${o.end.line}`),i?`${this.baseUrl}/src/${i}/${e}${s}`:t?`${this.baseUrl}/src/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}class ge extends ue{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("Bitbucket Server")}get baseUrl(){const[e,t]=super.splitPath();return`https://${this.domain}/projects/${e}/repos/${t}`}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits?until=${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${o.start.line}`:`#${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/browse/${e}?at=${i}${s}`:t?`${this.baseUrl}/browse/${e}?at=${t}${s}`:`${this.baseUrl}/browse/${e}${s}`}}class pe extends ue{constructor(e,t,i,o,s){super(e,t,o,s,!0),this.urls=i}get name(){return this.formatName("Custom")}getUrlForRepository(){return y.interpolate(this.urls.repository,{repo:this.path})}getUrlForBranches(){return y.interpolate(this.urls.branches,{repo:this.path})}getUrlForBranch(e){return y.interpolate(this.urls.branch,{repo:this.path,branch:e})}getUrlForCommit(e){return y.interpolate(this.urls.commit,{repo:this.path,id:e})}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?y.interpolate(this.urls.fileLine,{line:o.start.line}):y.interpolate(this.urls.fileRange,{start:o.start.line,end:o.end.line})),i?y.interpolate(this.urls.fileInCommit,{repo:this.path,id:i,file:e,line:s}):t?y.interpolate(this.urls.fileInBranch,{repo:this.path,branch:t,file:e,line:s}):y.interpolate(this.urls.file,{repo:this.path,file:e,line:s})}}class fe extends ue{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("GitHub")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-L${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}class ve extends ue{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("GitLab")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}const we=new Map([["bitbucket.org",(e,t)=>new me(e,t)],["github.com",(e,t)=>new fe(e,t)],["gitlab.com",(e,t)=>new ve(e,t)],["visualstudio.com",(e,t)=>new class extends ue{constructor(e,t,i,o){super(e,t,i,o)}get name(){return"Visual Studio Team Services"}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/?version=GB${e}&_a=history`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`&line=${o.start.line}`:`&line=${o.start.line}&lineEnd=${o.end.line}`),i?`${this.baseUrl}/commit/${i}/?_a=contents&path=%2F${e}${s}`:t?`${this.baseUrl}/?path=%2F${e}&version=GB${t}&_a=contents${s}`:`${this.baseUrl}?path=%2F${e}${s}`}}(e,t)]]);class Ce{static factory(e){return(t,i)=>this.create(e,t,i)}static create(e,t,i){try{let o=t.toLowerCase();o.endsWith("visualstudio.com")&&(o="visualstudio.com");const s=e.get(o);if(void 0===s)return;return s(t,i)}catch(e){return void se.error(e,"RemoteProviderFactory")}}static createMap(e){const t=new Map(we);if(null!=e&&e.length>0)for(const i of e){const e=this.getCustomProvider(i);void 0!==e&&t.set(i.domain.toLowerCase(),e)}return t}static getCustomProvider(e){switch(e.type){case D.Bitbucket:return(t,i)=>new me(t,i,e.protocol,e.name,!0);case D.BitbucketServer:return(t,i)=>new ge(t,i,e.protocol,e.name,!0);case D.Custom:return(t,i)=>new pe(t,i,e.urls,e.protocol,e.name);case D.GitHub:return(t,i)=>new fe(t,i,e.protocol,e.name,!0);case D.GitLab:return(t,i)=>new ve(t,i,e.protocol,e.name,!0)}}}var be=i(11),ye=i(3),_e=i(2);const xe="win32"===process.platform;function Se(e){if(e.match(/[\\\/]/))return e;const t=_e.join(".",e);try{if(ye.statSync(t))return t}catch(e){}const i=process.env.PATH.split(xe?";":":");for(const t of i){const i=_e.join(t,e);try{if(ye.statSync(i))return i}catch(e){}}return e}function $e(e,t,i={}){const o=Object.assign({maxBuffer:10485760},i),{stdin:s,stdinEncoding:n}=o,a=r.__rest(o,["stdin","stdinEncoding"]);return new Promise((i,o)=>{const r=Object(be.execFile)(e,t,a,(s,r,n)=>{if(!s)return n&&se.warn(`Warning(${e} ${t.join(" ")}): ${n}`),void i(r);"stdout maxBuffer exceeded"===s.message&&o(new Error(`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${a.maxBuffer} bytes`)),se.warn(`Error(${e} ${t.join(" ")}):  (${s.code}) ${n}`),o(s)});s&&r.stdin.end(s,n||"utf8")})}function De(e){return r.__awaiter(this,void 0,void 0,function*(){const t=yield $e(e,["--version"]);return e&&"git"!==e||(e=function e(t,i){if(!xe)return{cmd:Se(t),args:i};if(!ye.existsSync(t)){const o=[".exe",".bat",".cmd",".ps1"];for(const s of o){const o=Se(`${t}${s}`);if(ye.existsSync(o))return e(o,i)}}return t.match(/\.ps1$/i)?{cmd:_e.join(process.env.SYSTEMROOT,"System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",t].concat(i)}:t.match(/\.(bat|cmd)$/i)?{cmd:_e.join(process.env.SYSTEMROOT,"System32","cmd.exe"),args:["/C",t,...i]}:t.match(/\.(js)$/i)?{cmd:process.execPath,args:[t].concat(i)}:{cmd:t,args:i}}(e,["--version"]).cmd),{path:e,version:(i=t.trim(),i.replace(/^git version /,""))};var i})}function ke(e){return e?De(_e.join(e,"Git","cmd","git.exe")):Promise.reject(new Error("Unable to find git"))}function Pe(e){return r.__awaiter(this,void 0,void 0,function*(){try{return yield De(e||"git")}catch(e){try{switch(process.platform){case"darwin":return yield function(){return r.__awaiter(this,void 0,void 0,function*(){try{let e=yield $e("which",["git"]);if("/usr/bin/git"!==(e=e.replace(/^\s+|\s+$/g,"")))return De(e);try{return yield $e("xcode-select",["-p"]),De(e)}catch(t){return 2===t.code?Promise.reject(new Error("Unable to find git")):De(e)}}catch(e){return Promise.reject(new Error("Unable to find git"))}})}();case"win32":return yield ke(process.env.ProgramW6432).then(null,()=>ke(process.env["ProgramFiles(x86)"])).then(null,()=>ke(process.env.ProgramFiles)).then(null,()=>De("git"));default:return Promise.reject("Unable to find git")}}catch(e){return Promise.reject(new Error("Unable to find git"))}}})}var Fe=i(12),Re=i(13);class Te extends O.Uri{constructor(e,t){if(void 0===e)return void super();if(e.scheme===Q.GitLensGit){const t=JSON.parse(e.query),[i,o]=Te.ensureValidUNCPath(e.authority,_e.resolve(t.repoPath,t.fileName));return super({scheme:e.scheme,authority:i,path:o,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,void(!Ot.isStagedUncommitted(t.sha)&&Ot.isUncommitted(t.sha)||(this.sha=t.sha))}if(void 0===t)return void super(e);if("string"==typeof t)return super(e),void(this.repoPath=t);const[i,o]=Te.ensureValidUNCPath(e.authority,_e.resolve(t.repoPath,t.fileName||e.fsPath));super({scheme:e.scheme,authority:i,path:o,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,this.versionedPath=t.versionedPath,!Ot.isStagedUncommitted(t.sha)&&Ot.isUncommitted(t.sha)||(this.sha=t.sha)}get shortSha(){return this.sha&&Ot.shortenSha(this.sha)}fileUri(e={}){return e.useVersionedPath&&void 0!==this.versionedPath?O.Uri.file(this.versionedPath):O.Uri.file(!e.noSha&&this.sha?this.path:this.fsPath)}getFormattedPath(e=y.pad(V.Dot,2,2),t){let i=_e.dirname(this.fsPath);return this.repoPath&&(i=_e.relative(this.repoPath,i)),void 0!==t&&(i=_e.relative(t,i)),(i=y.normalizePath(i))&&"."!==i?`${_e.basename(this.fsPath)}${e}${i}`:_e.basename(this.fsPath)}getRelativePath(e){let t=_e.relative(this.repoPath||"",this.fsPath);return void 0!==e&&(t=_e.relative(e,t)),y.normalizePath(t)}static ensureValidUNCPath(e,t){if("\\"===t[0]&&"\\"===t[1]){const i=t.indexOf("\\",2);-1===i?(e=t.substring(2),t="\\"):(e=t.substring(2,i),t=t.substring(i)||"\\")}return[e,t]}static fromCommit(e,t=!1){return t?new Te(e.previousUri,{repoPath:e.repoPath,sha:e.previousSha}):new Te(e.uri,e)}static fromFileStatus(e,t,i,o=!1){const s=O.Uri.file(_e.resolve(t,o&&e.originalFileName||e.fileName));return new Te(s,void 0===i?t:{repoPath:t,sha:i})}static fromRepoPath(e,t){return new Te(O.Uri.file(e),void 0===t?e:{repoPath:e,sha:t})}static fromRevisionUri(e){return new Te(e)}static fromUri(e){return r.__awaiter(this,void 0,void 0,function*(){if(e instanceof Te)return e;if(!Is.git.isTrackable(e))return new Te(e);if(e.scheme===Q.GitLensGit)return new Te(e);if(e.scheme===Q.Git){const t=JSON.parse(e.query),i=yield Is.git.getRepoPath(t.path);let o;switch(t.ref){case"":case"~":o=Ot.stagedUncommittedSha;break;case null:o=void 0;break;default:o=t.ref}return new Te(e,{fileName:t.path,repoPath:i,sha:o})}const t=yield Is.git.getVersionedUri(e);return void 0!==t?t:new Te(e,yield Is.git.getRepoPath(e))})}static getDirectory(e,t){let i=_e.dirname(e);return void 0!==t&&(i=_e.relative(t,i)),(i=y.normalizePath(i))&&"."!==i?i:""}static getFormattedPath(e,t=y.pad(V.Dot,2,2),i){let o;if(e instanceof O.Uri){if(e instanceof Te)return e.getFormattedPath(t,i);o=e.fsPath}else o=e;const s=Te.getDirectory(o,i);return s?`${_e.basename(o)}${t}${s}`:_e.basename(o)}static getRelativePath(e,t,i){let o;if(e instanceof O.Uri){if(e instanceof Te)return e.getRelativePath(t);o=e.fsPath}else o=e;let s=_e.relative(i||"",o);return void 0!==t&&(s=_e.relative(t,s)),y.normalizePath(s)}static toKey(e){return y.normalizePath("string"==typeof e?e:e.fsPath).toLowerCase()}static toRevisionUri(e,t,i){let o,s,r;"string"==typeof e?(o="string"==typeof t?t:_e.resolve(i,t.fileName),s=e,r=Ot.shortenSha(s)):(o=e.fsPath,i=e.repoPath,s=e.sha,r=e.shortSha);const n={fileName:y.normalizePath(_e.relative(i,o)),repoPath:i,sha:s},a=_e.parse(o);return O.Uri.parse(`${Q.GitLensGit}:${_e.join(a.dir,a.name)}:${r}${a.ext}?${JSON.stringify(n)}`)}}const Ee=new Map;var Be;!function(e){e.Blame="blame",e.Branch="branch",e.File="file",e.Stash="stash",e.StashFile="stash-file"}(Be||(Be={}));const Ne={dateFormat:void 0,dateStyle:void 0,reset:()=>{Ne.dateStyle=Hs.get(Hs.name("defaultDateStyle").value),Ne.dateFormat=Hs.get(Hs.name("defaultDateFormat").value)}};class Ae{constructor(e,t,i,o,s,r,n,a,h,c,l){this.repoPath=t,this.sha=i,this.author=o,this.email=s,this.date=r,this.message=n,this.type=e,this._fileName=a||"",this.originalFileName=h,this._previousSha=c,this.previousFileName=l}get fileName(){return this.isFile?this._fileName:""}get formattedDate(){return Ne.dateStyle===k.Absolute?this.formatDate(Ne.dateFormat):this.fromNow()}get shortSha(){return void 0===this._shortSha&&(this._shortSha=Pt.shortenSha(this.sha)),this._shortSha}get isFile(){return this.type===Be.Blame||this.type===Be.File||this.type===Be.StashFile}get isStash(){return this.type===Be.Stash||this.type===Be.StashFile}get isStagedUncommitted(){return void 0===this._isStagedUncommitted&&(this._isStagedUncommitted=Pt.isStagedUncommitted(this.sha)),this._isStagedUncommitted}get isUncommitted(){return void 0===this._isUncommitted&&(this._isUncommitted=Pt.isUncommitted(this.sha)),this._isUncommitted}get previousFileShortSha(){return Pt.shortenSha(this.previousFileSha)}get previousSha(){return this._previousSha}set previousSha(e){e!==this._previousSha&&(this._previousSha=e,this._resolvedPreviousFileSha=void 0)}get previousShortSha(){return this.previousSha&&Pt.shortenSha(this.previousSha)}get previousUri(){return this.previousFileName?O.Uri.file(_e.resolve(this.repoPath,this.previousFileName||this.originalFileName)):this.uri}get uri(){return O.Uri.file(_e.resolve(this.repoPath,this.fileName))}formatDate(e){return null==e&&(e="MMMM Do, YYYY h:MMa"),void 0===this._dateFormatter&&(this._dateFormatter=u.toFormatter(this.date)),this._dateFormatter.format(e)}fromNow(){return void 0===this._dateFormatter&&(this._dateFormatter=u.toFormatter(this.date)),this._dateFormatter.fromNow()}getFormattedPath(e=y.pad(V.Dot,2,2)){return Te.getFormattedPath(this.fileName,e)}getGravatarUri(e,t=16){const i=this.email?`${this.email.trim().toLowerCase()}:${t}`:"";let o=Ee.get(i);if(void 0!==o)return o;const s=(o=O.Uri.parse(`https://www.gravatar.com/avatar/${this.email?y.md5(this.email,"hex"):"00000000000000000000000000000000"}.jpg?s=${t}&d=${e}`)).toString;return o.toString=function(e){return s.call(o,!0)},Ee.set(i,o),o}resolvePreviousFileSha(){return r.__awaiter(this,void 0,void 0,function*(){void 0===this._resolvedPreviousFileSha&&(this._resolvedPreviousFileSha=yield Is.git.resolveReference(this.repoPath,this.previousFileSha,this.fileName?this.previousUri:void 0))})}toGitUri(e=!1){return Te.fromCommit(this,e)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}}class Ue extends Ae{constructor(e,t,i,o,s,r,n,a,h,c,l){super(Be.Blame,e,t,i,o,s,r,n,a,h,c),this.lines=l}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:`${this.sha}^`}with(e){return new Ue(this.repoPath,e.sha||this.sha,this.author,this.email,this.date,this.message,e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),this.getChangedValue(e.lines,e.sha||e.fileName?[]:this.lines)||[])}}class Oe{constructor(e,t,i=!1,o,s=0,r=0){this.repoPath=e,t.startsWith("remotes/")&&(t=t.substring(8),this.remote=!0),this.current=i,this.name=t,this.tracking=""===o||null==o?void 0:o,this.state={ahead:s,behind:r}}getName(){return this.remote?this.name.substring(this.name.indexOf("/")+1):this.name}getRemote(){return this.remote?Oe.getRemote(this.name):void 0!==this.tracking?Oe.getRemote(this.tracking):void 0}static getRemote(e){return e.substring(0,e.indexOf("/"))}}const Le=/^(.*?)\t(.*?)(?:\t(.*?))?$/gm,Ie=/^\s*(\d+)\sfiles? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/,Me=/^@@ -([\d]+),([\d]+) [+]([\d]+),([\d]+) @@([\s\S]*?)(?=^@@)/gm;class We{static parse(e,t=!1){if(!e)return;const i=[];let o,s,r,n=null;do{if(null==(n=Me.exec(`${e}\n@@`)))break;o=(" "+n[5]).substr(1),s=parseInt(n[3],10),r=parseInt(n[1],10),i.push(new He(o,{start:s,end:s+parseInt(n[4],10)},{start:r,end:r+parseInt(n[2],10)}))}while(null!=n);if(!i.length)return;return{diff:t?e:void 0,chunks:i}}static parseChunk(e){const t=f.skip(y.lines(e),1),i=[],o=[];let s=0;for(const e of t)switch(e[0]){case"+":i.push({line:` ${e.substring(1)}`,state:"added"}),s>0?s--:o.push(void 0);break;case"-":s++,o.push({line:` ${e.substring(1)}`,state:"removed"});break;default:for(;s>0;)s--,i.push(void 0);i.push({line:e,state:"unchanged"}),o.push({line:e,state:"unchanged"})}const r=[];let n=void 0,a=void 0;for(let e=0;e<i.length;e++)if(void 0!==(a=i[e]))n={line:a.line,state:a.state,previous:[o[e]]},r.push(n);else{if(void 0===n)continue;if(void 0===n.previous){n.previous=[o[e]];continue}n.previous.push(o[e])}return r}static parseNameStatus(e,t){if(!e)return;const i=[];let o=null;do{if(null==(o=Le.exec(e)))break;i.push(vt.parseStatusFile(t,o[1],o[2],o[3]))}while(null!=o);return i.length?i:void 0}static parseShortStat(e){if(!e)return;const t=Ie.exec(e);if(null==t)return;const i=t[1],o=t[2],s=t[3];return{files:null==i?0:parseInt(i,10),insertions:null==o?0:parseInt(o,10),deletions:null==s?0:parseInt(s,10)}}}class He{constructor(e,t,i){this.currentPosition=t,this.previousPosition=i,this._chunk=e}get lines(){return void 0===this._lines&&(this._lines=We.parseChunk(this._chunk),this._chunk=void 0),this._lines}}class je extends Ae{constructor(e,t,i,o,s,r,n,a,h,c,l,d,u,m){super(e,t,i,o,s,r,n,a,l,d,u),this.fileStatuses=h,this.status=c,this.parentShas=m}get isMerge(){return this.parentShas&&this.parentShas.length>1}get nextShortSha(){return this.nextSha&&Pt.shortenSha(this.nextSha)}get nextUri(){return this.nextFileName?O.Uri.file(_e.resolve(this.repoPath,this.nextFileName)):this.uri}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:this.isFile&&this.previousSha?this.previousSha:`${this.sha}^`}getDiffStatus(){let e=0,t=0,i=0;for(const o of this.fileStatuses)switch(o.status){case"A":case"?":e++;break;case"D":t++;break;default:i++}return`+${e} ~${i} -${t}`}toFileCommit(e){let t;if("string"==typeof e){const i=y.normalizePath(_e.relative(this.repoPath,e));if(void 0===(t=this.fileStatuses.find(e=>e.fileName===i)))return}else t=e;const i=this.isFile?this.previousSha:`${this.sha}^`;return this.with({type:this.isStash?Be.StashFile:Be.File,fileName:t.fileName,originalFileName:t.originalFileName,previousSha:i,previousFileName:t.originalFileName||t.fileName,status:t.status,fileStatuses:[t]})}with(e){return new je(e.type||this.type,this.repoPath,this.getChangedValue(e.sha,this.sha),e.author||this.author,e.email||this.email,e.date||this.date,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.fileStatuses,this.fileStatuses)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),void 0)}}var Ge,Qe,Ve;!function(e){e.Fetch="fetch",e.Push="push"}(Ge||(Ge={}));class Ke{constructor(e,t,i,o,s,r){this.repoPath=e,this.name=t,this.domain=i,this.path=o,this.provider=s,this.types=r}}!function(e){e.Config="config",e.Remotes="remotes",e.Repository="repository",e.Stashes="stashes",e.Tags="tags"}(Qe||(Qe={}));class qe{constructor(e){this.repository=e,this.changes=[]}changed(e,t=!1){return t?1===this.changes.length&&this.changes[0]===e:this.changes.includes(e)}}!function(e){e.StatusNode="statusNode"}(Ve||(Ve={}));class ze extends O.Disposable{constructor(e,t,i,o,s){super(()=>this.dispose()),this.folder=e,this.path=t,this.root=i,this.onAnyRepositoryChanged=o,this._onDidChange=new O.EventEmitter,this._onDidChangeFileSystem=new O.EventEmitter,this._fireChangeDebounced=void 0,this._fireFileSystemChangeDebounced=void 0,this._fsWatchCounter=0,this._pendingChanges={},this.formattedName=i?e.name:`${e.name} (${_e.relative(e.uri.fsPath,t)})`,this.index=e.index,this.name=e.name,this.normalizedPath=(this.path.endsWith("/")?this.path:`${this.path}/`).toLowerCase(),this._suspended=s;const r=O.workspace.createFileSystemWatcher(new O.RelativePattern(e,"{**/.git/config,**/.git/index,**/.git/HEAD,**/.git/refs/stash,**/.git/refs/heads/**,**/.git/refs/remotes/**,**/.git/refs/tags/**,**/.gitignore}"));this._disposable=O.Disposable.from(r,r.onDidChange(this.onRepositoryChanged,this),r.onDidCreate(this.onRepositoryChanged,this),r.onDidDelete(this.onRepositoryChanged,this),Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}get onDidChange(){return this._onDidChange.event}get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}dispose(){this.stopWatchingFileSystem(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=Hs.initializing(e),i=Hs.name("remotes").value;(t||Hs.changed(e,i,this.folder.uri))&&(this._providerMap=Ce.createMap(Hs.get(i,this.folder.uri)),t||(this._remotes=void 0,this.fireChange(Qe.Remotes)))}onFileSystemChanged(e){/\.git/.test(e.fsPath)||this.fireFileSystemChange(e)}onRepositoryChanged(e){if(void 0!==e&&e.path.endsWith("refs/stash"))this.fireChange(Qe.Stashes);else{if(this._branch=void 0,void 0!==e&&e.path.endsWith("refs/remotes"))return this._remotes=void 0,void this.fireChange(Qe.Remotes);if(void 0!==e&&e.path.endsWith("refs/tags"))this.fireChange(Qe.Tags);else{if(void 0!==e&&e.path.endsWith("config"))return this._remotes=void 0,void this.fireChange(Qe.Config,Qe.Remotes);this.onAnyRepositoryChanged(this),this.fireChange(Qe.Repository)}}}fireChange(...e){void 0===this._fireChangeDebounced&&(this._fireChangeDebounced=p.debounce(this.fireChangeCore,250)),void 0===this._pendingChanges.repo&&(this._pendingChanges.repo=new qe(this));const t=this._pendingChanges.repo;for(const i of e)t.changes.includes(i)||t.changes.push(i);this._suspended||this._fireChangeDebounced(t)}fireChangeCore(e){this._pendingChanges.repo=void 0,this._onDidChange.fire(e)}fireFileSystemChange(e){void 0===this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=p.debounce(this.fireFileSystemChangeCore,2500)),void 0===this._pendingChanges.fs&&(this._pendingChanges.fs={repository:this,uris:[]});const t=this._pendingChanges.fs;t.uris.push(e),this._suspended||this._fireFileSystemChangeDebounced(t)}fireFileSystemChangeCore(e){this._pendingChanges.fs=void 0,this._onDidChangeFileSystem.fire(e)}containsUri(e){return e instanceof Te&&(e=void 0!==e.repoPath?O.Uri.file(e.repoPath):e.fileUri()),this.folder===O.workspace.getWorkspaceFolder(e)}getBranch(){return void 0===this._branch&&(this._branch=Is.git.getBranch(this.path)),this._branch}getBranches(){return Is.git.getBranches(this.path)}getChangedFilesCount(e){return Is.git.getChangedFilesCount(this.path,e)}getRemotes(){if(void 0===this._remotes){if(void 0===this._providerMap){const e=Hs.get(Hs.name("remotes").value,this.folder.uri);this._providerMap=Ce.createMap(e)}this._remotes=Is.git.getRemotesCore(this.path,this._providerMap)}return this._remotes}getStashList(){return Is.git.getStashList(this.path)}getStatus(){return Is.git.getStatusForRepo(this.path)}getTags(){return Is.git.getTags(this.path)}hasRemote(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.getBranch();return void 0!==e&&void 0!==e.tracking})}hasRemotes(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.getRemotes();return void 0!==e&&e.length>0})}resume(){this._suspended&&(this._suspended=!1,void 0!==this._pendingChanges.repo&&this._fireChangeDebounced(this._pendingChanges.repo),void 0!==this._pendingChanges.fs&&this._fireFileSystemChangeDebounced(this._pendingChanges.fs))}startWatchingFileSystem(){if(this._fsWatchCounter++,void 0!==this._fsWatcherDisposable)return;const e=O.workspace.createFileSystemWatcher(new O.RelativePattern(this.folder,"**"));this._fsWatcherDisposable=O.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this))}stopWatchingFileSystem(){void 0!==this._fsWatcherDisposable&&(--this._fsWatchCounter>0||(this._fsWatcherDisposable.dispose(),this._fsWatcherDisposable=void 0))}suspend(){this._suspended=!0}}class Ye extends je{constructor(e,t,i,o,s,r,n,a,h,c,l,d){super(e,i,o,"You",void 0,s,r,n,a,h,c,void 0===l?`${o}^`:l,d),this.stashName=t}get shortSha(){return this.stashName}with(e){return new Ye(e.type||this.type,this.stashName,this.repoPath,this.getChangedValue(e.sha,this.sha),e.date||this.date,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.fileStatuses,this.fileStatuses)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName))}}class Xe{constructor(e,t,i,o,s){this.repoPath=e,this.indexStatus=t,this.workTreeStatus=i,this.fileName=o,this.originalFileName=s}get status(){return this.indexStatus||this.workTreeStatus||"?"}get staged(){return void 0!==this.indexStatus}get uri(){return O.Uri.file(_e.resolve(this.repoPath,this.fileName))}getFormattedDirectory(e=!1){return Xe.getFormattedDirectory(this,e)}getFormattedPath(e=y.pad(V.Dot,2,2)){return Xe.getFormattedPath(this,e)}getOcticon(){return Je(this.status)}with(e){return new Xe(this.repoPath,this.getChangedValue(e.indexStatus,this.indexStatus),this.getChangedValue(e.workTreeStatus,this.workTreeStatus),e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName))}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}static getFormattedDirectory(e,t=!1,i){const o=Te.getDirectory(e.fileName,i);return t&&"R"===e.status&&e.originalFileName?`${o} ${y.pad(V.ArrowLeft,1,1)} ${e.originalFileName}`:o}static getFormattedPath(e,t=y.pad(V.Dot,2,2),i){return Te.getFormattedPath(e.fileName,t,i)}static getRelativePath(e,t){return Te.getRelativePath(e.fileName,t)}}const Ze={"!":"$(diff-ignored)","?":"$(diff-added)",A:"$(diff-added)",C:"$(diff-added)",D:"$(diff-removed)",M:"$(diff-modified)",R:"$(diff-renamed)",T:"$(diff-modified)",U:"$(alert)",X:"$(question)",B:"$(question)"};function Je(e,t=V.Space.repeat(4)){return Ze[e]||t}const et={"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",C:"icon-status-copied.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",T:"icon-status-modified.svg",U:"icon-status-conflict.svg",X:"icon-status-unknown.svg",B:"icon-status-unknown.svg"};function tt(e){return et[e]||et.X}class it{constructor(e,t){this.repoPath=e,this.name=t}}class ot{static parse(e,t,i){if(!e)return;const o=new Map,s=new Map,r=[];let n,a,h=t&&i,c=void 0,l=!0;for(n of y.lines(e))if(!((a=n.split(" ")).length<2))if(void 0!==c)switch(a[0]){case"author":c.author=Pt.isUncommitted(c.sha)?"You":a.slice(1).join(" ").trim();break;case"author-mail":c.authorEmail=a.slice(1).join(" ").trim();const e=c.authorEmail.indexOf("<");if(e>=0){const t=c.authorEmail.indexOf(">",e);c.authorEmail=t>e?c.authorEmail.substring(e+1,t):c.authorEmail.substring(e+1)}break;case"author-time":c.authorDate=a[1];break;case"author-tz":c.authorTimeZone=a[1];break;case"summary":c.summary=a.slice(1).join(" ").trim();break;case"previous":c.previousSha=a[1],c.previousFileName=a.slice(2).join(" ");break;case"filename":c.fileName=a.slice(1).join(" "),l&&void 0===t&&(t=y.normalizePath(i.replace(i.startsWith("/")?`/${c.fileName}`:c.fileName,"")),h=y.normalizePath(_e.relative(t,i))),l=!1,ot.parseEntry(c,t,h,s,o,r),c=void 0}else c={sha:a[0],originalLine:parseInt(a[1],10)-1,line:parseInt(a[2],10)-1,lineCount:parseInt(a[3],10)};return s.forEach(e=>{if(void 0===e.author)return;const t=o.get(e.author);void 0!==t&&(t.lineCount+=e.lines.length)}),{repoPath:t,authors:new Map([...o.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:s,lines:r}}static parseEntry(e,t,i,o,s,r){let n=o.get(e.sha);if(void 0===n){if(void 0!==e.author){let t=s.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},s.set(e.author,t))}n=new Ue(t,e.sha,e.author,e.authorEmail,new Date(1e3*e.authorDate),e.summary,i,i!==e.fileName?e.fileName:void 0,e.previousSha,e.previousSha&&e.previousFileName,[]),o.set(e.sha,n)}for(let t=0,i=e.lineCount;t<i;t++){const i={sha:e.sha,line:e.line+t,originalLine:e.originalLine+t};n.previousSha&&(i.previousSha=n.previousSha),n.lines.push(i),r[i.line]=i}}}const st=/^(\*?)\s+(.+?)\s+([0-9,a-f]+)\s+(?:\[(.*?\/.*?)(?:\:\s(.*)\]|\]))?/gm,rt=/^(?:ahead\s([0-9]+))?[,\s]*(?:behind\s([0-9]+))?/;class nt{static parse(e,t){if(!e)return;const i=[];let o=null;do{if(null==(o=st.exec(e)))break;const[s,r]=this.parseState(o[5]);i.push(new Oe(t,o[2],"*"===o[1],o[4],s,r))}while(null!=o);return i.length?i:void 0}static parseState(e){if(null==e)return[0,0];const t=rt.exec(e);if(null==t)return[0,0];const i=parseInt(t[1],10),o=parseInt(t[2],10);return[isNaN(i)?0:i,isNaN(o)?0:o]}}const at=/diff --git a\/(.*) b\/(.*)/,ht={};class ct{static parse(e,t,i,o,r,n,a,h){if(!e)return;let c,l,d=void 0,u=ht,m=void 0,g=0,p=!0;const f=y.lines(e+"\n</f>");let v=f.next();if(v.done)return;void 0!==i&&(i=y.normalizePath(i));const w=new Map,C=new Map;for(;!((v=f.next()).done||(m=v.value,a&&n&&g>=n));)switch(l=m.charCodeAt(1)){case 114:u={ref:m.substring(4)};break;case 97:u.author=Pt.isUncommitted(u.ref)?"You":m.substring(4);break;case 101:u.email=m.substring(4);break;case 100:u.date=m.substring(4);break;case 112:u.parentShas=m.substring(4).split(" ");break;case 115:for(;!(v=f.next()).done&&"</s>"!==(m=v.value);)void 0===u.summary?u.summary=m:u.summary+=`\n${m}`;void 0!==u.summary&&(u.summary=u.summary.slice(0,-1));break;case 102:if((v=f.next()).done||"</f>"===v.value)break;for(;!(v=f.next()).done&&"</f>"!==(m=v.value);)if(!m.startsWith("warning:"))if(t===Be.Branch){const e={status:m[0],fileName:m.substring(1),originalFileName:void 0};this.parseFileName(e),e.fileName&&(void 0===u.fileStatuses&&(u.fileStatuses=[]),u.fileStatuses.push(e))}else{if(m.startsWith("diff")){const e=at.exec(m);if(null!=e){u.fileName=e[1];const t=e[2];u.fileName!==t&&(u.originalFileName=t),u.status=u.fileName!==u.originalFileName?"R":"M"}for(;!(v=f.next()).done&&"</f>"!==v.value;);break}u.status=m[0],u.fileName=m.substring(1),this.parseFileName(u)}void 0!==u.fileStatuses&&(u.fileName=s.filterMap(u.fileStatuses,e=>e.fileName?e.fileName:void 0).join(", ")),p&&void 0===i&&t===Be.File&&void 0!==o?(i=y.normalizePath(o.replace(o.startsWith("/")?`/${u.fileName}`:u.fileName,"")),c=y.normalizePath(_e.relative(i,o))):c=u.fileName,p=!1;const e=C.get(u.ref);void 0===e&&g++,d=ct.parseEntry(u,e,t,i,c,C,w,d)}return{repoPath:i,authors:w,commits:C,sha:r,count:g,maxCount:n,range:h,truncated:!!(n&&g>=n&&1!==n)}}static parseEntry(e,t,i,o,s,r,n,a){if(void 0===t){if(void 0!==e.author){let t=n.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},n.set(e.author,t))}const a=s!==e.fileName?e.fileName:void 0;i===Be.File&&(e.fileStatuses=[{status:e.status,fileName:s,originalFileName:a}]),t=new je(i,o,e.ref,e.author,e.email,new Date(1e3*e.date),void 0===e.summary?"":e.summary,s,e.fileStatuses||[],e.status,a,void 0,void 0,e.parentShas),r.set(e.ref,t)}return void 0!==a&&(a.previousSha=t.sha,t.nextSha=t.sha!==a.sha?a.sha:a.nextSha,i===Be.File&&(a.previousFileName=t.originalFileName||t.fileName,t.nextFileName=a.originalFileName||a.fileName)),t}static parseFileName(e){if(void 0===e.fileName)return;const t=e.fileName.indexOf("\t")+1;if(t>0){const i=e.fileName.indexOf("\t",t)+1;i>0?(e.originalFileName=e.fileName.substring(t,i-1),e.fileName=e.fileName.substring(i)):e.fileName=e.fileName.substring(t)}}}const lt=/^(.*)\t(.*)\s\((.*)\)$/gm,dt=/^(?:git:\/\/(.*?)\/|https:\/\/(.*?)\/|http:\/\/(.*?)\/|git@(.*):|ssh:\/\/(?:.*@)?(.*?)(?::.*?)?\/)(.*)$/;class ut{static parse(e,t,i){if(!e)return[];const o=[],s=Object.create(null);let r=null;do{if(null==(r=lt.exec(e)))break;const n=r[2],[a,h]=this.parseGitUrl(n),c=`${a}/${h}`;let l=s[c];void 0===l?(l=new Ke(t,r[1],a,h,i(a,h),[{url:n,type:r[3]}]),o.push(l),s[c]=l):l.types.push({url:n,type:r[3]})}while(null!=r);return o.length?o:[]}static parseGitUrl(e){const t=dt.exec(e);return null==t?["",""]:[t[1]||t[2]||t[3]||t[4]||t[5],t[6].replace(/\.git\/?$/,"")]}}const mt={};class gt{static parse(e,t){const i=y.lines(e+"\n</f>");let o=i.next();if(o.done)return;void 0!==t&&(t=y.normalizePath(t));const r=new Map;let n,a=mt,h=void 0;for(;!(o=i.next()).done;)switch(n=(h=o.value).charCodeAt(1)){case 114:a={ref:h.substring(4)};break;case 100:a.date=h.substring(4);break;case 108:a.stashName=h.substring(4);break;case 115:for(;!(o=i.next()).done&&"</s>"!==(h=o.value);)void 0===a.summary?a.summary=h:a.summary+=`\n${h}`;void 0!==a.summary&&(a.summary=a.summary.slice(0,-1));break;case 102:if((o=i.next()).done||"</f>"===o.value)break;for(;!(o=i.next()).done&&"</f>"!==(h=o.value);){if(h.startsWith("warning:"))continue;const e={status:h[0],fileName:h.substring(1),originalFileName:void 0};ct.parseFileName(e),e.fileName&&(void 0===a.fileStatuses&&(a.fileStatuses=[]),a.fileStatuses.push(e))}void 0!==a.fileStatuses&&(a.fileNames=s.filterMap(a.fileStatuses,e=>e.fileName?e.fileName:void 0).join(", "));let e=r.get(a.ref);e=gt.parseEntry(a,e,t,r)}return{repoPath:t,commits:r}}static parseEntry(e,t,i,o){return void 0===t&&(t=new Ye(Be.Stash,e.stashName,i,e.ref,new Date(1e3*e.date),void 0===e.summary?"":e.summary,e.fileNames,e.fileStatuses||[])),o.set(e.ref,t),t}}const pt=/(?:ahead ([0-9]+))/,ft=/(?:behind ([0-9]+))/;class vt{static parse(e,t,i){if(!e)return;const o=e.split("\n").filter(e=>!!e);if(0===o.length)return;const s={branch:"",repoPath:y.normalizePath(t),sha:"",state:{ahead:0,behind:0},files:[]};return i>=2?this.parseV2(o,t,s):this.parseV1(o,t,s),s}static parseV1(e,t,i){let o=-1;for(;++o<e.length;){const s=e[o];if(s.startsWith("##")){const e=s.split(" ");if([i.branch,i.upstream]=e[1].split("..."),e.length>2){const t=e.slice(2).join(" "),o=pt.exec(t);i.state.ahead=null==o?0:+o[1]||0;const s=ft.exec(t);i.state.behind=null==s?0:+s[1]||0}}else{const e=s.substring(0,2),o=s.substring(3);if("R"===e[0]){const[s,r]=o.replace(/\"/g,"").split("->");i.files.push(this.parseStatusFile(t,e,r.trim(),s.trim()))}else i.files.push(this.parseStatusFile(t,e,o))}}}static parseV2(e,t,i){let o=-1;for(;++o<e.length;){const s=e[o];if(s.startsWith("#")){const e=s.split(" ");switch(e[1]){case"branch.oid":i.sha=e[2];break;case"branch.head":i.branch=e[2];break;case"branch.upstream":i.upstream=e[2];break;case"branch.ab":i.state.ahead=+e[2].substring(1),i.state.behind=+e[3].substring(1)}}else{const e=s.split(" ");switch(e[0][0]){case"1":i.files.push(this.parseStatusFile(t,e[1],e.slice(8).join(" ")));break;case"2":const o=e.slice(9).join(" ").split("\t");i.files.push(this.parseStatusFile(t,e[1],o[0],o[1]));break;case"u":i.files.push(this.parseStatusFile(t,e[1],e.slice(10).join(" ")));break;case"?":i.files.push(this.parseStatusFile(t," ?",e.slice(1).join(" ")))}}}}static parseStatusFile(e,t,i,o){let s="."!==t[0]?t[0].trim():void 0;""!==s&&null!==s||(s=void 0);let r=void 0;return t.length>1&&(""!==(r="."!==t[1]?t[1].trim():void 0)&&null!==r||(r=void 0)),new Xe(e,s,r,i,o)}}class wt{static parse(e,t){if(!e)return;const i=s.filterMap(e.split("\n"),e=>e?new it(t,e):void 0);return i.length?i:void 0}}let Ct;const bt=["blame","--root","--incremental"],yt=["log","--name-status","-M",`--format=${["%x3c%x2ff%x3e","%x3cr%x3e %H","%x3ca%x3e %an","%x3ce%x3e %ae","%x3cd%x3e %at","%x3cp%x3e %P","%x3cs%x3e","%B","%x3c%x2fs%x3e","%x3cf%x3e"].join("%n")}`],_t=["stash","list","--name-status","-M",`--format=${["%x3c%x2ff%x3e","%x3cr%x3e %H","%x3cd%x3e %at","%x3cl%x3e %gd","%x3cs%x3e","%B","%x3c%x2fs%x3e","%x3cf%x3e"].join("%n")}`],xt=[/Not a git repository/,/is outside repository/,/no such path/,/does not have any commits/,/Path \'.*?\' does not exist in/,/Path \'.*?\' exists on disk, but not in/,/no upstream configured for branch/,/ambiguous argument '.*?': unknown revision or path not in the working tree/];function St(e,...t){return r.__awaiter(this,void 0,void 0,function*(){try{return yield Dt(e,...t)}catch(i){return kt(i,e,...t)}})}const $t=new Map;function Dt(e,...t){return r.__awaiter(this,void 0,void 0,function*(){const i=process.hrtime(),{correlationKey:o}=e,s=r.__rest(e,["correlationKey"]),n=e.encoding||"utf8",a=Object.assign({},s,{encoding:"utf8"===n?"utf8":"binary",env:Object.assign({},e.env||process.env,{GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE"})}),h=`git ${t.join(" ")}`,c=`(${a.cwd}${void 0!==o?o:""}): ${h}`;let l,d=$t.get(c);void 0===d?(se.log(`Running${c}`),t.splice(0,0,"-c","core.quotepath=false","-c","color.ui=false"),d=$e(Ct.path,t,a),$t.set(c,d)):se.log(`Awaiting${c}`);try{l=yield d}finally{$t.delete(c);const e=process.hrtime(i),t=`in ${1e3*e[0]+Math.floor(e[1]/1e6)} ms`;se.log(`Completed${c} ${t}`),se.logGitCommand(`${h} ${t}`,a.cwd)}return"utf8"===n||"binary"===n?l:Fe.decode(Buffer.from(l,"binary"),n)})}function kt(e,t,...i){const o=e&&e.toString();if(o)for(const e of xt)if(e.test(o))return se.warn("git",...i,`  cwd='${t.cwd}'`,`\n  ${o.replace(/\r?\n|\r/g," ")}`),"";throw se.error(e,"git",...i,`  cwd='${t.cwd}'`,o&&`\n  ${o.replace(/\r?\n|\r/g," ")}`),e}class Pt{static gitInfo(){return Ct}static getEncoding(e){return void 0!==e&&Fe.encodingExists(e)?e:"utf8"}static getGitInfo(e){return r.__awaiter(this,void 0,void 0,function*(){const t=process.hrtime();Ct=yield Pe(e);const i=process.hrtime(t);return se.log(`Git found: ${Ct.version} @ ${"git"===Ct.path?"PATH":Ct.path} in ${1e3*i[0]+Math.floor(i[1]/1e6)} ms`),Ct})}static getVersionedFile(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){const o=yield Pt.show(e,t,i,{encoding:"binary"});if(void 0===o)return;Pt.isStagedUncommitted(i)&&(i="");const s=y.truncate(y.sanitizeForFileSystem(Pt.isSha(i)?Pt.shortenSha(i):i),50,""),r=_e.extname(t);return new Promise((n,a)=>{Re.file({prefix:`${_e.basename(t,r)}-${s}__`,postfix:r},(s,r,h,c)=>{s?a(s):(se.log(`getVersionedFile[${r}]('${e}', '${t}', ${i})`),ye.appendFile(r,o,{encoding:"binary"},e=>{e?a(e):n(r)}))})})})}static isResolveRequired(e){return Pt.isSha(e)&&!Pt.shaStrictRegex.test(e)}static isSha(e){return Pt.shaRegex.test(e)}static isStagedUncommitted(e){return void 0!==e&&Pt.stagedUncommittedRegex.test(e)}static isUncommitted(e){return void 0!==e&&Pt.uncommittedRegex.test(e)}static shortenSha(e){if(Pt.isStagedUncommitted(e))return"index";if(Pt.isUncommitted(e))return"";const t=e.indexOf("^");if(t>6){const i=e.substring(t).substring(0,5);return`${e.substring(0,8-i.length)}${i}`}return e.substring(0,8)}static splitPath(e,t,i=!0){if(t){e=y.normalizePath(e);const i=((t=y.normalizePath(t)).endsWith("/")?t:`${t}/`).toLowerCase();e.toLowerCase().startsWith(i)&&(e=e.substring(i.length))}else t=y.normalizePath(i?_e.dirname(e):t),e=y.normalizePath(i?_e.basename(e):e);return[e,t]}static validateVersion(e,t){const[i,o]=Ct.version.split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}static blame(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){const[s,r]=Pt.splitPath(t,e),n=[...bt];let a;return o.ignoreWhitespace&&n.push("-w"),null!=o.startLine&&null!=o.endLine&&n.push(`-L ${o.startLine},${o.endLine}`),i&&(Pt.isStagedUncommitted(i)?(n.push("--contents","-"),a=yield Pt.show(e,t,":")):n.push(i)),St({cwd:r,stdin:a},...n,"--",s)})}static blame_contents(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){const[s,r]=Pt.splitPath(t,e),n=[...bt];return o.ignoreWhitespace&&n.push("-w"),null!=o.startLine&&null!=o.endLine&&n.push(`-L ${o.startLine},${o.endLine}`),n.push("--contents","-"),St({cwd:r,stdin:i,correlationKey:o.correlationKey},...n,"--",s)})}static branch(e,t={all:!1}){const i=["branch","-vv"];return t.all&&i.push("-a"),St({cwd:e},...i)}static checkout(e,t,i){const[o,s]=Pt.splitPath(t,e);return St({cwd:s},"checkout",i,"--",o)}static config_get(e,t){return r.__awaiter(this,void 0,void 0,function*(){try{return(yield Dt({cwd:t||""},"config","--get",e)).trim()}catch(e){return}})}static diff(e,t,i,o,s={}){const r=["diff","--diff-filter=M","-M","--no-ext-diff"];return i&&r.push(Pt.isStagedUncommitted(i)?"--staged":i),o&&r.push(Pt.isStagedUncommitted(o)?"--staged":o),St({cwd:e,encoding:"utf8"===s.encoding?"utf8":"binary"},...r,"--",t)}static diff_nameStatus(e,t,i,o={}){const s=["diff","--name-status","-M","--no-ext-diff"];return o&&o.filter&&s.push(`--diff-filter=${o.filter}`),t&&s.push(t),i&&s.push(i),St({cwd:e},...s)}static diff_shortstat(e,t){const i=["diff","--shortstat","--no-ext-diff"];return t&&i.push(t),St({cwd:e},...i)}static difftool_dirDiff(e,t,i,o){const s=["difftool","--dir-diff",`--tool=${t}`,i];return o&&s.push(o),St({cwd:e},...s)}static difftool_fileDiff(e,t,i,o){const s=["difftool","--no-prompt",`--tool=${i}`];return o&&s.push("--staged"),s.push("--",t),St({cwd:e},...s)}static log(e,t){const i=[...yt,"--full-history","-m"];return t.maxCount&&!t.reverse&&i.push(`-n${t.maxCount}`),t.ref&&!Pt.isStagedUncommitted(t.ref)&&(t.reverse?i.push("--reverse","--ancestry-path",`${t.ref}..HEAD`):i.push(t.ref)),St({cwd:e},...i)}static log_file(e,t,i={reverse:!1,skipMerges:!1}){const[o,s]=Pt.splitPath(t,e),r=[...yt,"--follow"];return i.maxCount&&!i.reverse&&r.push(`-n${i.maxCount}`),r.push(i.skipMerges?"--no-merges":"-m"),i.ref&&!Pt.isStagedUncommitted(i.ref)&&(i.reverse?r.push("--reverse","--ancestry-path",`${i.ref}..HEAD`):r.push(i.ref)),null!=i.startLine&&null!=i.endLine&&r.push(`-L ${i.startLine},${i.endLine}:${o}`),r.push("--",o),St({cwd:s},...r)}static log_recent(e,t){return r.__awaiter(this,void 0,void 0,function*(){try{return(yield Dt({cwd:e},"log","-M","-n1","--format=%H","--",t)).trim()}catch(e){return}})}static log_resolve(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){try{return(yield Dt({cwd:e},"log","-M","-n1","--format=%H",i,"--",t)).trim()}catch(e){return}})}static log_search(e,t=[],i={}){const o=[...yt,"-m","-i"];return i.maxCount&&o.push(`-n${i.maxCount}`),St({cwd:e},...o,...t)}static log_shortstat(e,t){const i=["log","--shortstat","--oneline"];return t.ref&&!Pt.isStagedUncommitted(t.ref)&&i.push(t.ref),St({cwd:e},...i)}static ls_files(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=["ls-files"];i.ref&&!Pt.isStagedUncommitted(i.ref)&&o.push(`--with-tree=${i.ref}`);try{return(yield Dt({cwd:e},...o,t)).trim()}catch(e){return""}})}static merge_base(e,t,i,o={}){const s=["merge-base"];return o.forkPoint&&s.push("--fork-point"),St({cwd:e},...s,t,i)}static remote(e){return St({cwd:e},"remote","-v")}static remote_url(e,t){return St({cwd:e},"remote","get-url",t)}static revparse(e,t){return r.__awaiter(this,void 0,void 0,function*(){try{return(yield Dt({cwd:e},"rev-parse",t)).trim()}catch(e){return}})}static revparse_currentBranch(e){return r.__awaiter(this,void 0,void 0,function*(){const t=["rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}"],i={cwd:e};try{return yield Dt(i,...t)}catch(e){const o=e&&e.toString();if(/HEAD does not point to a branch/.test(o))return;if(/no upstream configured for branch/.test(o))return e.message.split("\n")[0];if(/ambiguous argument '.*?': unknown revision or path not in the working tree/.test(o))try{return yield Dt(i,...["symbolic-ref","-q","--short","HEAD"])}catch(e){return}return kt(e,i,...t)}})}static revparse_toplevel(e){return r.__awaiter(this,void 0,void 0,function*(){try{return(yield Dt({cwd:e},"rev-parse","--show-toplevel")).trim()}catch(e){return}})}static show(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){const[s,r]=Pt.splitPath(t,e);if(Pt.isStagedUncommitted(i)&&(i=":"),Pt.isUncommitted(i))throw new Error(`sha=${i} is uncommitted`);const n={cwd:r,encoding:o.encoding||"utf8"},a=i.endsWith(":")?`${i}./${s}`:`${i}:./${s}`;try{return yield Dt(n,"show",a)}catch(e){const t=e&&e.toString();if(/Path \'.*?\' does not exist in/.test(t)||/Path \'.*?\' exists on disk, but not in /.test(t))return;return kt(e,n,a)}})}static stash_apply(e,t,i){if(t)return St({cwd:e},"stash",i?"pop":"apply",t)}static stash_delete(e,t){if(t)return St({cwd:e},"stash","drop",t)}static stash_list(e){return St({cwd:e},..._t)}static stash_push(e,t,i){const o=["stash","push","-u"];return i&&o.push("-m",i),o.splice(o.length,0,"--",...t),St({cwd:e},...o)}static stash_save(e,t){const i=["stash","save","-u"];return t&&i.push(t),St({cwd:e},...i)}static status(e,t=1){const i=t>=2?`--porcelain=v${t}`:"--porcelain";return St({cwd:e,env:Object.assign({},process.env,{GIT_OPTIONAL_LOCKS:"0"})},"status",i,"--branch","-u")}static status_file(e,t,i=1){const[o,s]=Pt.splitPath(t,e),r=i>=2?`--porcelain=v${i}`:"--porcelain";return St({cwd:s,env:Object.assign({},process.env,{GIT_OPTIONAL_LOCKS:"0"})},"status",r,o)}static tag(e){return St({cwd:e},...["tag","-l"])}}Pt.shaRegex=/^[0-9a-f]{40}(\^[0-9]*?)??( -)?$/,Pt.shaStrictRegex=/^[0-9a-f]{40}$/,Pt.stagedUncommittedRegex=/^[0]{40}(\^[0-9]*?)??:$/,Pt.stagedUncommittedSha="0000000000000000000000000000000000000000:",Pt.uncommittedRegex=/^[0]{40}(\^[0-9]*?)??:??$/,Pt.uncommittedSha="0000000000000000000000000000000000000000";class Ft{constructor(e,t){this.collapsableWhitespace=0,this.reset(e,t)}reset(e,t){this._item=e,void 0===t&&void 0!==this._options||(void 0===t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:MMa"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}_padOrTruncate(e,t){void 0===t&&(t={truncateTo:void 0,padDirection:"left",collapseWhitespace:!1});let i=t.truncateTo;const o=y.width(e);if(void 0===i){if(0===this.collapsableWhitespace)return e;const i=this.collapsableWhitespace-o;return this.collapsableWhitespace=0,i<=0?e:void 0===t.truncateTo?e:y.padLeft(e,i)}i+=this.collapsableWhitespace,this.collapsableWhitespace=0;const s=i-o;return s>0?(t.collapseWhitespace&&(this.collapsableWhitespace=s),"left"===t.padDirection?y.padLeft(e,i):(t.collapseWhitespace&&(i-=s),y.padRight(e,i))):s<0?y.truncate(e,i):e}static fromTemplateCore(e,t,i,o){if(e instanceof Ft)return y.interpolate(t,e);let s=void 0;null==o||"string"==typeof o?s={dateFormat:o,tokenOptions:y.getTokensFromTemplate(t).reduce((e,t)=>(e[t.key]=t.options,e),{})}:s=o;return void 0===this._formatter?this._formatter=new e(i,s):this._formatter.reset(i,s),y.interpolate(t,this._formatter)}}Ft._formatter=void 0;class Rt extends Ft{get ago(){const e=this._item.fromNow();return this._padOrTruncate(e,this._options.tokenOptions.ago)}get author(){const e=this._item.author;return this._padOrTruncate(e,this._options.tokenOptions.author)}get authorAgo(){const e=`${this._item.author}, ${this._item.fromNow()}`;return this._padOrTruncate(e,this._options.tokenOptions.authorAgo)}get date(){const e=this._item.formatDate(this._options.dateFormat);return this._padOrTruncate(e,this._options.tokenOptions.date)}get id(){return this._item.isUncommitted&&!this._item.isStagedUncommitted?"00000000":this._item.shortSha}get message(){let e=this._item.isUncommitted?"Uncommitted change":this._item.message;if(this._options.truncateMessageAtNewLine){const t=e.indexOf("\n");-1!==t&&(e=`${e.substring(0,t)}${V.Space}${V.Ellipsis}`)}return this._padOrTruncate(e,this._options.tokenOptions.message)}get sha(){return this.id}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}class Tt extends Ft{get directory(){const e=Xe.getFormattedDirectory(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.file)}get file(){const e=_e.basename(this._item.fileName);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){const e=Xe.getFormattedPath(this._item,void 0,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get path(){const e=Xe.getRelativePath(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.file)}get working(){const e=this._item.commit;return void 0!==e&&e.isUncommitted?`${V.Pensil} ${V.Space}`:""}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}var Et,Bt,Nt,At,Ut;!function(e){e.Author="author",e.ChangedOccurrences="changed-occurrences",e.Changes="changes",e.Files="files",e.Message="message",e.Sha="sha"}(Et||(Et={}));class Ot extends O.Disposable{constructor(){super(()=>this.dispose()),this._onDidChangeRepositories=new O.EventEmitter,this._suspended=!1,this._repositoryTree=b.forPaths(),this._trackedCache=new Map,this._versionedUriCache=new Map,this._disposable=O.Disposable.from(O.window.onDidChangeWindowState(this.onWindowStateChanged,this),O.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent),this._repositoriesLoadingPromise=this.onWorkspaceFoldersChanged()}get onDidChangeRepositories(){return this._onDidChangeRepositories.event}dispose(){this._repositoryTree.forEach(e=>e.dispose()),this._trackedCache.clear(),this._versionedUriCache.clear(),this._disposable&&this._disposable.dispose()}get UseCaching(){return Is.config.advanced.caching.enabled}onAnyRepositoryChanged(e){this._trackedCache.clear()}onConfigurationChanged(e){(Hs.initializing(e)||Hs.changed(e,Hs.name("defaultDateStyle").value)||Hs.changed(e,Hs.name("defaultDateFormat").value))&&Ne.reset()}onWindowStateChanged(e){e.focused?this._repositoryTree.forEach(e=>e.resume()):this._repositoryTree.forEach(e=>e.suspend()),this._suspended=!e.focused}onWorkspaceFoldersChanged(e){return r.__awaiter(this,void 0,void 0,function*(){let t=!1;for(const i of(void 0===e&&(t=!0,e={added:O.workspace.workspaceFolders||[],removed:[]}),e.added)){if(i.uri.scheme!==Q.File)continue;const e=yield this.repositorySearch(i);for(const t of e)this._repositoryTree.set(t.path,t)}for(const t of e.removed){if(t.uri.scheme!==Q.File)continue;const e=t.uri.fsPath,i=this._repositoryTree.findSuperstr(e),o=void 0!==i?[...f.map(i.entries(),([t,i])=>[t,_e.join(e,i)])]:[],s=this._repositoryTree.get(e);for(const[t,i]of(void 0!==s&&o.push([s,e]),o))this._repositoryTree.delete(i),t.dispose()}yield this.updateContext(this._repositoryTree),t||setImmediate(()=>this.fireRepositoriesChanged())})}repositorySearch(e){return r.__awaiter(this,void 0,void 0,function*(){const t=e.uri,i=[],s=this.onAnyRepositoryChanged.bind(this),r=yield this.getRepoPathCore(t.fsPath,!0);void 0!==r&&i.push(new ze(e,r,!0,s,this._suspended));const n=Hs.get(Hs.name("advanced")("repositorySearchDepth").value,t);if(n<=0)return i;let a=Object.assign({},O.workspace.getConfiguration("files",t).get("exclude",{}),O.workspace.getConfiguration("search",t).get("exclude",{}));a=[...f.filterMap(o.entries(a),([e,t])=>{if(t)return e.startsWith("**/")?e.substring(3):e})].reduce((e,t)=>(e[t]=!0,e),Object.create(null));const h=process.hrtime(),c=yield this.repositorySearchCore(t.fsPath,n,a),l=process.hrtime(h);for(let o of(se.log(`Searching (depth=${n}) for repositories in ${t.fsPath} took ${1e3*l[0]+Math.floor(l[1]/1e6)} ms`),c)){if(o=_e.dirname(o),y.normalizePath(o)===r)continue;const t=yield this.getRepoPathCore(o,!0);void 0!==t&&i.push(new ze(e,t,!1,s,this._suspended))}return i})}repositorySearchCore(e,t,i,o=[]){return r.__awaiter(this,void 0,void 0,function*(){return new Promise((s,n)=>{ye.readdir(e,(a,h)=>r.__awaiter(this,void 0,void 0,function*(){if(null!=a)return void n(a);if(0===h.length)return void s(o);const r=[],c=h.map(t=>{const s=_e.resolve(e,t);return new Promise((e,n)=>{ye.stat(s,(n,a)=>{".git"===t?o.push(s):null==n&&!0!==i[t]&&null!=a&&a.isDirectory()&&r.push(s),e()})})});if(yield Promise.all(c),t-- >0)for(const e of r)yield this.repositorySearchCore(e,t,i,o);s(o)}))})})}updateContext(e){return r.__awaiter(this,void 0,void 0,function*(){const t=e.any();yield z(G.Enabled,t);let i=!1;if(t)for(const t of e.values())if(i=yield t.hasRemotes())break;if(yield z(G.HasRemotes,i),!t){const e=O.workspace.createFileSystemWatcher("**/.git",!1,!0,!0),t=O.Disposable.from(e,e.onDidCreate(e=>r.__awaiter(this,void 0,void 0,function*(){const i=O.workspace.getWorkspaceFolder(e);if(void 0===i)return;const o=yield this.repositorySearch(i);if(0!==o.length){for(const e of(t.dispose(),o))this._repositoryTree.set(e.path,e);yield this.updateContext(this._repositoryTree),setImmediate(()=>this.fireRepositoriesChanged())}}),this))}})}fireRepositoriesChanged(){this._onDidChangeRepositories.fire()}checkoutFile(e,t){return t=t||e.sha,se.log(`checkoutFile('${e.repoPath}', '${e.fsPath}', '${t}')`),Pt.checkout(e.repoPath,e.fsPath,t)}fileExists(e,t){return r.__awaiter(this,void 0,void 0,function*(){return yield new Promise((i,o)=>ye.exists(_e.resolve(e,t),i))})}findNextCommit(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){let o=yield this.getLogForFile(e,t,{maxCount:1,ref:i,reverse:!0}),s=o&&f.first(o.commits.values());if(s)return s;const r=yield this.findNextFileName(e,t,i);return r&&(s=(o=yield this.getLogForFile(e,r,{maxCount:1,ref:i,reverse:!0}))&&f.first(o.commits.values())),s})}findNextFileName(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){return[t,e]=Pt.splitPath(t,e),(yield this.fileExists(e,t))?t:yield this.findNextFileNameCore(e,t,i)})}findNextFileNameCore(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===i&&void 0===(i=yield this.getRecentShaForFile(e,t)))return;const o=yield this.getLog(e,{maxCount:1,ref:i});if(void 0===o)return;const s=f.first(o.commits.values()).fileStatuses.find(e=>e.originalFileName===t);return void 0!==s?s.fileName:void 0})}findWorkingFileName(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){let o;if("string"==typeof e)o=e,void 0===t&&(t=yield this.getRepoPath(o,{ref:i}),[o,t]=Pt.splitPath(o,t));else{const i=e;if(t=i.repoPath,i.workingFileName&&(yield this.fileExists(t,i.workingFileName)))return[i.workingFileName,t];o=i.fileName}for(;;){if(yield this.fileExists(t,o))return[o,t];if(void 0===(o=yield this.findNextFileNameCore(t,o)))return[void 0,void 0]}})}getActiveRepoPath(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e){const e=this.getHighlanderRepoPath();if(void 0!==e)return e}if(void 0===(e=e||O.window.activeTextEditor))return;const t=yield Is.tracker.getOrAdd(e.document.uri);return void 0!==t?t.uri.repoPath:void 0})}getHighlanderRepoPath(){const e=this._repositoryTree.highlander();if(void 0===e)return;const[t]=e;return t.path}getBlameForFile(e){return r.__awaiter(this,void 0,void 0,function*(){let t="blame";void 0!==e.sha&&(t+=`:${e.sha}`);const i=yield Is.tracker.getOrAdd(e);if(this.UseCaching){if(void 0!==i.state){const o=i.state.get(t);if(void 0!==o)return se.log(`getBlameForFile[Cached(${t})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),o.item}se.log(`getBlameForFile[Not Cached(${t})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),void 0===i.state&&(i.state=new ne(i.key))}else se.log(`getBlameForFile('${e.repoPath}', '${e.fsPath}', '${e.sha}')`);const o=this.getBlameForFileCore(e,i,t);return void 0!==i.state&&(se.log(`Add blame cache for '${i.state.key}:${t}'`),i.state.set(t,{item:o})),o})}getBlameForFileCore(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(e)))return se.log(`Skipping blame; '${e.fsPath}' is not tracked`),Ot.emptyPromise;const[o,s]=Pt.splitPath(e.fsPath,e.repoPath,!1);try{const r=yield Pt.blame(s,o,e.sha,{ignoreWhitespace:Is.config.blame.ignoreWhitespace});return ot.parse(r,s,o)}catch(e){if(void 0!==t.state){const o=e&&e.toString();return se.log(`Replace blame cache with empty promise for '${t.state.key}:${i}'`),t.state.set(i,{item:Ot.emptyPromise,errorMessage:o}),t.setBlameFailure(),Ot.emptyPromise}return}})}getBlameForFileContents(e,t){return r.__awaiter(this,void 0,void 0,function*(){const i=`blame:${y.sha1(t)}`,o=yield Is.tracker.getOrAdd(e);if(this.UseCaching){if(void 0!==o.state){const t=o.state.get(i);if(void 0!==t)return se.log(`getBlameForFileContents[Cached(${i})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),t.item}se.log(`getBlameForFileContents[Not Cached(${i})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),void 0===o.state&&(o.state=new ne(o.key))}else se.log(`getBlameForFileContents('${e.repoPath}', '${e.fsPath}', '${e.sha}')`);const s=this.getBlameForFileContentsCore(e,t,o,i);return void 0!==o.state&&(se.log(`Add blame cache for '${o.state.key}:${i}'`),o.state.set(i,{item:s})),s})}getBlameForFileContentsCore(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(e)))return se.log(`Skipping blame; '${e.fsPath}' is not tracked`),Ot.emptyPromise;const[s,r]=Pt.splitPath(e.fsPath,e.repoPath,!1);try{const e=yield Pt.blame_contents(r,s,t,{correlationKey:`:${o}`,ignoreWhitespace:Is.config.blame.ignoreWhitespace});return ot.parse(e,r,s)}catch(e){if(void 0!==i.state){const t=e&&e.toString();return se.log(`Replace blame cache with empty promise for '${i.state.key}:${o}'`),i.state.set(o,{item:Ot.emptyPromise,errorMessage:t}),i.setBlameFailure(),Ot.emptyPromise}return}})}getBlameForLine(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(se.log(`getBlameForLine('${e.repoPath}', '${e.fsPath}', '${e.sha}', ${t})`),!i.skipCache&&this.UseCaching){const i=yield this.getBlameForFile(e);if(void 0===i)return;let o=i.lines[t];if(void 0===o){if(i.lines.length!==t)return;o=i.lines[t-1]}const s=i.commits.get(o.sha);if(void 0===s)return;return{author:Object.assign({},i.authors.get(s.author),{lineCount:s.lines.length}),commit:s,line:o}}const o=t+1,s=e.fsPath;try{const i=yield Pt.blame(e.repoPath,s,e.sha,{ignoreWhitespace:Is.config.blame.ignoreWhitespace,startLine:o,endLine:o}),r=ot.parse(i,e.repoPath,s);if(void 0===r)return;return{author:f.first(r.authors.values()),commit:f.first(r.commits.values()),line:r.lines[t]}}catch(e){return}})}getBlameForLineContents(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){if(se.log(`getBlameForLineContents('${e.repoPath}', '${e.fsPath}', ${t})`),!o.skipCache&&this.UseCaching){const o=yield this.getBlameForFileContents(e,i);if(void 0===o)return;let s=o.lines[t];if(void 0===s){if(o.lines.length!==t)return;s=o.lines[t-1]}const r=o.commits.get(s.sha);if(void 0===r)return;return{author:Object.assign({},o.authors.get(r.author),{lineCount:r.lines.length}),commit:r,line:s}}const s=t+1,r=e.fsPath;try{const o=yield Pt.blame_contents(e.repoPath,r,i,{ignoreWhitespace:Is.config.blame.ignoreWhitespace,startLine:s,endLine:s}),n=ot.parse(o,e.repoPath,r);if(void 0===n)return;return{author:f.first(n.authors.values()),commit:f.first(n.commits.values()),line:n.lines[t]}}catch(e){return}})}getBlameForRange(e,t){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getBlameForRange('${e.repoPath}', '${e.fsPath}', '${e.sha}', [${t.start.line}, ${t.end.line}])`);const i=yield this.getBlameForFile(e);if(void 0!==i)return this.getBlameForRangeSync(i,e,t)})}getBlameForRangeSync(e,t,i){if(se.log(`getBlameForRangeSync('${t.repoPath}', '${t.fsPath}', '${t.sha}', [${i.start.line}, ${i.end.line}])`),0===e.lines.length)return Object.assign({allLines:e.lines},e);if(0===i.start.line&&i.end.line===e.lines.length-1)return Object.assign({allLines:e.lines},e);const o=e.lines.slice(i.start.line,i.end.line+1),s=new Set(o.map(e=>e.sha)),r=new Map,n=new Map;for(const t of e.commits.values()){if(!s.has(t.sha))continue;const e=t.with({lines:t.lines.filter(e=>e.line>=i.start.line&&e.line<=i.end.line)});n.set(t.sha,e);let o=r.get(e.author);void 0===o&&(o={name:e.author,lineCount:0},r.set(o.name,o)),o.lineCount+=e.lines.length}return{authors:new Map([...r.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:n,lines:o,allLines:e.lines}}getBranch(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;se.log(`getBranch('${e}')`);const t=yield Pt.revparse_currentBranch(e);if(void 0===t)return;const i=t.split("\n");return new Oe(e,i[0],!0,i[1])})}getBranches(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];se.log(`getBranches('${e}')`);const t=yield Pt.branch(e,{all:!0});if(""===t){const t=yield this.getBranch(e);return void 0!==t?[t]:[]}return nt.parse(t,e)||[]})}getChangedFilesCount(e,t){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getChangedFilesCount('${e}', '${t}')`);const i=yield Pt.diff_shortstat(e,t);return We.parseShortStat(i)})}getConfig(e,t){return r.__awaiter(this,void 0,void 0,function*(){return se.log(`getConfig('${e}', '${t}')`),yield Pt.config_get(e,t)})}getDiffForFile(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){void 0!==t&&void 0===i&&void 0!==e.sha&&(i=e.sha);let o="diff";void 0!==t&&(o+=`:${t}`),void 0!==i&&(o+=`:${i}`);const s=yield Is.tracker.getOrAdd(e);if(this.UseCaching){if(void 0!==s.state){const r=s.state.get(o);if(void 0!==r)return se.log(`getDiffForFile[Cached(${o})]('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`),r.item}se.log(`getDiffForFile[Not Cached(${o})]('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`),void 0===s.state&&(s.state=new ne(s.key))}else se.log(`getDiffForFile('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`);const r=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:Ot.getEncoding(e)},s,o);return void 0!==s.state&&(se.log(`Add log cache for '${s.state.key}:${o}'`),s.state.set(o,{item:r})),r})}getDiffForFileCore(e,t,i,o,s,n,a){return r.__awaiter(this,void 0,void 0,function*(){const[r,h]=Pt.splitPath(t,e,!1);try{const e=yield Pt.diff(h,r,i,o,s);return We.parse(e)}catch(e){if(void 0!==n.state){const t=e&&e.toString();return se.log(`Replace diff cache with empty promise for '${n.state.key}:${a}'`),n.state.set(a,{item:Ot.emptyPromise,errorMessage:t}),Ot.emptyPromise}return}})}getDiffForLine(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getDiffForLine('${e.repoPath}', '${e.fsPath}', ${t}, '${i}', '${o}')`);try{const s=yield this.getDiffForFile(e,i,o);if(void 0===s)return;const r=s.chunks.find(e=>e.currentPosition.start<=t&&e.currentPosition.end>=t);if(void 0===r)return;return r.lines[t-r.currentPosition.start+1]}catch(e){return}})}getDiffStatus(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getDiffStatus('${e}', '${t}', '${i}', ${o.filter})`);try{const s=yield Pt.diff_nameStatus(e,t,i,o);return We.parseNameStatus(s,e)}catch(e){return}})}getRecentLogCommitForFile(e,t){return r.__awaiter(this,void 0,void 0,function*(){return this.getLogCommitForFile(e,t,void 0)})}getRecentShaForFile(e,t){return r.__awaiter(this,void 0,void 0,function*(){return yield Pt.log_recent(e,t)})}getLogCommit(e,t){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getLogCommit('${e}', '${t}'`);const i=yield this.getLog(e,{maxCount:2,ref:t});if(void 0!==i)return i.commits.get(t)})}getLogCommitForFile(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getFileLogCommit('${e}', '${t}', '${i.ref}', ${i.firstIfNotFound})`);const o=yield this.getLogForFile(e,t,{maxCount:2,ref:i.ref});if(void 0===o)return;const s=i.ref&&o.commits.get(i.ref);return void 0!==s||i.firstIfNotFound||!i.ref||Pt.isResolveRequired(i.ref)?s||f.first(o.commits.values()):void 0})}getLog(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){t=Object.assign({reverse:!1},t),se.log(`getLog('${e}', '${t.ref}', ${t.maxCount}, ${t.reverse})`);const i=null==t.maxCount?Is.config.advanced.maxListItems||0:t.maxCount;try{const o=yield Pt.log(e,{maxCount:i,ref:t.ref,reverse:t.reverse}),s=ct.parse(o,Be.Branch,e,void 0,t.ref,i,t.reverse,void 0);if(void 0!==s){const i=Object.assign({},t);s.query=(t=>this.getLog(e,Object.assign({},i,{maxCount:t})))}return s}catch(e){return}})}getLogForSearch(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getLogForSearch('${e}', '${t}', '${i}', ${o.maxCount})`);let s=null==o.maxCount?Is.config.advanced.maxListItems||0:o.maxCount,r=void 0;switch(i){case Et.Author:r=[`--author=${t}`];break;case Et.ChangedOccurrences:r=[`-S${t}`,"--pickaxe-regex"];break;case Et.Changes:r=[`-G${t}`];break;case Et.Files:r=["--",`${t}`];break;case Et.Message:r=[`--grep=${t}`];break;case Et.Sha:r=[t],s=1}try{const n=yield Pt.log_search(e,r,{maxCount:s}),a=ct.parse(n,Be.Branch,e,void 0,void 0,s,!1,void 0);if(void 0!==a){const s=Object.assign({},o);a.query=(o=>this.getLogForSearch(e,t,i,Object.assign({},s,{maxCount:o})))}return a}catch(e){return}})}getLogForFile(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&e===y.normalizePath(t))throw new Error(`File name cannot match the repository path; fileName=${t}`);let o="log";void 0!==(i=Object.assign({reverse:!1,skipMerges:!1},i)).ref&&(o+=`:${i.ref}`),void 0!==i.maxCount&&(o+=`:n${i.maxCount}`);const s=yield Is.tracker.getOrAdd(new Te(O.Uri.file(t),{repoPath:e,sha:i.ref}));if(this.UseCaching&&void 0===i.range&&!i.reverse){if(void 0!==s.state){const r=s.state.get(o);if(void 0!==r)return se.log(`getLogForFile[Cached(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item;if("log"!==o){const r=s.state.get("log");if(void 0!==r){if(void 0===i.ref)return se.log(`getLogForFile[Cached(~${o})]('${e}', '${t}', '', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item;se.log(`getLogForFile[? Cache(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`);const s=yield r.item;if(void 0!==s&&s.commits.has(i.ref))return se.log(`getLogForFile[Cached(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item}}}se.log(`getLogForFile[Not Cached(${o})]('${e}', '${t}', ${i.ref}, ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),void 0===s.state&&(s.state=new ne(s.key))}else se.log(`getLogForFile('${e}', '${t}', ${i.ref}, ${i.maxCount}, ${i.range&&`[${i.range.start.line}, ${i.range.end.line}]`}, ${i.reverse}, ${i.skipMerges})`);const r=this.getLogForFileCore(e,t,i,s,o);return void 0===s.state||void 0!==i.range||i.reverse||(se.log(`Add log cache for '${s.state.key}:${o}'`),s.state.set(o,{item:r})),r})}getLogForFileCore(e,t,i,o,s){return r.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(t,e,i.ref)))return se.log(`Skipping log; '${t}' is not tracked`),Ot.emptyPromise;const[n,a]=Pt.splitPath(t,e,!1);try{const{range:h}=i,c=r.__rest(i,["range"]),l=null==i.maxCount?Is.config.advanced.maxListItems||0:i.maxCount,d=yield Pt.log_file(a,n,Object.assign({},c,{maxCount:l,startLine:h&&h.start.line+1,endLine:h&&h.end.line+1})),u=ct.parse(d,Be.File,a,n,c.ref,l,c.reverse,h);if(void 0!==u){const o=Object.assign({},i);u.query=(i=>this.getLogForFile(e,t,Object.assign({},o,{maxCount:i})))}return u}catch(e){if(void 0!==o.state&&void 0===i.range&&!i.reverse){const t=e&&e.toString();return se.log(`Replace log cache with empty promise for '${o.state.key}:${s}'`),o.state.set(s,{item:Ot.emptyPromise,errorMessage:t}),Ot.emptyPromise}return}})}hasRemote(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;const t=yield this.getRepository(e);return void 0!==t&&t.hasRemote()})}hasRemotes(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;const t=yield this.getRepository(e);return void 0!==t&&t.hasRemotes()})}getMergeBase(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){try{const s=yield Pt.merge_base(e,t,i,o);if(void 0===s)return;return s.split("\n")[0]}catch(e){return void se.error(e,"GitService.getMergeBase")}})}getRemotes(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];se.log(`getRemotes('${e}')`);const t=yield this.getRepository(e);return void 0!==t?t.getRemotes():this.getRemotesCore(e)})}getRemotesCore(e,t){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];se.log(`getRemotesCore('${e}')`),t=t||Ce.createMap(Hs.get(Hs.name("remotes").value,null));try{const i=yield Pt.remote(e);return ut.parse(i,e,Ce.factory(t))}catch(e){return se.error(e,"GitService.getRemotesCore"),[]}})}getRepoPath(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return yield this.getActiveRepoPath();if(e instanceof Te)return e.repoPath;const i=yield this.getRepository(e,t);if(void 0!==i)return i.path;const o=yield this.getRepoPathCore("string"==typeof e?e:e.fsPath,!1);if(void 0===o)return;if(void 0!==this._repositoryTree.get(o))return o;const s=this._repositoryTree.findSubstr(o),n=void 0===s?O.workspace.getWorkspaceFolder(O.Uri.file(o)):s.folder;if(void 0!==n){const e=new ze(n,o,!1,this.onAnyRepositoryChanged.bind(this),this._suspended);this._repositoryTree.set(o,e),setImmediate(()=>r.__awaiter(this,void 0,void 0,function*(){yield this.updateContext(this._repositoryTree),this.fireRepositoriesChanged()}))}return o})}getRepoPathCore(e,t){return r.__awaiter(this,void 0,void 0,function*(){try{return yield Pt.revparse_toplevel(t?e:_e.dirname(e))}catch(e){return void se.error(e,"GitService.getRepoPathCore")}})}getRepositories(){return r.__awaiter(this,void 0,void 0,function*(){return(yield this.getRepositoryTree()).values()})}getRepositoryTree(){return r.__awaiter(this,void 0,void 0,function*(){return void 0!==this._repositoriesLoadingPromise&&(yield this._repositoriesLoadingPromise,this._repositoriesLoadingPromise=void 0),this._repositoryTree})}getRepository(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){const i=yield this.getRepositoryTree();let o;if("string"==typeof e){const t=i.get(e);if(void 0!==t)return t;o=e}else if(e instanceof Te){if(e.repoPath){const t=i.get(e.repoPath);if(void 0!==t)return t}o=e.fsPath}else o=e.fsPath;const s=i.findSubstr(o);if(void 0!==s&&(t.skipTrackingCheck||(yield this.isTracked(o,s.path,t.ref))))return s})}getRepositoryCount(){return r.__awaiter(this,void 0,void 0,function*(){return(yield this.getRepositoryTree()).count()})}getStashList(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;se.log(`getStashList('${e}')`);const t=yield Pt.stash_list(e);return gt.parse(t,e)})}getStatusForFile(e,t){return r.__awaiter(this,void 0,void 0,function*(){se.log(`getStatusForFile('${e}', '${t}')`);const i=Pt.validateVersion(2,11)?2:1,o=yield Pt.status_file(e,t,i),s=vt.parse(o,e,i);if(void 0!==s&&s.files.length)return s.files[0]})}getStatusForRepo(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;se.log(`getStatusForRepo('${e}')`);const t=Pt.validateVersion(2,11)?2:1,i=yield Pt.status(e,t);return vt.parse(i,e,t)})}getTags(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];se.log(`getTags('${e}')`);const t=yield Pt.tag(e);return wt.parse(t,e)||[]})}getVersionedFile(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(se.log(`getVersionedFile('${e}', '${t}', '${i}')`),!i||Pt.isUncommitted(i)&&!Pt.isStagedUncommitted(i))return(yield this.fileExists(e,t))?t:void 0;const o=yield Pt.getVersionedFile(e,t,i);return void 0!==o?(this._versionedUriCache.set(Te.toKey(o),new Te(O.Uri.file(t),{sha:i,repoPath:e,versionedPath:o})),o):void 0})}getVersionedFileText(e,t,i){return se.log(`getVersionedFileText('${e}', '${t}', ${i})`),Pt.show(e,t,i,{encoding:Ot.getEncoding(e,t)})}getVersionedUri(e){return this._versionedUriCache.get(Te.toKey(e))}isTrackable(e){let t;return(t="string"==typeof e?e:e.scheme)===Q.File||t===Q.Git||t===Q.GitLensGit}isTracked(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(i===Ot.deletedSha)return!1;let o,s;if("string"==typeof e)[s,t]=Pt.splitPath(e,t),o=Te.toKey(e);else{if(!this.isTrackable(e))return!1;s=e.fsPath,t=e.repoPath,i=e.sha,o=Te.toKey(s)}void 0!==i&&(o+=`:${i}`),se.log(`isTracked('${s}', '${t}', '${i}')`);let r=this._trackedCache.get(o);return void 0!==r?yield r:(r=this.isTrackedCore(void 0===t?"":t,s,i),this._trackedCache.set(o,r),r=yield r,this._trackedCache.set(o,r),r)})}isTrackedCore(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(i===Ot.deletedSha)return!1;try{let o=!!(yield Pt.ls_files(void 0===e?"":e,t));return o||void 0===i||(o=!!(yield Pt.ls_files(void 0===e?"":e,t,{ref:i})))||(o=!!(yield Pt.ls_files(void 0===e?"":e,t,{ref:`${i}^`}))),o}catch(e){return se.error(e,"GitService.isTrackedCore"),!1}})}getDiffTool(e){return r.__awaiter(this,void 0,void 0,function*(){return(yield Pt.config_get("diff.guitool",e))||(yield Pt.config_get("diff.tool",e))})}openDiffTool(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){if(!o&&void 0===(o=yield this.getDiffTool(e)))throw new Error("No diff tool found");return se.log(`openDiffTool('${e}', '${t.fsPath}', ${i}, '${o}')`),Pt.difftool_fileDiff(e,t.fsPath,o,i)})}openDirectoryDiff(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){if(!o&&void 0===(o=yield this.getDiffTool(e)))throw new Error("No diff tool found");return se.log(`openDirectoryDiff('${e}', '${t}', '${i}', '${o}')`),Pt.difftool_dirDiff(e,o,t,i)})}resolveReference(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){return Ot.isResolveRequired(t)?(se.log(`resolveReference('${e}', '${t}', '${i&&i.toString()}')`),void 0===i?(yield Pt.revparse(e,t))||t:(yield Pt.log_resolve(e,y.normalizePath(_e.relative(e,i.fsPath)),t))||t):t})}stopWatchingFileSystem(){this._repositoryTree.forEach(e=>e.stopWatchingFileSystem())}stashApply(e,t,i=!1){return se.log(`stashApply('${e}', '${t}', ${i})`),Pt.stash_apply(e,t,i)}stashDelete(e,t){return se.log(`stashDelete('${e}', '${t}')`),Pt.stash_delete(e,t)}stashSave(e,t,i){if(se.log(`stashSave('${e}', '${t}', ${i})`),void 0===i)return Pt.stash_save(e,t);const o=i.map(t=>Pt.splitPath(t.fsPath,e)[0]);return Pt.stash_push(e,o,t)}static getEncoding(e,t){const i="string"==typeof e?O.Uri.file(_e.join(e,t)):e;return Pt.getEncoding(O.workspace.getConfiguration("files",i).get("encoding"))}static initialize(e){return Pt.getGitInfo(e)}static getGitPath(){return Pt.gitInfo().path}static getGitVersion(){return Pt.gitInfo().version}static isResolveRequired(e){return Pt.isResolveRequired(e)}static isSha(e){return Pt.isSha(e)}static isStagedUncommitted(e){return Pt.isStagedUncommitted(e)}static isUncommitted(e){return Pt.isUncommitted(e)}static shortenSha(e){if(void 0!==e)return e===Ot.deletedSha?"(deleted)":Pt.isSha(e)||Pt.isStagedUncommitted(e)?Pt.shortenSha(e):e}static validateGitVersion(e,t){const[i,o]=this.getGitVersion().split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}}Ot.emptyPromise=Promise.resolve(void 0),Ot.deletedSha="ffffffffffffffffffffffffffffffffffffffff",Ot.stagedUncommittedSha=Pt.stagedUncommittedSha,Ot.uncommittedSha=Pt.uncommittedSha,function(e){e.ActiveEditorChanged="active-editor-changed",e.AutoRefreshChanged="auto-refresh-changed",e.Command="command",e.ConfigurationChanged="configuration",e.NodeCommand="node-command",e.RepoChanged="repo-changed",e.ViewChanged="view-changed",e.VisibleEditorsChanged="visible-editors-changed"}(Bt||(Bt={})),function(e){e.Branch="gitlens:branch",e.BranchWithTracking="gitlens:branch:tracking",e.Branches="gitlens:branches",e.BranchesWithRemotes="gitlens:branches:remotes",e.CurrentBranch="gitlens:current-branch",e.CurrentBranchWithTracking="gitlens:current-branch:tracking",e.RemoteBranch="gitlens:remote-branch",e.Commit="gitlens:commit",e.CommitOnCurrentBranch="gitlens:commit:current",e.CommitFile="gitlens:commit-file",e.Commits="gitlens:commits",e.ComparisonResults="gitlens:comparison-results",e.FileHistory="gitlens:file-history",e.Folder="gitlens:folder",e.History="gitlens:history",e.Message="gitlens:message",e.Pager="gitlens:pager",e.Remote="gitlens:remote",e.Remotes="gitlens:remotes",e.Repositories="gitlens:repositories",e.Repository="gitlens:repository",e.Results="gitlens:results",e.SearchResults="gitlens:search-results",e.Stash="gitlens:stash",e.StashFile="gitlens:stash-file",e.Stashes="gitlens:stashes",e.Status="gitlens:status",e.StatusFile="gitlens:status-file",e.StatusFiles="gitlens:status-files",e.StatusFileCommits="gitlens:status-file-commits",e.StatusUpstream="gitlens:status-upstream",e.Tag="gitlens:tag",e.Tags="gitlens:tags"}(Nt||(Nt={}));class Lt extends O.Disposable{constructor(e){super(()=>this.dispose()),this.uri=e,this.supportsPaging=!1}dispose(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0),this.resetChildren()}getCommand(){}refresh(){}resetChildren(){void 0!==this.children&&(this.children.forEach(e=>e.dispose()),this.children=void 0)}}class It extends Lt{get repoPath(){return this.uri.repoPath}}class Mt extends Lt{constructor(e){super(new Te),this.message=e}getChildren(){return[]}getTreeItem(){const e=new O.TreeItem(this.message,O.TreeItemCollapsibleState.None);return e.contextValue=Nt.Message,e}}class Wt extends Lt{constructor(e,t,i){super(new Te),this.message=e,this.node=t,this.explorer=i,this.args={}}getChildren(){return[]}getTreeItem(){const e=new O.TreeItem(this.message,O.TreeItemCollapsibleState.None);return e.contextValue=Nt.Pager,e.command=this.getCommand(),e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-unfold.svg"),light:Is.context.asAbsolutePath("images/light/icon-unfold.svg")},e}getCommand(){return{title:"Refresh",command:this.explorer.getQualifiedCommand("refreshNode"),arguments:[this.node,this.args]}}}class Ht extends Wt{constructor(e,t,i){super(`${e} ${V.Space}${V.Dash}${V.Space} this may take a while`,t,i),this.args={maxCount:0}}}!function(e){e[e.CommitLabel=1]="CommitLabel",e[e.FileLabel=2]="FileLabel",e[e.CommitIcon=4]="CommitIcon",e[e.StatusIcon=8]="StatusIcon",e[e.Gravatar=16]="Gravatar",e[e.File=10]="File"}(At||(At={}));class jt extends Lt{constructor(e,t,i,o){super(Te.fromFileStatus(e,t.repoPath,t.sha)),this.status=e,this.commit=t,this.explorer=i,this.displayAs=o,this.priority=!1,this.repoPath=t.repoPath}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){return[]})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){if(!this.commit.isFile){const e=this.commit.toFileCommit(this.status);if(void 0===e){const e=yield Is.git.getLogForFile(this.repoPath,this.status.fileName,{maxCount:2,ref:this.commit.sha});void 0!==e&&(this.commit=e.commits.get(this.commit.sha)||this.commit)}else this.commit=e}const e=new O.TreeItem(this.label,O.TreeItemCollapsibleState.None);if(e.contextValue=this.resourceType,(this.displayAs&At.CommitIcon)===At.CommitIcon)e.iconPath={dark:Is.context.asAbsolutePath(_e.join("images","dark","icon-commit.svg")),light:Is.context.asAbsolutePath(_e.join("images","light","icon-commit.svg"))};else if((this.displayAs&At.StatusIcon)===At.StatusIcon){const t=tt(this.status.status);e.iconPath={dark:Is.context.asAbsolutePath(_e.join("images","dark",t)),light:Is.context.asAbsolutePath(_e.join("images","light",t))}}else(this.displayAs&At.Gravatar)===At.Gravatar&&(e.iconPath=this.commit.getGravatarUri(Is.config.defaultGravatarsStyle));return e.command=this.getCommand(),this._label=void 0,e})}get folderName(){return void 0===this._folderName&&(this._folderName=_e.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=this.displayAs&At.CommitLabel?Rt.fromTemplate(this.getCommitTemplate(),this.commit,{truncateMessageAtNewLine:!0,dataFormat:Is.config.defaultDateFormat}):Tt.fromTemplate(this.getCommitFileTemplate(),this.status,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get resourceType(){return Nt.CommitFile}getCommitTemplate(){return this.explorer.config.commitFormat}getCommitFileTemplate(){return this.explorer.config.commitFileFormat}getCommand(){return{title:"Compare File with Previous Revision",command:Ut.DiffWithPrevious,arguments:[Te.fromFileStatus(this.status,this.commit.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class Gt extends Lt{constructor(e,t,i,o,s){super(Te.fromRepoPath(e)),this.repoPath=e,this.folderName=t,this.relativePath=i,this.root=o,this.explorer=s,this.priority=!0}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e;if(Gt.getFileNesting(this.explorer.config,this.root.descendants,void 0===this.relativePath)!==P.List)for(const t of(e=[],o.values(this.root.children)))void 0!==t.value?(t.value.relativePath=this.root.relativePath,e.push(t.value)):e.push(new Gt(this.repoPath,t.name,t.relativePath,t,this.explorer));else this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;return e.sort((e,t)=>(e instanceof Gt?-1:1)-(t instanceof Gt?-1:1)||(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label)),e})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=new O.TreeItem(this.label,O.TreeItemCollapsibleState.Collapsed);return e.contextValue=Nt.Folder,e})}get label(){return this.folderName}static getFileNesting(e,t,i){const o=e.files.layout||P.Auto;if(o===P.Auto){if(i||e.files.compact){const i=e.files.threshold||5;if(t.length<=i)return P.List}return P.Tree}return o}}class Qt extends It{constructor(e,t,i){super(e.toGitUri()),this.commit=e,this.explorer=t,this.branch=i}get ref(){return this.commit.sha}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=this.commit;let t=[...f.map(e.fileStatuses,t=>new jt(t,e.toFileCommit(t),this.explorer,At.File))];if(this.explorer.config.files.layout!==P.List){const e=s.makeHierarchical(t,e=>e.uri.getRelativePath().split("/"),(...e)=>y.normalizePath(_e.join(...e)),this.explorer.config.files.compact);t=yield new Gt(this.repoPath,"",void 0,e,this.explorer).getChildren()}else t.sort((e,t)=>e.label.localeCompare(t.label));return t})}getTreeItem(){const e=new O.TreeItem(Rt.fromTemplate(this.explorer.config.commitFormat,this.commit,{truncateMessageAtNewLine:!0,dataFormat:Is.config.defaultDateFormat}),O.TreeItemCollapsibleState.Collapsed);return e.contextValue=void 0===this.branch||this.branch.current?Nt.CommitOnCurrentBranch:Nt.Commit,this.explorer.config.gravatars?e.iconPath=this.commit.getGravatarUri(Is.config.defaultGravatarsStyle):e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-commit.svg"),light:Is.context.asAbsolutePath("images/light/icon-commit.svg")},e}getCommand(){return{title:"Compare File with Previous Revision",command:Ut.DiffWithPrevious,arguments:[this.uri,{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class Vt extends It{constructor(e,t,i){super(t),this.branch=e,this.explorer=i,this.supportsPaging=!0}get ref(){return this.branch.name}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield Is.git.getLog(this.uri.repoPath,{maxCount:this.maxCount,ref:this.branch.name});if(void 0===e)return[new Mt("No commits yet")];const t=[...f.map(e.commits.values(),e=>new Qt(e,this.explorer,this.branch))];return e.truncated&&t.push(new Ht("Show All Commits",this,this.explorer)),t})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){let e=this.branch.getName();!this.branch.remote&&void 0!==this.branch.tracking&&this.explorer.config.showTrackingBranch&&(e+=` ${V.Space}${V.ArrowLeftRight}${V.Space} ${this.branch.tracking}`);const t=new O.TreeItem(`${this.branch.current?`${V.Check} ${V.Space}`:""}${e}`,O.TreeItemCollapsibleState.Collapsed);this.branch.remote?t.contextValue=Nt.RemoteBranch:this.branch.current?t.contextValue=this.branch.tracking?Nt.CurrentBranchWithTracking:Nt.CurrentBranch:t.contextValue=this.branch.tracking?Nt.BranchWithTracking:Nt.Branch;let i="";return this.branch.tracking&&(this.branch.state.ahead&&this.branch.state.behind?i="-yellow":this.branch.state.ahead?i="-green":this.branch.state.behind&&(i="-red")),t.iconPath={dark:Is.context.asAbsolutePath(`images/dark/icon-branch${i}.svg`),light:Is.context.asAbsolutePath(`images/light/icon-branch${i}.svg`)},t})}}class Kt extends Lt{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getBranches();return void 0===e?[]:(e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||e.name.localeCompare(t.name)),[...f.filterMap(e,e=>e.remote?void 0:new Vt(e,this.uri,this.explorer))])})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=new O.TreeItem("Branches",this.active?O.TreeItemCollapsibleState.Expanded:O.TreeItemCollapsibleState.Collapsed),t=yield this.repo.getRemotes();return e.contextValue=void 0!==t&&t.length>0?Nt.BranchesWithRemotes:Nt.Branches,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-branch.svg"),light:Is.context.asAbsolutePath("images/light/icon-branch.svg")},e})}}class qt extends Lt{constructor(e,t,i,o){super(t),this.remote=e,this.repo=i,this.explorer=o}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getBranches();return void 0===e?[]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...f.filterMap(e,e=>e.remote&&e.name.startsWith(this.remote.name)?new Vt(e,this.uri,this.explorer):void 0)])})}getTreeItem(){const e=this.remote.types.find(e=>e.type===Ge.Fetch),t=this.remote.types.find(e=>e.type===Ge.Push);let i;i=e&&t?V.ArrowLeftRight:e?V.ArrowLeft:t?V.ArrowRight:V.Dash;const o=`${this.remote.name} ${V.Space}${i}${V.Space} ${void 0!==this.remote.provider?this.remote.provider.name:this.remote.domain} ${V.Space}${V.Dot}${V.Space} ${this.remote.path}`,s=new O.TreeItem(o,O.TreeItemCollapsibleState.Collapsed);return s.contextValue=Nt.Remote,s}}class zt extends Lt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getRemotes();return void 0===e||0===e.length?[new Mt("No remotes configured")]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...f.map(e,e=>new qt(e,this.uri,this.repo,this.explorer))])})}getTreeItem(){const e=new O.TreeItem("Remotes",O.TreeItemCollapsibleState.Collapsed);return e.contextValue=Nt.Remotes,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-remote.svg"),light:Is.context.asAbsolutePath("images/light/icon-remote.svg")},e}}class Yt extends Lt{constructor(e,t,i,o){super(Te.fromFileStatus(t,e,"HEAD")),this.repoPath=e,this.status=t,this.commits=i,this.explorer=o}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){return this.commits.map(e=>new jt(this.status,e,this.explorer,At.CommitLabel|(this.explorer.config.gravatars?At.Gravatar:At.CommitIcon)))})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=new O.TreeItem(this.label,O.TreeItemCollapsibleState.Collapsed);e.contextValue=Nt.StatusFileCommits;const t=tt(this.status.status);return e.iconPath={dark:Is.context.asAbsolutePath(_e.join("images","dark",t)),light:Is.context.asAbsolutePath(_e.join("images","light",t))},1===this.commits.length&&this.commits[0].isUncommitted&&(e.collapsibleState=O.TreeItemCollapsibleState.None,e.contextValue=Nt.StatusFile,e.command=this.getCommand()),this._label=void 0,e})}get folderName(){return void 0===this._folderName&&(this._folderName=_e.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=Tt.fromTemplate(this.explorer.config.statusFileFormat,Object.assign({},this.status,{commit:this.commit}),{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this.commit.isUncommitted}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}getCommand(){return{title:"Compare File with Previous Revision",command:Ut.DiffWithPrevious,arguments:[Te.fromFileStatus(this.status,this.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class Xt extends Lt{constructor(e,t,i){super(Te.fromRepoPath(e.repoPath)),this.status=e,this.range=t,this.explorer=i,this.supportsPaging=!0,this.repoPath=e.repoPath}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){let e=[];const t=this.repoPath;let i;void 0!==this.range&&void 0!==(i=yield Is.git.getLog(t,{maxCount:this.maxCount,ref:this.range}))&&(e=Array.from(f.flatMap(i.commits.values(),e=>e.fileStatuses.map(t=>Object.assign({},t,{commit:e}))))),0!==this.status.files.length&&this.includeWorkingTree&&e.splice(0,0,...f.flatMap(this.status.files,e=>{if(void 0!==e.workTreeStatus&&void 0!==e.indexStatus){const i=new Date;return i.setMilliseconds(i.getMilliseconds()-1),[Object.assign({},e,{status:e.status,commit:new je(Be.File,t,Ot.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,Ot.stagedUncommittedSha,e.fileName)}),Object.assign({},e,{status:e.status,commit:new je(Be.File,t,Ot.stagedUncommittedSha,"You",void 0,i,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]}return void 0!==e.indexStatus?[Object.assign({},e,{status:e.status,commit:new je(Be.File,t,Ot.stagedUncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]:[Object.assign({},e,{status:e.status,commit:new je(Be.File,t,Ot.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]})),e.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());const r=s.groupBy(e,e=>e.fileName);let n=[...f.map(o.values(r),e=>new Yt(t,e[e.length-1],e.map(e=>e.commit),this.explorer))];if(this.explorer.config.files.layout!==P.List){const e=s.makeHierarchical(n,e=>e.uri.getRelativePath().split("/"),(...e)=>y.normalizePath(_e.join(...e)),this.explorer.config.files.compact);n=yield new Gt(t,"",void 0,e,this.explorer).getChildren()}else n.sort((e,t)=>(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label));return void 0!==i&&i.truncated&&n.push(new Ht("Show All Changes",this,this.explorer)),n})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){let e=void 0!==this.status.files&&this.includeWorkingTree?this.status.files.length:0;if(void 0!==this.status.upstream){const t=yield Is.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);void 0!==t&&(e+=t.files)}const t=`${e} file${e>1?"s":""} changed`,i=new O.TreeItem(t,O.TreeItemCollapsibleState.Collapsed);return i.contextValue=Nt.StatusFiles,i.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-diff.svg"),light:Is.context.asAbsolutePath("images/light/icon-diff.svg")},i})}get includeWorkingTree(){return this.explorer.config.includeWorkingTree}}class Zt extends Lt{constructor(e,t,i){super(Te.fromRepoPath(e.repoPath)),this.status=e,this.direction=t,this.explorer=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e="ahead"===this.direction?`${this.status.upstream}..${this.status.branch}`:`${this.status.branch}..${this.status.upstream}`;let t=yield Is.git.getLog(this.uri.repoPath,{maxCount:0,ref:e});if(void 0===t)return[];if("ahead"!==this.direction)return[...f.map(t.commits.values(),e=>new Qt(e,this.explorer))];const i=Array.from(t.commits.values()),o=i[i.length-1];return void 0===o.previousSha&&void 0!==(t=yield Is.git.getLog(this.uri.repoPath,{maxCount:2,ref:o.sha}))&&(i[i.length-1]=f.first(t.commits.values())),[...f.map(i,e=>new Qt(e,this.explorer))]})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e="ahead"===this.direction?`${this.status.state.ahead} commit${this.status.state.ahead>1?"s":""} (ahead of ${this.status.upstream})`:`${this.status.state.behind} commit${this.status.state.behind>1?"s":""} (behind ${this.status.upstream})`,t=new O.TreeItem(e,O.TreeItemCollapsibleState.Collapsed);return t.contextValue=Nt.StatusUpstream,t.iconPath={dark:Is.context.asAbsolutePath(`images/dark/icon-${"ahead"===this.direction?"upload":"download"}.svg`),light:Is.context.asAbsolutePath(`images/light/icon-${"ahead"===this.direction?"upload":"download"}.svg`)},t})}}class Jt extends Lt{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){this.resetChildren();const e=yield this.repo.getStatus();if(void 0===e)return[];if(this.children=[],e.state.behind&&this.children.push(new Zt(e,"behind",this.explorer)),e.state.ahead&&this.children.push(new Zt(e,"ahead",this.explorer)),e.state.ahead||0!==e.files.length&&this.includeWorkingTree){const t=e.upstream?`${e.upstream}..${e.branch}`:void 0;this.children.push(new Xt(e,t,this.explorer))}return this.children})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0);const e=yield this.repo.getStatus();if(void 0===e)return new O.TreeItem("No repo status");this.explorer.autoRefresh&&this.includeWorkingTree&&(this.disposable=O.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),{dispose:()=>this.repo.stopWatchingFileSystem()}),this.repo.startWatchingFileSystem());let t=!1;const i=0!==e.files.length&&this.includeWorkingTree;let o,s="",r="";e.upstream?e.state.ahead||e.state.behind?(s=`${e.branch}${i?" has uncommitted changes and":""} is not up-to-date with ${e.upstream}`,t=!0,e.state.ahead&&e.state.behind?r="-yellow":e.state.ahead?r="-green":e.state.behind&&(r="-red")):s=`${e.branch}${i?" has uncommitted changes and":""} is up-to-date with ${e.upstream}`:s=`${e.branch} ${i?"has uncommitted changes":this.includeWorkingTree?"has no changes":"has nothing to commit"}`,o=t||i?this.active?O.TreeItemCollapsibleState.Expanded:O.TreeItemCollapsibleState.Collapsed:O.TreeItemCollapsibleState.None;const n=new O.TreeItem(s,o);return n.contextValue=Nt.Status,n.iconPath={dark:Is.context.asAbsolutePath(`images/dark/icon-repo${r}.svg`),light:Is.context.asAbsolutePath(`images/light/icon-repo${r}.svg`)},n})}get includeWorkingTree(){return this.explorer.config.includeWorkingTree}onAutoRefreshChanged(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onFileSystemChanged(e){return r.__awaiter(this,void 0,void 0,function*(){this.explorer.refreshNode(this)})}}class ei extends jt{constructor(e,t,i){super(e,t,i,At.File)}get resourceType(){return Nt.StashFile}getCommitTemplate(){return this.explorer.config.stashFormat}getCommitFileTemplate(){return this.explorer.config.stashFileFormat}}class ti extends It{constructor(e,t){super(e.toGitUri()),this.commit=e,this.explorer=t}get ref(){return this.commit.sha}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=this.commit.fileStatuses,t=yield Is.git.getLog(this.commit.repoPath,{maxCount:1,ref:`${this.commit.stashName}^3`});if(void 0!==t){const i=f.first(t.commits.values());void 0!==i&&0!==i.fileStatuses.length&&(i.fileStatuses.forEach(e=>e.status="?"),e.splice(e.length,0,...i.fileStatuses))}const i=e.map(e=>new ei(e,this.commit.toFileCommit(e),this.explorer));return i.sort((e,t)=>e.label.localeCompare(t.label)),i})}getTreeItem(){const e=new O.TreeItem(Rt.fromTemplate(this.explorer.config.stashFormat,this.commit,{truncateMessageAtNewLine:!0,dataFormat:Is.config.defaultDateFormat}),O.TreeItemCollapsibleState.Collapsed);return e.contextValue=Nt.Stash,e}}class ii extends Lt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getStashList();return void 0===e?[new Mt("No stashed changes")]:[...f.map(e.commits.values(),e=>new ti(e,this.explorer))]})}getTreeItem(){const e=new O.TreeItem("Stashes",O.TreeItemCollapsibleState.Collapsed);return e.contextValue=Nt.Stashes,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-stash.svg"),light:Is.context.asAbsolutePath("images/light/icon-stash.svg")},e}}class oi extends It{constructor(e,t,i){super(t),this.tag=e,this.explorer=i,this.supportsPaging=!0}get ref(){return this.tag.name}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield Is.git.getLog(this.uri.repoPath,{maxCount:this.maxCount,ref:this.tag.name});if(void 0===e)return[new Mt("No commits yet")];const t=[...f.map(e.commits.values(),e=>new Qt(e,this.explorer))];return e.truncated&&t.push(new Ht("Show All Commits",this,this.explorer)),t})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=new O.TreeItem(this.tag.name,O.TreeItemCollapsibleState.Collapsed);return e.contextValue=Nt.Tag,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-tag.svg"),light:Is.context.asAbsolutePath("images/light/icon-tag.svg")},e})}}class si extends Lt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getTags();return 0===e.length?[new Mt("No tags yet")]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...e.map(e=>new oi(e,this.uri,this.explorer))])})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=new O.TreeItem("Tags",O.TreeItemCollapsibleState.Collapsed);return e.contextValue=Nt.Tags,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-tag.svg"),light:Is.context.asAbsolutePath("images/light/icon-tag.svg")},e})}}class ri extends Lt{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.updateSubscription(),this.children=[new Jt(this.uri,this.repo,this.explorer,this.active),new Kt(this.uri,this.repo,this.explorer,this.active),new zt(this.uri,this.repo,this.explorer),new ii(this.uri,this.repo,this.explorer),new si(this.uri,this.repo,this.explorer)],this.children})}getTreeItem(){this.updateSubscription();const e=this.active?`Active Repository ${y.pad(V.Dash,1,1)} ${this.repo.formattedName||this.uri.repoPath}`:`${this.repo.formattedName||this.uri.repoPath}`,t=new O.TreeItem(e,this.active?O.TreeItemCollapsibleState.Expanded:O.TreeItemCollapsibleState.Collapsed);return t.contextValue=Nt.Repository,t}updateSubscription(){this.explorer.autoRefresh?this.disposable=this.disposable||O.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChange(this.onRepoChanged,this)):void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onAutoRefreshChanged(){this.updateSubscription()}onRepoChanged(e){if(se.log(`RepositoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),void 0===this.children||e.changed(Qe.Repository)||e.changed(Qe.Config))this.explorer.refreshNode(this);else{if(e.changed(Qe.Stashes)){const e=this.children.find(e=>e instanceof ii);void 0!==e&&this.explorer.refreshNode(e)}if(e.changed(Qe.Remotes)){const e=this.children.find(e=>e instanceof zt);void 0!==e&&this.explorer.refreshNode(e)}if(e.changed(Qe.Tags)){const e=this.children.find(e=>e instanceof si);void 0!==e&&this.explorer.refreshNode(e)}}}}class ni extends Lt{constructor(e){super(void 0),this.explorer=e,Is.context.subscriptions.push(O.window.onDidChangeActiveTextEditor(p.debounce(this.onActiveEditorChanged,500),this)),this.onActiveEditorChanged(O.window.activeTextEditor)}dispose(){super.dispose(),void 0!==this._repositoryNode&&(this._repositoryNode.dispose(),this._repositoryNode=void 0)}onActiveEditorChanged(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!X(e))return;let t=!1;try{const i=yield Is.git.getActiveRepoPath(e);if(void 0===i)return void(void 0!==this._repositoryNode&&(t=!0,this._repositoryNode.dispose(),this._repositoryNode=void 0));if(void 0!==this._repositoryNode&&this._repositoryNode.repo.path===i)return;const o=yield Is.git.getRepository(i);if(void 0===o)return void(void 0!==this._repositoryNode&&(t=!0,this._repositoryNode.dispose(),this._repositoryNode=void 0));t=!0,void 0!==this._repositoryNode&&this._repositoryNode.dispose(),this._repositoryNode=new ri(Te.fromRepoPath(o.path),o,this.explorer,!0)}finally{t&&this.explorer.refreshNode(this)}})}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){return void 0!==this._repositoryNode?this._repositoryNode.getChildren():[]})}getTreeItem(){return void 0!==this._repositoryNode?this._repositoryNode.getTreeItem():new O.TreeItem("No active repository",O.TreeItemCollapsibleState.None)}}class ai extends Lt{constructor(e,t,i=Nt.Results){super(e.toGitUri()),this.commit=e,this.explorer=t,this.contextValue=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield new Qt(this.commit,this.explorer).getChildren();return e.splice(0,0,new Mt(Rt.fromTemplate("${message}",this.commit,{truncateMessageAtNewLine:!1}))),e})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=Rt.fromTemplate(`Commit \${sha} ${y.pad(V.Dash,1,1)} \${authorAgo}`,this.commit,Is.config.defaultDateFormat),t=new O.TreeItem(e,O.TreeItemCollapsibleState.Expanded);return t.contextValue=this.contextValue,t})}}class hi extends Lt{constructor(e,t,i,o,s=Nt.Results){super(Te.fromRepoPath(e)),this.repoPath=e,this.labelFn=t,this.logFn=i,this.explorer=o,this.contextValue=s,this.supportsPaging=!0}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.getLog();if(void 0===e)return[];const t=[...f.map(e.commits.values(),e=>new Qt(e,this.explorer))];return e.truncated&&t.push(new Ht("Show All Results",this,this.explorer)),t})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.getLog(),t=new O.TreeItem(yield this.getLabel(),e&&e.count>0?O.TreeItemCollapsibleState.Expanded:O.TreeItemCollapsibleState.None);return t.contextValue=this.contextValue,t})}refresh(){this._cache=void 0}ensureCache(){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===this._cache){const e=yield this.logFn(this.maxCount);this._cache={label:yield this.labelFn(e),log:e}}return this._cache})}getLabel(){return r.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).label})}getLog(){return r.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).log})}}class ci extends Lt{constructor(e,t,i,o,s){super(Te.fromFileStatus(t,e)),this.repoPath=e,this.status=t,this.ref1=i,this.ref2=o,this.explorer=s}getChildren(){return[]}getTreeItem(){const e=new O.TreeItem(this.label,O.TreeItemCollapsibleState.None);e.contextValue=Nt.StatusFile;const t=tt(this.status.status);return e.iconPath={dark:Is.context.asAbsolutePath(_e.join("images","dark",t)),light:Is.context.asAbsolutePath(_e.join("images","light",t))},e.command=this.getCommand(),e}get folderName(){return void 0===this._folderName&&(this._folderName=_e.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=Tt.fromTemplate(this.explorer.config.statusFileFormat,this.status,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get priority(){return!1}getCommand(){return{title:"Open Changes",command:Ut.DiffWith,arguments:[this.uri,{lhs:{sha:this.ref1,uri:this.uri},rhs:{sha:this.ref2,uri:"R"===this.status.status?Te.fromFileStatus(this.status,this.uri.repoPath,this.ref2,!0):this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class li extends Lt{constructor(e,t,i,o,s,r){super(Te.fromRepoPath(e)),this.repoPath=e,this.ref1=t,this.ref2=i,this.labelFn=o,this.diffFn=s,this.explorer=r,this.supportsPaging=!0}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.getDiff();if(void 0===e)return[];let t=[...f.map(e,e=>new ci(this.repoPath,e,this.ref1,this.ref2,this.explorer))];if(this.explorer.config.files.layout!==P.List){const e=s.makeHierarchical(t,e=>e.uri.getRelativePath().split("/"),(...e)=>y.normalizePath(_e.join(...e)),this.explorer.config.files.compact);t=yield new Gt(this.repoPath,"",void 0,e,this.explorer).getChildren()}else t.sort((e,t)=>(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label));return t})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this.getDiff(),t=new O.TreeItem(yield this.getLabel(),e&&e.length>0?O.TreeItemCollapsibleState.Expanded:O.TreeItemCollapsibleState.None);return t.contextValue=Nt.Results,t})}refresh(){this._cache=void 0}ensureCache(){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===this._cache){const e=yield this.diffFn();this._cache={label:this.labelFn(e),diff:e}}return this._cache})}getLabel(){return r.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).label})}getDiff(){return r.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).diff})}}class di extends Lt{constructor(e,t,i,o){super(Te.fromRepoPath(e)),this.ref1=t,this.ref2=i,this.explorer=o}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){this.resetChildren();return this.children=[new hi(this.uri.repoPath,e=>r.__awaiter(this,void 0,void 0,function*(){const t=void 0!==e?e.count:0,i=void 0!==e&&e.truncated;return 1===t?"1 commit":`${0===t?"No":`${t}${i?"+":""}`} commits`}),e=>Is.git.getLog(this.uri.repoPath,{maxCount:e,ref:`${this.ref1}...${this.ref2||"HEAD"}`}),this.explorer),new li(this.uri.repoPath,this.ref1,this.ref2,e=>{const t=void 0!==e?e.length:0;return 1===t?"1 file changed":`${0===t?"No":t} files changed`},()=>Is.git.getDiffStatus(this.uri.repoPath,this.ref1,this.ref2),this.explorer)],this.children})}getTreeItem(){return r.__awaiter(this,void 0,void 0,function*(){let e="";if((yield Is.git.getRepositoryCount())>1){const t=yield Is.git.getRepository(this.uri.repoPath);e=` ${y.pad(V.Dash,1,1)} ${t&&t.formattedName||this.uri.repoPath}`}const t=new O.TreeItem(`Comparing ${Ot.shortenSha(this.ref1)} to ${""!==this.ref2?Ot.shortenSha(this.ref2):"Working Tree"}${e}`,O.TreeItemCollapsibleState.Expanded);return t.contextValue=Nt.ComparisonResults,t})}}class ui extends Lt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){this.updateSubscription();const e=[],t=At.CommitLabel|(this.explorer.config.gravatars?At.Gravatar:At.StatusIcon),i=yield Is.git.getStatusForFile(this.uri.repoPath,this.uri.fsPath);if(void 0!==i&&(void 0!==i.indexStatus||void 0!==i.workTreeStatus)){let o,s;void 0!==i.workTreeStatus?(o=Ot.uncommittedSha,void 0!==i.indexStatus?s=Ot.stagedUncommittedSha:"?"!==i.workTreeStatus&&(s="HEAD")):(o=Ot.stagedUncommittedSha,s="HEAD");const r=new je(Be.File,this.uri.repoPath,o,"You",void 0,new Date,"",i.fileName,[i],i.status,i.originalFileName,s,i.originalFileName||i.fileName);e.push(new jt(i,r,this.explorer,t))}const o=yield Is.git.getLogForFile(this.uri.repoPath,this.uri.fsPath,{ref:this.uri.sha});return void 0!==o&&e.push(...f.map(o.commits.values(),e=>new jt(e.fileStatuses[0],e,this.explorer,t))),0===e.length?[new Mt("No file history")]:e})}getTreeItem(){this.updateSubscription();const e=new O.TreeItem(`${this.uri.getFormattedPath()}`,O.TreeItemCollapsibleState.Expanded);return e.contextValue=Nt.FileHistory,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-history.svg"),light:Is.context.asAbsolutePath("images/light/icon-history.svg")},e}updateSubscription(){this.explorer.autoRefresh?this.disposable=this.disposable||O.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChange(this.onRepoChanged,this)):void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onAutoRefreshChanged(){this.updateSubscription()}onRepoChanged(e){e.changed(Qe.Repository)&&(se.log(`RepositoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),this.explorer.refreshNode(this))}}class mi extends Lt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=[new ui(this.uri,this.repo,this.explorer)],this.children})}getTreeItem(){const e=new O.TreeItem(`${this.uri.getFormattedPath()}`,O.TreeItemCollapsibleState.Expanded);return e.contextValue=Nt.History,e.iconPath={dark:Is.context.asAbsolutePath("images/dark/icon-history.svg"),light:Is.context.asAbsolutePath("images/light/icon-history.svg")},e}}class gi extends Lt{constructor(e,t){super(void 0),this.repositories=e,this.explorer=t}getChildren(){return r.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=this.repositories.sort((e,t)=>e.index-t.index).map(e=>new ri(Te.fromRepoPath(e.path),e,this.explorer)),this.children.length>1&&this.children.splice(0,0,new ni(this.explorer)),this.children})}getTreeItem(){const e=new O.TreeItem("Repositories",O.TreeItemCollapsibleState.Expanded);return e.contextValue=Nt.Repositories,e}}function pi(e,t){return e instanceof O.Uri?e:void 0!==t&&void 0!==t.document?t.document.uri:void 0}function fi(e){return"view"===e.type&&e.node.branch&&e.node.branch instanceof Oe}function vi(e){return"view"===e.type&&e.node.commit&&e.node.commit instanceof Ae}function wi(e){return"view"===e.type&&e.node.remote&&e.node.remote instanceof Ke}function Ci(e){return void 0!==e&&(void 0!==e.id&&(void 0!==e.handle||void 0!==e.label||void 0!==e.resourceStates))}function bi(e){return void 0!==e&&void 0!==e.resourceUri}!function(e){e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.DiffDirectory="gitlens.diffDirectory",e.ExternalDiffAll="gitlens.externalDiffAll",e.DiffWith="gitlens.diffWith",e.DiffWithBranch="gitlens.diffWithBranch",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.ExternalDiff="gitlens.externalDiff",e.ExplorersOpenDirectoryDiff="gitlens.explorers.openDirectoryDiff",e.ExplorersOpenDirectoryDiffWithWorking="gitlens.explorers.openDirectoryDiffWithWorking",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenBranchesInRemote="gitlens.openBranchesInRemote",e.OpenBranchInRemote="gitlens.openBranchInRemote",e.OpenCommitInRemote="gitlens.openCommitInRemote",e.OpenFileInRemote="gitlens.openFileInRemote",e.OpenFileRevision="gitlens.openFileRevision",e.OpenInRemote="gitlens.openInRemote",e.OpenRepoInRemote="gitlens.openRepoInRemote",e.OpenWorkingFile="gitlens.openWorkingFile",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ShowCommitSearch="gitlens.showCommitSearch",e.ShowFileBlame="gitlens.showFileBlame",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowLineBlame="gitlens.showLineBlame",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickStashList="gitlens.showQuickStashList",e.StashApply="gitlens.stashApply",e.StashDelete="gitlens.stashDelete",e.StashSave="gitlens.stashSave",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e.ToggleFileRecentChanges="gitlens.toggleFileRecentChanges",e.ToggleLineBlame="gitlens.toggleLineBlame"}(Ut||(Ut={}));class yi extends O.Disposable{constructor(e){if(super(()=>this.dispose()),this.contextParsingOptions={editor:!1,uri:!1},"string"==typeof e)return void(this._disposable=O.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));const t=e.map(e=>O.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));this._disposable=O.Disposable.from(...t)}static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}dispose(){this._disposable&&this._disposable.dispose()}preExecute(e,...t){return r.__awaiter(this,void 0,void 0,function*(){return this.execute(...t)})}_execute(e,...t){const[i,o]=yi.parseContext(e,this.contextParsingOptions,...t);return this.preExecute(i,...o)}static parseContext(e,t,...i){let o=void 0,s=i[0];if(t.editor&&(void 0===s||function(e){return void 0!==e&&void 0!==e.id&&(void 0!==e.edit||void 0!==e.document)}(s))&&(o=s,s=(i=i.slice(1))[0]),t.uri&&(void 0===s||s instanceof O.Uri)){const[t,...s]=i;return[{command:e,type:"uri",editor:o,uri:t},s]}if(s instanceof Lt){const[t,...o]=i;return[{command:e,type:"view",node:t,uri:t.uri},o]}if(bi(s)){const t=[];let o=0;for(const e of i){if(!bi(e))break;o++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(o)]}if(Ci(s)){const t=[];let o=0;for(const e of i){if(!Ci(e))break;o++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(o)]}return[{command:e,type:"unknown",editor:o},i]}}class _i extends yi{constructor(e){super(e),this.contextParsingOptions={editor:!0,uri:!0}}preExecute(e,...t){return r.__awaiter(this,void 0,void 0,function*(){return this.execute(e.editor,e.uri,...t)})}_execute(e,...t){return super._execute(e,O.window.activeTextEditor,...t)}}let xi=void 0;class Si extends _i{constructor(e){super(e)}_execute(e,...t){return xi={command:e,args:t},super._execute(e,...t)}}class $i extends O.Disposable{constructor(e){super(()=>this.dispose()),Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(O.commands.registerTextEditorCommand(i,(e,t,...o)=>this.executeCore(i,e,t,...o),this));this._disposable=O.Disposable.from(...t)}dispose(){this._disposable&&this._disposable.dispose()}executeCore(e,t,i,...o){return this.execute(t,i,...o)}}function Di(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){const{rethrow:i}=t,o=r.__rest(t,["rethrow"]);try{e instanceof Te&&(e=e.fileUri({noSha:!0}));const t=yield O.workspace.openTextDocument(e);return O.window.showTextDocument(t,Object.assign({preserveFocus:!1,preview:!0,viewColumn:O.window.activeTextEditor&&O.window.activeTextEditor.viewColumn||1},o))}catch(e){if(i)throw e;return void se.error(e,"openEditor")}})}class ki extends $i{constructor(){super(Ut.ClearFileAnnotations)}execute(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)try{return Is.annotations.clear(e)}catch(e){return se.error(e,"ClearFileAnnotationsCommand"),O.window.showErrorMessage("Unable to clear file annotations. See output channel for more details")}})}}class Pi extends O.Disposable{constructor(){super(()=>this.dispose());const e=p.debounce(e=>this._resolver&&this._resolver(e),50);this._disposable=O.window.onDidChangeActiveTextEditor(e)}dispose(){this._disposable&&this._disposable.dispose()}awaitClose(e=500){return r.__awaiter(this,void 0,void 0,function*(){return this.close(),this.wait(e)})}awaitNext(e=500){return r.__awaiter(this,void 0,void 0,function*(){return this.next(),this.wait(e)})}close(){return r.__awaiter(this,void 0,void 0,function*(){return O.commands.executeCommand(j.CloseActiveEditor)})}next(){return r.__awaiter(this,void 0,void 0,function*(){return O.commands.executeCommand(j.NextEditor)})}wait(e=500){return r.__awaiter(this,void 0,void 0,function*(){const t=yield new Promise((t,i)=>{let o;this._resolver=(e=>{o&&(clearTimeout(o),o=0,t(e))}),o=setTimeout(()=>{t(O.window.activeTextEditor),o=0},e)});return this._resolver=void 0,t})}}var Fi;!function(e){e.CommitHasNoPreviousCommitWarning="suppressCommitHasNoPreviousCommitWarning",e.CommitNotFoundWarning="suppressCommitNotFoundWarning",e.FileNotUnderSourceControlWarning="suppressFileNotUnderSourceControlWarning",e.GitVersionWarning="suppressGitVersionWarning",e.LineUncommittedWarning="suppressLineUncommittedWarning",e.NoRepositoryWarning="suppressNoRepositoryWarning",e.ResultsExplorerNotice="suppressResultsExplorerNotice",e.UpdateNotice="suppressUpdateNotice",e.WelcomeNotice="suppressWelcomeNotice"}(Fi||(Fi={}));class Ri{static showCommitHasNoPreviousCommitWarningMessage(e){return void 0===e?Ri.showMessage("info","Commit has no previous commit",Fi.CommitHasNoPreviousCommitWarning):Ri.showMessage("info",`Commit ${e.shortSha} (${e.author}, ${e.formattedDate}) has no previous commit`,Fi.CommitHasNoPreviousCommitWarning)}static showCommitNotFoundWarningMessage(e){return Ri.showMessage("warn",`${e}. The commit could not be found`,Fi.CommitNotFoundWarning)}static showFileNotUnderSourceControlWarningMessage(e){return Ri.showMessage("warn",`${e}. The file is probably not under source control`,Fi.FileNotUnderSourceControlWarning)}static showLineUncommittedWarningMessage(e){return Ri.showMessage("warn",`${e}. The line has uncommitted changes`,Fi.LineUncommittedWarning)}static showNoRepositoryWarningMessage(e){return Ri.showMessage("warn",`${e}. No repository could be found`,Fi.NoRepositoryWarning)}static showResultExplorerInfoMessage(){return Ri.showMessage("info",'If you can\'t find your results, click on "GITLENS RESULTS" at the bottom of the Explorer view',Fi.ResultsExplorerNotice,null)}static showUnsupportedGitVersionErrorMessage(e){return Ri.showMessage("error",`GitLens requires a newer version of Git (>= 2.2.0) than is currently installed (${e}). Please install a more recent version of Git`,Fi.GitVersionWarning)}static showUpdateMessage(e){return r.__awaiter(this,void 0,void 0,function*(){const t=yield Ri.showMessage("info",`GitLens has been updated to v${e}`,Fi.UpdateNotice,void 0,"View Release Notes");return"View Release Notes"===t&&O.commands.executeCommand(j.Open,O.Uri.parse("https://marketplace.visualstudio.com/items/eamodio.gitlens/changelog")),t})}static showWelcomeMessage(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield Ri.showMessage("info","Thank you for choosing GitLens! GitLens is powerful, feature rich, and highly configurable, so please be sure to view the docs and tailor it to suit your needs",Fi.WelcomeNotice,null,"View Docs");return"View Docs"===e&&O.commands.executeCommand(j.Open,O.Uri.parse("https://marketplace.visualstudio.com/items/eamodio.gitlens")),e})}static showMessage(e,t,i,o="Don't Show Again",...s){return r.__awaiter(this,void 0,void 0,function*(){if(se.log(`ShowMessage(${e}, '${t}', ${i}, ${o})`),Hs.get(Hs.name("advanced")("messages")(i).value))return void se.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) skipped`);null!==o&&s.push(o);let r=void 0;switch(e){case"info":r=yield O.window.showInformationMessage(t,...s);break;case"warn":r=yield O.window.showWarningMessage(t,...s);break;case"error":r=yield O.window.showErrorMessage(t,...s)}if(null===o||r===o){se.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) don't show again requested`);const s=Hs.name("advanced")("messages").value,n=Hs.get(s);if(n[i]=!0,yield Hs.update(s,n,O.ConfigurationTarget.Global),r===o)return}return se.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) returned ${r}`),r})}}class Ti extends _i{constructor(){super(Ut.CloseUnchangedFiles)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=yield Is.git.getRepoPath(t);if(!e)return Ri.showNoRepositoryWarningMessage("Unable to close unchanged files");const o=yield Is.git.getStatusForRepo(e);if(void 0===o)return O.window.showWarningMessage("Unable to close unchanged files");i.uris=o.files.map(e=>e.uri)}if(0===i.uris.length)return O.commands.executeCommand(j.CloseAllEditors);const e=new Pi;let o=0,s=void 0,r=O.window.activeTextEditor;for(;;){if(void 0!==r){if(ee.equals(s,r,{useId:!0,usePosition:!0}))break;if(void 0!==r.document&&(r.document.isDirty||i.uris.some(e=>te.equals(e,r.document&&r.document.uri)))){const t=s;if(s=r,r=yield e.awaitNext(500),ee.equals(t,r,{useId:!0,usePosition:!0}))break;continue}}if(s=r,r=yield e.awaitClose(500),void 0===s&&void 0===r){if(++o>=4)break}else o=0}return void e.dispose()}catch(e){return se.error(e,"CloseUnchangedFilesCommand"),O.window.showErrorMessage("Unable to close unchanged files. See output channel for more details")}})}}var Ei=i(4);class Bi extends _i{constructor(){super(Ut.CopyMessageToClipboard)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return vi(e)?((t=Object.assign({},t)).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);try{if(i=Object.assign({},i),void 0===t){const t=yield Is.git.getActiveRepoPath(e);if(!t)return;const o=yield Is.git.getLog(t,{maxCount:1});if(!o)return;return i.message=f.first(o.commits.values()).message,void Object(Ei.copy)(i.message)}const o=yield Te.fromUri(t);if(void 0===i.message){if(void 0===i.sha){const t=e&&e.selection.active.line||0;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?yield Is.git.getBlameForLineContents(o,t,e.document.getText()):yield Is.git.getBlameForLine(o,t);if(!s)return;if(s.commit.isUncommitted)return;i.sha=s.commit.sha,o.repoPath||(o.repoPath=s.commit.repoPath)}catch(e){return se.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),O.window.showErrorMessage("Unable to copy message. See output channel for more details")}}const t=yield Is.git.getLogCommit(o.repoPath,i.sha);if(void 0===t)return;i.message=t.message}return void Object(Ei.copy)(i.message)}catch(e){return se.error(e,"CopyMessageToClipboardCommand"),O.window.showErrorMessage("Unable to copy message. See output channel for more details")}})}}class Ni extends _i{constructor(){super(Ut.CopyShaToClipboard)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return vi(e)?((t=Object.assign({},t)).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);try{if(i=Object.assign({},i),void 0===t){const t=yield Is.git.getActiveRepoPath(e);if(!t)return;const o=yield Is.git.getLog(t,{maxCount:1});if(!o)return;return i.sha=f.first(o.commits.values()).sha,void Object(Ei.copy)(i.sha)}const o=yield Te.fromUri(t);if(void 0===i.sha){const t=e&&e.selection.active.line||0;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?yield Is.git.getBlameForLineContents(o,t,e.document.getText()):yield Is.git.getBlameForLine(o,t);if(void 0===s)return;i.sha=s.commit.sha}catch(e){return se.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${t})`),O.window.showErrorMessage("Unable to copy commit id. See output channel for more details")}}return void Object(Ei.copy)(i.sha)}catch(e){return se.error(e,"CopyShaToClipboardCommand"),O.window.showErrorMessage("Unable to copy commit id. See output channel for more details")}})}}const Ai=Object.create(null),Ui=["left","right",",",".","escape"],Oi=[];class Li extends O.Disposable{constructor(e){for(const t in super(()=>this.dispose()),this.mapping=e,e)e[t]=e[t]||Ai}dispose(){return r.__awaiter(this,void 0,void 0,function*(){const e=Oi.indexOf(this.mapping);se.log("KeyboardScope.dispose",Oi.length,e),e===Oi.length-1?(Oi.pop(),yield this.updateKeyCommandsContext(Oi[Oi.length-1])):Oi.splice(e,1)})}begin(){return r.__awaiter(this,void 0,void 0,function*(){return Oi.push(this.mapping),yield this.updateKeyCommandsContext(this.mapping),this})}clearKeyCommand(e){return r.__awaiter(this,void 0,void 0,function*(){const t=Oi[Oi.length-1];t===this.mapping&&t[e]&&(se.log("KeyboardScope.clearKeyCommand",Oi.length,e),t[e]=void 0,yield z(`${G.Key}:${e}`,!1))})}setKeyCommand(e,t){return r.__awaiter(this,void 0,void 0,function*(){const i=Oi[Oi.length-1];i===this.mapping&&(se.log("KeyboardScope.setKeyCommand",Oi.length,e,!!i[e]),i[e]?i[e]=t:(i[e]=t,yield z(`${G.Key}:${e}`,!0)))})}updateKeyCommandsContext(e){return r.__awaiter(this,void 0,void 0,function*(){const t=[];for(const i of Ui)t.push(z(`${G.Key}:${i}`,!(!e||!e[i])));yield Promise.all(t)})}}class Ii extends O.Disposable{constructor(){super(()=>this.dispose());const e=Ui.map(e=>O.commands.registerCommand(`${L}.key.${e}`,()=>this.execute(e),this));this._disposable=O.Disposable.from(...e)}dispose(){this._disposable&&this._disposable.dispose()}beginScope(e){return r.__awaiter(this,void 0,void 0,function*(){return se.log("Keyboard.beginScope",Oi.length),yield new Li(e?Object.assign(Object.create(null),e):Object.create(null)).begin()})}execute(e){return r.__awaiter(this,void 0,void 0,function*(){if(Oi.length)try{let t=Oi[Oi.length-1][e];if("function"==typeof t&&(t=yield t()),!t||"function"!=typeof t.onDidPressKey)return;return se.log("Keyboard.execute",e),yield t.onDidPressKey(e)}catch(e){return void se.error(e,"Keyboard.execute")}})}}class Mi{constructor(e){this.branchOrTag=e,e instanceof Oe?(this.label=`${e.current?`$(check)${V.Space}`:V.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${V.Space.repeat(2)} remote branch`:""):(this.label=`${V.Space.repeat(4)} ${e.name}`,this.description=`${V.Space.repeat(2)} tag`)}get name(){return this.branchOrTag.name}get remote(){return this.branchOrTag instanceof Oe&&this.branchOrTag.remote}}class Wi{static showProgress(e){return ji(e,{left:Ai,",":Ai,".":Ai})}static show(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){const s=[...e.filter(e=>!e.remote).map(e=>new Mi(e)),...t.map(e=>new Mi(e)),...e.filter(e=>e.remote).map(e=>new Mi(e))];if(void 0!==o.goBackCommand&&s.splice(0,0,o.goBackCommand),void 0!==o.progressCancellation&&o.progressCancellation.token.isCancellationRequested)return;const r=yield Is.keyboard.beginScope({left:o.goBackCommand||Ai});o.progressCancellation&&o.progressCancellation.cancel();const n=yield O.window.showQuickPick(s,{placeHolder:i,ignoreFocusOut:Hi()});return yield r.dispose(),n})}}function Hi(){return!Hs.get(Hs.name("advanced")("quickPick")("closeOnFocusOut").value)}function ji(e,t){const i=new O.CancellationTokenSource;return function(e,t,i){r.__awaiter(this,void 0,void 0,function*(){const o=i&&(yield Is.keyboard.beginScope(i));try{yield O.window.showQuickPick(function(e){return new Promise((t,i)=>{const o=e.token.onCancellationRequested(()=>{o.dispose(),t([])})})}(t),{placeHolder:e,ignoreFocusOut:Hi()},t.token)}catch(e){}finally{t.cancel(),o&&o.dispose()}})}(e,i,t),i}class Gi{constructor(e,t,i){void 0===t?(this.command=void 0,this.args=i):"string"==typeof t?(this.command=t,this.args=i):(this.command=t[0],this.args=t.slice(1)),Object.assign(this,e)}execute(){return void 0===this.command?Promise.resolve(void 0):O.commands.executeCommand(this.command,...this.args||[])}onDidPressKey(e){return this.execute()}}class Qi extends Gi{constructor(e){super({label:e,description:""})}}class Vi extends Gi{constructor(e,t){super({label:"",description:""},e,t)}}class Ki extends Gi{constructor(e,t){super(t,void 0,void 0),this.uri=e}execute(e){return r.__awaiter(this,void 0,void 0,function*(){return Di(this.uri,e)})}onDidPressKey(e){return this.execute({preserveFocus:!0,preview:!1})}}class qi extends Gi{constructor(e,t){super(t,void 0,void 0),this.uris=e}execute(e={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){for(const t of this.uris)yield Di(t,e)})}onDidPressKey(e){return r.__awaiter(this,void 0,void 0,function*(){return this.execute({preserveFocus:!0,preview:!1})})}}class zi{constructor(e){this.commit=e;let t=e.message;const i=t.indexOf("\n");-1!==i&&(t=`${t.substring(0,i)}${V.Space}$(ellipsis)`),e.isStash?(this.label=t,this.description="",this.detail=`${V.Space} ${e.stashName||e.shortSha} ${y.pad(V.Dot,1,1)} ${e.formattedDate} ${y.pad(V.Dot,1,1)} ${e.getDiffStatus()}`):(this.label=t,this.description=`${y.pad("$(git-commit)",1,1)} ${e.shortSha}`,this.detail=`${V.Space} ${e.author}, ${e.formattedDate}${e.isFile?"":` ${y.pad(V.Dot,1,1)} ${e.getDiffStatus()}`}`)}}class Yi extends Gi{constructor(e,t={label:"Show in Results",description:`${y.pad(V.Dash,2,2)} displays commit in the GitLens Results view`}){super(t,void 0,void 0),this.commit=e}execute(e={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){Is.resultsExplorer.showCommitInResults(this.commit)})}}class Xi extends Gi{constructor(e,t,i={label:"Show in Results",description:`${y.pad(V.Dash,2,2)} displays commits in the GitLens Results view`}){super(i,void 0,void 0),this.results=e,this.resultsLabel=t}execute(e={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){Is.resultsExplorer.showCommitsInResults(this.results,this.resultsLabel)})}}class Zi extends Xi{constructor(e,t,i={label:"Show in Results",description:`${y.pad(V.Dash,2,2)} displays results in the GitLens Results view`}){super(e,{label:t},i),this.results=e,this.search=t}}class Ji extends Gi{constructor(e,t,i,o={label:"Show Branches and Tags",description:`${y.pad(V.Dash,2,2)} displays branches and tags`}){super(o,void 0,void 0),this.repoPath=e,this.placeHolder=t,this.goBackCommand=i}execute(e={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){const e=Wi.showProgress(this.placeHolder);try{const[t,i]=yield Promise.all([Is.git.getBranches(this.repoPath),Is.git.getTags(this.repoPath)]);if(e.token.isCancellationRequested)return;return Wi.show(t,i,this.placeHolder,{progressCancellation:e,goBackCommand:this.goBackCommand})}finally{e.dispose()}})}}class eo{constructor(e){this.branch=e,this.label=`${e.current?`$(check)${V.Space}`:V.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${V.Space.repeat(2)} remote branch`:""}}class to{static show(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=e.map(e=>new eo(e));return void 0!==i.goBackCommand&&o.splice(0,0,i.goBackCommand),yield O.window.showQuickPick(o,{placeHolder:t,ignoreFocusOut:Hi()})})}}class io extends Gi{constructor(e,t){super({label:`$(link-external) Open ${de(t)} in ${e.provider.name}`,description:`${y.pad(V.Dash,2,3)} $(repo) ${e.provider.path}`},void 0,void 0),this.remote=e,this.resource=t}execute(){return r.__awaiter(this,void 0,void 0,function*(){return this.remote.provider.open(this.resource)})}}class oo extends Gi{constructor(e,t,i){const o=de(t);let s="";switch(t.type){case le.Branch:s=`$(git-branch) ${t.branch}`;break;case le.Branches:s="$(git-branch) Branches";break;case le.Commit:s=`$(git-commit) ${Ot.shortenSha(t.sha)}`;break;case le.File:s=`$(file-text) ${_e.basename(t.fileName)}`;break;case le.Repo:s="$(repo) Repository";break;case le.Revision:if(void 0!==t.commit&&t.commit instanceof je)"D"===t.commit.status?(t.sha=t.commit.previousSha,s=`$(file-text) ${_e.basename(t.fileName)} in ${V.Space}$(git-commit) ${t.commit.previousShortSha} (deleted in ${V.Space}$(git-commit) ${t.commit.shortSha})`):(t.sha=t.commit.sha,s=`$(file-text) ${_e.basename(t.fileName)} in ${V.Space}$(git-commit) ${t.commit.shortSha}`);else{const e=void 0===t.sha?"":Ot.shortenSha(t.sha);s=`$(file-text) ${_e.basename(t.fileName)}${e?` in ${V.Space}$(git-commit) ${e}`:""}`}}const r=e[0];1!==e.length?super({label:`$(link-external) Open ${o} in ${e.every(e=>void 0!==e.provider&&e.provider.name===r.provider.name)?r.provider.name:"Remote"}${V.Ellipsis}`,description:`${y.pad(V.Dash,2,3)} ${s}`},Ut.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}]):super({label:`$(link-external) Open ${o} in ${r.provider.name}`,description:`${y.pad(V.Dash,2,3)} $(repo) ${r.provider.path} ${y.pad(V.Dot,1,1)} ${s}`},Ut.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}])}}class so{static show(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){const s=e.map(e=>new io(e,i));o&&s.splice(0,0,o);const r=yield O.window.showQuickPick(s,{placeHolder:t,ignoreFocusOut:Hi()});if(void 0!==r)return r})}}class ro extends Ki{constructor(e,t){const i=Je(t.status),o=Xe.getFormattedDirectory(t,!0);super(Te.toRevisionUri(e.sha,t,e.repoPath),{label:`${y.pad(i,4,2)} ${_e.basename(t.fileName)}`,description:o}),this.commit=e.toFileCommit(t),this.status=t.status}get sha(){return this.commit.sha}onDidPressKey(e){return void 0===this.commit.previousSha?super.onDidPressKey(e):O.commands.executeCommand(Ut.DiffWithPrevious,this.commit.toGitUri(),{commit:this.commit,showOptions:{preserveFocus:!0,preview:!1}})}}class no extends qi{constructor(e,t=!1,i){const o=e.repoPath;super(s.filterMap(e.fileStatuses,e=>Te.fromFileStatus(e,o)),i||{label:"$(file-symlink-file) Open Files",description:""})}}class ao extends qi{constructor(e,t){super(s.filterMap(e.fileStatuses,t=>Te.toRevisionUri("D"===t.status?e.previousFileSha:e.sha,t,e.repoPath)),t||{label:"$(file-symlink-file) Open Revisions",description:`${y.pad(V.Dash,2,3)} in ${V.Space}$(git-commit) ${e.shortSha}`})}}class ho{static show(e,t,i,o,s){return r.__awaiter(this,void 0,void 0,function*(){yield e.resolvePreviousFileSha();const n=e.fileStatuses.map(t=>new ro(e,t)),a=e.isStash;let h=0;if(a)n.splice(h++,0,new Gi({label:"$(git-pull-request) Apply Stashed Changes",description:`${y.pad(V.Dash,2,3)} ${e.message}`},Ut.StashApply,[{confirm:!0,deleteAfter:!1,stashItem:e,goBackCommand:o}])),n.splice(h++,0,new Gi({label:"$(x) Delete Stashed Changes",description:`${y.pad(V.Dash,2,3)} ${e.message}`},Ut.StashDelete,[{confirm:!0,stashItem:e,goBackCommand:o}])),n.splice(h++,0,new Yi(e));else{n.splice(h++,0,new Yi(e));const t=(yield Is.git.getRemotes(e.repoPath)).filter(e=>void 0!==e.provider);t.length&&n.splice(h++,0,new oo(t,{type:"commit",sha:e.sha},o))}n.splice(h++,0,new no(e)),n.splice(h++,0,new ao(e)),n.splice(h++,0,new Gi({label:"$(git-compare) Open Directory Compare with Previous Revision",description:`${y.pad(V.Dash,2,3)} $(git-commit) ${e.previousFileShortSha} ${V.Space} $(git-compare) ${V.Space} $(git-commit) ${e.shortSha}`},Ut.DiffDirectory,[e.uri,{ref1:e.previousFileSha,ref2:e.sha}])),n.splice(h++,0,new Gi({label:"$(git-compare) Open Directory Compare with Working Tree",description:`${y.pad(V.Dash,2,3)} $(git-commit) ${e.shortSha} ${V.Space} $(git-compare) ${V.Space} $(file-directory) Working Tree`},Ut.DiffDirectory,[t,{ref1:e.sha}])),a||n.splice(h++,0,new Gi({label:"$(clippy) Copy Commit ID to Clipboard",description:`${y.pad(V.Dash,2,3)} ${e.shortSha}`},Ut.CopyShaToClipboard,[t,{sha:e.sha}])),n.splice(h++,0,new Gi({label:"$(clippy) Copy Commit Message to Clipboard",description:`${y.pad(V.Dash,2,3)} ${e.message}`},Ut.CopyMessageToClipboard,[t,{message:e.message,sha:e.sha}])),n.splice(h++,0,new Gi({label:"Changed Files",description:e.getDiffStatus()},Ut.ShowQuickCommitDetails,[t,{commit:e,repoLog:s,sha:e.sha,goBackCommand:i}])),i&&n.splice(0,0,i);let c=void 0,l=void 0;a||(void 0===s||s.truncated||void 0!==s.sha?(c=(()=>r.__awaiter(this,void 0,void 0,function*(){let t=s,o=t&&t.commits.get(e.sha);return void 0!==o&&void 0!==o.previousSha||(o=(t=yield Is.git.getLog(e.repoPath,{maxCount:Is.config.advanced.maxListItems,ref:e.sha}))&&t.commits.get(e.sha))&&(o.nextSha=e.nextSha),void 0===o||void 0===o.previousSha?Ai:new Vi(Ut.ShowQuickCommitDetails,[o.previousUri,{repoLog:t,sha:o.previousSha,goBackCommand:i}])})),l=(()=>r.__awaiter(this,void 0,void 0,function*(){let t=s,o=t&&t.commits.get(e.sha);if(void 0===o||void 0===o.nextSha){t=void 0,o=void 0;const i=yield Is.git.getLog(e.repoPath,{maxCount:1,reverse:!0,ref:e.sha}),s=i&&f.first(i.commits.values());void 0!==s&&s.sha!==e.sha&&((o=e).nextSha=s.sha)}return void 0===o||void 0===o.nextSha?Ai:new Vi(Ut.ShowQuickCommitDetails,[o.nextUri,{repoLog:t,sha:o.nextSha,goBackCommand:i}])}))):(c=void 0===e.previousSha?void 0:new Vi(Ut.ShowQuickCommitDetails,[e.previousUri,{repoLog:s,sha:e.previousSha,goBackCommand:i}]),l=void 0===e.nextSha?void 0:new Vi(Ut.ShowQuickCommitDetails,[e.nextUri,{repoLog:s,sha:e.nextSha,goBackCommand:i}])));const d=yield Is.keyboard.beginScope({left:i,",":c,".":l}),u=yield O.window.showQuickPick(n,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${e.shortSha} ${y.pad(V.Dot,1,1)} ${e.author?`${e.author}, `:""}${e.formattedDate} ${y.pad(V.Dot,1,1)} ${e.message}`,ignoreFocusOut:Hi(),onDidSelectItem:e=>{d.setKeyCommand("right",e),"function"==typeof e.onDidSelect&&e.onDidSelect()}});return yield d.dispose(),u})}}class co extends Gi{constructor(e,t){super(t||{label:"$(git-pull-request) Apply Changes",description:`${y.pad(V.Dash,2,3)} $(file-text) ${_e.basename(e.fileName)} in ${V.Space}$(git-commit) ${e.shortSha}`},void 0,void 0),this.commit=e}execute(){return r.__awaiter(this,void 0,void 0,function*(){const e=this.commit.toGitUri();return yield Is.git.checkoutFile(e),Di(e,{preserveFocus:!0,preview:!1})})}}class lo extends Ki{constructor(e,t){super(O.Uri.file(_e.resolve(e.repoPath,e.fileName)),t||{label:"$(file-symlink-file) Open File",description:`${y.pad(V.Dash,2,3)} ${_e.basename(e.fileName)}`})}}class uo extends Ki{constructor(e,t){let i,o;"D"===e.status?(o=Te.toRevisionUri(e.previousFileSha,e.previousUri.fsPath,e.repoPath),i=`${y.pad(V.Dash,2,3)} ${_e.basename(e.fileName)} in ${V.Space}$(git-commit) ${e.previousShortSha} (deleted in ${V.Space}$(git-commit) ${e.shortSha})`):(o=Te.toRevisionUri(e.sha,e.uri.fsPath,e.repoPath),i=`${y.pad(V.Dash,2,3)} ${_e.basename(e.fileName)} in ${V.Space}$(git-commit) ${e.shortSha}`),super(o,t||{label:"$(file-symlink-file) Open Revision",description:i})}}class mo{static show(e,t,i,o,s){return r.__awaiter(this,void 0,void 0,function*(){const n=[],a=e.isStash,h=e.workingFileName&&_e.basename(e.workingFileName)||_e.basename(e.fileName),c=e.isUncommitted;if(c){const t=yield Is.git.getRecentLogCommitForFile(void 0,e.uri.fsPath);if(void 0===t)return;e=t}yield e.resolvePreviousFileSha(),a&&n.push(new co(e)),e.previousFileShortSha&&n.push(new Gi({label:"$(git-compare) Open Changes",description:`${y.pad(V.Dash,2,3)} $(git-commit) ${e.previousFileShortSha} ${V.Space} $(git-compare) ${V.Space} $(git-commit) ${e.shortSha}`},Ut.DiffWithPrevious,[e.uri,{commit:e}])),e.workingFileName&&n.push(new Gi({label:"$(git-compare) Open Changes with Working Tree",description:`${y.pad(V.Dash,2,3)} $(git-commit) ${e.shortSha} ${V.Space} $(git-compare) ${V.Space} $(file-text) ${h}`},Ut.DiffWithWorking,[O.Uri.file(_e.resolve(e.repoPath,e.workingFileName)),{commit:e}])),e.workingFileName&&"D"!==e.status&&n.push(new lo(e)),n.push(new uo(e));const l=(yield Is.git.getRemotes(e.repoPath)).filter(e=>void 0!==e.provider);if(l.length){if(e.workingFileName&&"D"!==e.status){const t=yield Is.git.getBranch(e.repoPath);n.push(new oo(l,{type:"file",fileName:e.workingFileName,branch:t.name},o))}a||n.push(new oo(l,{type:"revision",fileName:e.fileName,commit:e},o))}a||(n.push(new co(e)),n.push(new Gi({label:"$(clippy) Copy Commit ID to Clipboard",description:`${y.pad(V.Dash,2,3)} ${e.shortSha}`},Ut.CopyShaToClipboard,[t,{sha:e.sha}])),n.push(new Gi({label:"$(clippy) Copy Commit Message to Clipboard",description:`${y.pad(V.Dash,2,3)} ${e.message}`},Ut.CopyMessageToClipboard,[t,{message:e.message,sha:e.sha}]))),e.workingFileName&&n.push(new Gi({label:"$(history) Show File History",description:`${y.pad(V.Dash,2,3)} of ${_e.basename(e.fileName)}`},Ut.ShowQuickFileHistory,[O.Uri.file(_e.resolve(e.repoPath,e.workingFileName)),{fileLog:s,goBackCommand:o}])),a||(n.push(new Gi({label:`$(history) Show ${e.workingFileName?"Previous ":""}File History`,description:`${y.pad(V.Dash,2,3)} of ${_e.basename(e.fileName)} ${y.pad(V.Dot,1,1)} from ${V.Space}$(git-commit) ${e.shortSha}`},Ut.ShowQuickFileHistory,[e.toGitUri(),{goBackCommand:o}])),n.push(new Gi({label:"$(git-commit) Show Commit Details",description:`${y.pad(V.Dash,2,3)} $(git-commit) ${e.shortSha}`},Ut.ShowQuickCommitDetails,[e.toGitUri(),{commit:e,sha:e.sha,goBackCommand:o}]))),i&&n.splice(0,0,i);let d=void 0,u=void 0;a||(void 0===s||s.truncated||void 0!==s.sha?(d=(()=>r.__awaiter(this,void 0,void 0,function*(){let o=s,r=o&&o.commits.get(e.sha);if(void 0===r||void 0===r.previousSha){if(void 0===(o=yield Is.git.getLogForFile(e.repoPath,t.fsPath,{maxCount:Is.config.advanced.maxListItems,ref:e.sha})))return Ai;void 0===(r=o&&o.commits.get(e.sha))&&e.isMerge&&(r=f.first(o.commits.values())),r&&(r.nextSha=e.nextSha,r.nextFileName=e.nextFileName)}return void 0===r||void 0===r.previousSha?Ai:new Vi(Ut.ShowQuickCommitFileDetails,[r.previousUri,{fileLog:o,sha:r.previousSha,goBackCommand:i}])})),u=(()=>r.__awaiter(this,void 0,void 0,function*(){let o=s,r=o&&o.commits.get(e.sha);if(void 0===r||void 0===r.nextSha){o=void 0,r=void 0;const i=yield Is.git.findNextCommit(e.repoPath,t.fsPath,e.sha);void 0!==i&&i.sha!==e.sha&&((r=e).nextSha=i.sha,r.nextFileName=i.originalFileName||i.fileName)}return void 0===r||void 0===r.nextSha?Ai:new Vi(Ut.ShowQuickCommitFileDetails,[r.nextUri,{fileLog:o,sha:r.nextSha,goBackCommand:i}])}))):(d=void 0===e.previousSha?void 0:new Vi(Ut.ShowQuickCommitFileDetails,[e.previousUri,{fileLog:s,sha:e.previousSha,goBackCommand:i}]),u=void 0===e.nextSha?void 0:new Vi(Ut.ShowQuickCommitFileDetails,[e.nextUri,{fileLog:s,sha:e.nextSha,goBackCommand:i}])));const m=yield Is.keyboard.beginScope({left:i,",":d,".":u}),g=yield O.window.showQuickPick(n,{matchOnDescription:!0,placeHolder:`${e.getFormattedPath()} ${y.pad(V.Dot,1,1)} ${c?`Uncommitted ${V.ArrowRightHollow} `:""}${e.shortSha} ${y.pad(V.Dot,1,1)} ${e.author}, ${e.formattedDate} ${y.pad(V.Dot,1,1)} ${e.message}`,ignoreFocusOut:Hi(),onDidSelectItem:e=>{m.setKeyCommand("right",e)}});return yield m.dispose(),g})}}class go{static showProgress(e){return ji(e,{left:Ai,",":Ai,".":Ai})}static show(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){const s=e&&[...f.map(e.commits.values(),e=>new zi(e))]||[new Qi("No results found")];if(void 0!==o.showInResultsExplorerCommand&&s.splice(0,0,o.showInResultsExplorerCommand),void 0!==o.showAllCommand&&s.splice(0,0,o.showAllCommand),void 0!==o.goBackCommand&&s.splice(0,0,o.goBackCommand),i.token.isCancellationRequested)return;const r=yield Is.keyboard.beginScope({left:o.goBackCommand});i.cancel();const n=yield O.window.showQuickPick(s,{matchOnDescription:!0,placeHolder:t,ignoreFocusOut:Hi()});return yield r.dispose(),n})}}class po{static showProgress(e){return ji(`${e} history ${V.Dash} search by commit message, filename, or commit id`,{left:Ai,",":Ai,".":Ai})}static show(e,t,i,o,s,n){return r.__awaiter(this,void 0,void 0,function*(){const r=Array.from(f.map(e.commits.values(),e=>new zi(e))),a=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to ${V.Space}$(git-branch) ${i} history`},Ut.ShowQuickBranchHistory,[t,{branch:i,log:e,maxCount:e.maxCount,goBackCommand:s}]),h=(yield Is.git.getRemotes(t&&t.repoPath||e.repoPath)).filter(e=>void 0!==e.provider);h.length&&r.splice(0,0,new oo(h,{type:"branch",branch:i},a)),r.splice(0,0,new Gi({label:"$(search) Show Commit Search",description:`${y.pad(V.Dash,2,3)} search for commits by message, author, files, or commit id`},Ut.ShowCommitSearch,[Te.fromRepoPath(e.repoPath),{goBackCommand:a}]));let c=void 0;if((e.truncated||e.sha)&&(e.truncated&&r.splice(0,0,new Gi({label:"$(sync) Show All Commits",description:`${y.pad(V.Dash,2,3)} this may take a while`},Ut.ShowQuickBranchHistory,[Te.fromRepoPath(e.repoPath),{branch:i,maxCount:0,goBackCommand:s}])),n&&r.splice(0,0,n),e.truncated)){const o=new Gi({label:"$(arrow-right) Show Next Commits",description:`${y.pad(V.Dash,2,3)} shows ${e.maxCount} newer commits`},Ut.ShowQuickBranchHistory,[t,{branch:i,maxCount:e.maxCount,nextPageCommand:n}]),a=f.last(e.commits.values());null!=a&&(c=new Gi({label:"$(arrow-left) Show Previous Commits",description:`${y.pad(V.Dash,2,3)} shows ${e.maxCount} older commits`},Ut.ShowQuickBranchHistory,[new Te(t||a.uri,a),{branch:i,maxCount:e.maxCount,goBackCommand:s,nextPageCommand:o}]),r.splice(0,0,c))}if(s&&r.splice(0,0,s),o.token.isCancellationRequested)return;const l=yield Is.keyboard.beginScope({left:s,",":c,".":n});o.cancel();const d=yield O.window.showQuickPick(r,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${i} history ${V.Dash} search by commit message, filename, or commit id`,ignoreFocusOut:Hi()});return yield l.dispose(),d})}}class fo{static showProgress(e){return ji(e,{left:Ai,",":Ai,".":Ai})}static show(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){o=Object.assign({pickerOnly:!1},o);const s=Array.from(f.map(e.commits.values(),e=>new zi(e)));let r=0;if(o.pickerOnly&&(r++,s.splice(0,0,new Ji(e.repoPath,i,o.currentCommand))),void 0!==o.showInResultsExplorerCommand&&(r++,s.splice(0,0,o.showInResultsExplorerCommand)),e.truncated||e.sha){if(void 0!==o.showAllCommand)r++,s.splice(0,0,o.showAllCommand);else if(!o.pickerOnly){const[i]=yield Is.git.findWorkingFileName(_e.relative(e.repoPath,t.fsPath),e.repoPath);i&&(r++,s.splice(0,0,new Gi({label:"$(history) Show File History",description:`${y.pad(V.Dash,2,3)} of ${_e.basename(i)}`},Ut.ShowQuickFileHistory,[O.Uri.file(_e.resolve(e.repoPath,i)),{goBackCommand:new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to history of ${V.Space}$(file-text) ${_e.basename(t.fsPath)}${t.sha?` from ${V.Space}$(git-commit) ${t.shortSha}`:""}`},Ut.ShowQuickFileHistory,[t,{log:e,maxCount:e.maxCount,range:e.range,goBackCommand:o.goBackCommand}])}])))}void 0!==o.nextPageCommand&&(r++,s.splice(0,0,o.nextPageCommand)),void 0!==o.previousPageCommand&&(r++,s.splice(0,0,o.previousPageCommand))}if(!o.pickerOnly){const i=yield Is.git.getBranch(t.repoPath),n=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to history of ${V.Space}$(file-text) ${_e.basename(t.fsPath)}${t.sha?` from ${V.Space}$(git-commit) ${t.shortSha}`:""}`},Ut.ShowQuickFileHistory,[t,{log:e,maxCount:e.maxCount,range:e.range}]);void 0===o.goBackCommand&&s.splice(r++,0,new Gi({label:"$(history) Show Branch History",description:`${y.pad(V.Dash,2,3)} shows  ${V.Space}$(git-branch) ${i.name} history`},Ut.ShowQuickCurrentBranchHistory,[void 0,{goBackCommand:n}]));const a=(yield Is.git.getRemotes(t.repoPath)).filter(e=>void 0!==e.provider);if(a.length){const e=void 0!==t.sha?{type:"revision",branch:i.name,fileName:t.getRelativePath(),sha:t.sha}:{type:"file",branch:i.name,fileName:t.getRelativePath()};s.splice(r++,0,new oo(a,e,n))}o.goBackCommand&&s.splice(0,0,o.goBackCommand)}if(void 0!==o.progressCancellation&&o.progressCancellation.token.isCancellationRequested)return;const n=yield Is.keyboard.beginScope({left:o.goBackCommand,",":o.previousPageCommand,".":o.nextPageCommand});o.progressCancellation&&o.progressCancellation.cancel();const a=yield O.window.showQuickPick(s,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:i,ignoreFocusOut:Hi()});return yield n.dispose(),a})}}class vo{constructor(e){this.repository=e,this.label=e.name,this.description=e.path}get repoPath(){return this.repository.path}}class wo{static show(e,t){return r.__awaiter(this,void 0,void 0,function*(){const i=[...f.map(yield Is.git.getRepositories(),e=>new vo(e))];return void 0!==t&&i.splice(0,0,t),yield O.window.showQuickPick(i,{placeHolder:e,ignoreFocusOut:Hi()})})}}class Co extends Ki{constructor(e,t,i){const o=e.getOcticon(),s=e.getFormattedDirectory(!0);super(e.uri,i||{label:`${e.staged?"$(check)":V.Space.repeat(3)}${y.pad(o,2,2)} ${_e.basename(e.fileName)}`,description:s}),this.status=e,void 0!==e.indexStatus?this.commit=new je(Be.File,e.repoPath,Ot.stagedUncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName):this.commit=new je(Be.File,e.repoPath,Ot.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,void 0!==t?Ot.stagedUncommittedSha:"HEAD",e.fileName)}onDidPressKey(e){return O.commands.executeCommand(Ut.DiffWithPrevious,Te.fromFileStatus(this.status,this.status.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!1}})}}class bo extends Gi{constructor(e,t){const i=e.map(e=>e.uri);super(t||{label:"$(file-symlink-file) Open Changed Files",description:""},Ut.OpenChangedFiles,[void 0,{uris:i}])}}class yo{static computeStatus(e){let t=0,i=0,o=0,s=0,r=0,n=0;const a=[],h=[];for(const c of e){switch(c.indexStatus){case"A":case"?":t++,a.push(c);break;case"D":r++;break;case void 0:break;default:o++,a.push(c)}switch(c.workTreeStatus){case"A":case"?":i++,h.push(c);break;case"D":n++;break;case void 0:break;default:s++,h.push(c)}}const c=t+o+r,l=i+s+n;return{staged:c,stagedStatus:c>0?`+${t} ~${o} -${r}`:"",stagedAddsAndChanges:a,unstaged:l,unstagedStatus:l>0?`+${i} ~${s} -${n}`:"",unstagedAddsAndChanges:h}}static show(e,t){return r.__awaiter(this,void 0,void 0,function*(){const i=[...f.flatMap(e.files,e=>void 0!==e.workTreeStatus&&void 0!==e.indexStatus?[new Co(e.with({indexStatus:null}),e.indexStatus),new Co(e.with({workTreeStatus:null}))]:[new Co(e)])];i.sort((e,t)=>(e.status.staged?-1:1)-(t.status.staged?-1:1)||e.status.fileName.localeCompare(t.status.fileName));const o=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to ${V.Space}$(git-branch) ${e.branch} status`},Ut.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]),s=this.computeStatus(e.files);if(s.staged>0){let o=0;const r=s.unstaged>0?e.files.findIndex(e=>!e.staged):-1;r>-1&&(i.splice(r,0,new Gi({label:"Unstaged Files",description:s.unstagedStatus},Ut.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(r,0,new bo(s.stagedAddsAndChanges,{label:`${V.Space.repeat(4)} $(file-symlink-file) Open Staged Files`,description:""})),i.push(new bo(s.unstagedAddsAndChanges,{label:`${V.Space.repeat(4)} $(file-symlink-file) Open Unstaged Files`,description:""}))),i.splice(o++,0,new Gi({label:"Staged Files",description:s.stagedStatus},Ut.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]))}else e.files.some(e=>!e.staged)&&i.splice(0,0,new Gi({label:"Unstaged Files",description:s.unstagedStatus},Ut.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]));e.files.length?(i.push(new bo(s.stagedAddsAndChanges.concat(s.unstagedAddsAndChanges))),i.push(new Gi({label:"$(x) Close Unchanged Files",description:""},Ut.CloseUnchangedFiles))):i.push(new Gi({label:"No changes in the working tree",description:""},Ut.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(0,0,new Gi({label:"$(inbox) Show Stashed Changes",description:`${y.pad(V.Dash,2,3)} shows stashed changes in the repository`},Ut.ShowQuickStashList,[Te.fromRepoPath(e.repoPath),{goBackCommand:o}])),e.upstream&&e.state.ahead&&i.splice(0,0,new Gi({label:`$(cloud-upload)${V.Space} ${e.state.ahead} Commit${e.state.ahead>1?"s":""} ahead of ${V.Space}$(git-branch) ${e.upstream}`,description:`${y.pad(V.Dash,2,3)} shows commits in ${V.Space}$(git-branch) ${e.branch} but not ${V.Space}$(git-branch) ${e.upstream}`},Ut.ShowQuickBranchHistory,[Te.fromRepoPath(e.repoPath,`${e.upstream}..${e.branch}`),{branch:e.branch,maxCount:0,goBackCommand:o}])),e.upstream&&e.state.behind&&i.splice(0,0,new Gi({label:`$(cloud-download)${V.Space} ${e.state.behind} Commit${e.state.behind>1?"s":""} behind ${V.Space}$(git-branch) ${e.upstream}`,description:`${y.pad(V.Dash,2,3)} shows commits in ${V.Space}$(git-branch) ${e.upstream} but not ${V.Space}$(git-branch) ${e.branch}${e.sha?` (since ${V.Space}$(git-commit) ${Ot.shortenSha(e.sha)})`:""}`},Ut.ShowQuickBranchHistory,[Te.fromRepoPath(e.repoPath,`${e.branch}..${e.upstream}`),{branch:e.upstream,maxCount:0,goBackCommand:o}])),!e.upstream||e.state.ahead||e.state.behind||i.splice(0,0,new Gi({label:`$(git-branch) ${e.branch} is up-to-date with ${V.Space}$(git-branch) ${e.upstream}`,description:""},Ut.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),t&&i.splice(0,0,t);const r=yield Is.keyboard.beginScope({left:t}),n=yield O.window.showQuickPick(i,{matchOnDescription:!0,placeHolder:`status of ${e.branch}${e.upstream?` ${y.pad(V.ArrowLeftRight,1,1)} ${e.upstream}`:""}`,ignoreFocusOut:Hi(),onDidSelectItem:e=>{r.setKeyCommand("right",e)}});return yield r.dispose(),n})}}class _o{static showProgress(e){return ji("apply"===e?`Apply stashed changes to your working tree${V.Ellipsis}`:`stashed changes ${V.Dash} search by message, filename, or commit id`,{left:Ai,",":Ai,".":Ai})}static show(e,t,i,o,s){return r.__awaiter(this,void 0,void 0,function*(){const r=e&&Array.from(f.map(e.commits.values(),e=>new zi(e)))||[];if("list"===t&&r.splice(0,0,new Gi({label:"$(plus) Stash Changes",description:`${y.pad(V.Dash,2,3)} stashes all changes`},Ut.StashSave,[{goBackCommand:s}])),o&&r.splice(0,0,o),i.token.isCancellationRequested)return;const n=yield Is.keyboard.beginScope({left:o});i.cancel();const a=yield O.window.showQuickPick(r,{matchOnDescription:!0,placeHolder:"apply"===t?`Apply stashed changes to your working tree${V.Ellipsis}`:`stashed changes ${V.Dash} search by message, filename, or commit id`,ignoreFocusOut:Hi()});return yield n.dispose(),a})}}class xo extends _i{constructor(){super([Ut.DiffDirectory,Ut.ExternalDiffAll,Ut.ExplorersOpenDirectoryDiff,Ut.ExplorersOpenDirectoryDiffWithWorking])}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){switch(e.command){case Ut.ExternalDiffAll:t.ref1="HEAD",t.ref2=void 0;break;case Ut.ExplorersOpenDirectoryDiff:"view"===e.type&&e.node instanceof di&&(t.ref1=e.node.ref1,t.ref2=e.node.ref2);break;case Ut.ExplorersOpenDirectoryDiffWithWorking:(function(e){return"view"===e.type&&e.node instanceof It})(e)&&(t.ref1=e.node.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){let o;t=pi(t,e);try{const e=yield Is.git.getRepoPath(t);if(!e)return Ri.showNoRepositoryWarningMessage("Unable to open directory compare");if(!i.ref1){i=Object.assign({},i);const t=`Compare Working Tree to ${V.Ellipsis}`;o=Wi.showProgress(t);const[s,r]=yield Promise.all([Is.git.getBranches(e),Is.git.getTags(e)]);if(o.token.isCancellationRequested)return;const n=yield Wi.show(s,r,t,{progressCancellation:o});if(void 0===n)return;if(n instanceof Gi)return n.execute();if(i.ref1=n.name,void 0===i.ref1)return}return void Is.git.openDirectoryDiff(e,i.ref1,i.ref2)}catch(e){if("No diff tool found"===(e&&e.toString())){if(!(yield O.window.showWarningMessage("Unable to open directory compare because there is no Git diff tool configured","View Git Docs")))return;return O.commands.executeCommand(j.Open,O.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}return se.error(e,"DiffDirectoryCommand"),O.window.showErrorMessage("Unable to open directory compare. See output channel for more details")}finally{o&&o.dispose()}})}}class So extends _i{constructor(){super(Ut.DiffLineWithPrevious)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;const o=yield Te.fromUri(t);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||Ot.isUncommitted(i.commit.sha)){const t=i.line;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?yield Is.git.getBlameForLineContents(o,t,e.document.getText()):yield Is.git.getBlameForLine(o,t);if(void 0===s)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=s.commit,i.commit.isUncommitted){const e=yield Is.git.getStatusForFile(o.repoPath,o.fsPath);void 0!==e&&void 0!==e.indexStatus&&(i.commit=i.commit.with({sha:Ot.stagedUncommittedSha}))}}catch(e){return se.error(e,"DiffLineWithPreviousCommand",`getBlameForLine(${t})`),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const s={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:Ot.deletedSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,s)})}}class $o extends _i{constructor(){super(Ut.DiffLineWithWorking)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;const o=yield Te.fromUri(t);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||Ot.isUncommitted(i.commit.sha)){const t=i.line;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?yield Is.git.getBlameForLineContents(o,t,e.document.getText()):yield Is.git.getBlameForLine(o,t);if(void 0===s)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=s.commit,i.commit.isUncommitted){const e=yield Is.git.getStatusForFile(o.repoPath,o.fsPath);i.commit=i.commit.with({sha:void 0!==e&&void 0!==e.indexStatus?Ot.stagedUncommittedSha:i.commit.previousSha,fileName:i.commit.previousFileName,originalFileName:null,previousSha:null,previousFileName:null}),i.line=s.line.line+1}}catch(e){return se.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const s={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,s)})}}class Do extends _i{static getMarkdownCommandArgs(e,t){let i;if(e instanceof Ae){const o=e;i=void 0===t?o.isUncommitted?{repoPath:o.repoPath,lhs:{sha:"HEAD",uri:o.uri},rhs:{sha:"",uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:void 0!==o.previousSha?o.previousSha:Ot.deletedSha,uri:o.previousUri},rhs:{sha:o.sha,uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:o.sha,uri:o.uri},rhs:{sha:t.sha,uri:t.uri}}}else i=e;return super.getMarkdownCommandArgsCore(Ut.DiffWith,i)}constructor(){super(Ut.DiffWith)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==(i=Object.assign({},i,{lhs:Object.assign({},i.lhs),rhs:Object.assign({},i.rhs),showOptions:Object.assign({},i.showOptions)})).repoPath&&void 0!==i.lhs&&void 0!==i.rhs)try{Ot.isResolveRequired(i.lhs.sha)&&(i.lhs.sha=yield Is.git.resolveReference(i.repoPath,i.lhs.sha,i.lhs.uri)),Ot.isResolveRequired(i.rhs.sha)&&(i.rhs.sha=yield Is.git.resolveReference(i.repoPath,i.rhs.sha,i.rhs.uri));const[e,t]=yield Promise.all([Is.git.getVersionedFile(i.repoPath,i.lhs.uri.fsPath,i.lhs.sha),Is.git.getVersionedFile(i.repoPath,i.rhs.uri.fsPath,i.rhs.sha)]);void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new O.Range(i.line,0,i.line,0));let o="";void 0===t?o=Ot.isUncommitted(i.rhs.sha)?" (deleted)":"deleted in ":void 0!==e&&i.lhs.sha!==Ot.deletedSha||(o="added in ");let s="";if(void 0===e&&""===i.rhs.sha&&(void 0!==t?(s="not in ",o=""):s="deleted in "),void 0===i.lhs.title&&i.lhs.sha!==Ot.deletedSha&&(void 0!==e||""!==s)){const e=Ot.shortenSha(i.lhs.sha)||"";i.lhs.title=`${_e.basename(i.lhs.uri.fsPath)}${""!==e?` (${s}${e})`:""}`}if(void 0===i.rhs.title&&i.rhs.sha!==Ot.deletedSha){const e=Ot.shortenSha(i.rhs.sha)||"";i.rhs.title=`${_e.basename(i.rhs.uri.fsPath)}${""!==e?` (${o}${e})`:o}`}const r=void 0!==i.lhs.title&&void 0!==i.rhs.title?`${i.lhs.title} ${V.ArrowLeftRight} ${i.rhs.title}`:i.lhs.title||i.rhs.title;return yield O.commands.executeCommand(j.Diff,void 0===e?Te.toRevisionUri(Ot.deletedSha,i.lhs.uri.fsPath,i.repoPath):O.Uri.file(e),void 0===t?Te.toRevisionUri(Ot.deletedSha,i.rhs.uri.fsPath,i.repoPath):O.Uri.file(t),r,i.showOptions)}catch(e){return se.error(e,"DiffWithCommand","getVersionedFile"),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}})}}class ko extends _i{constructor(){super(Ut.DiffWithBranch)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield Te.fromUri(t);if(!o.repoPath)return Ri.showNoRepositoryWarningMessage("Unable to open branch compare");const s=`Compare ${_e.basename(o.fsPath)} with ${V.Ellipsis}`,r=Wi.showProgress(s);try{const[e,t]=yield Promise.all([Is.git.getBranches(o.repoPath),Is.git.getTags(o.repoPath)]);if(r.token.isCancellationRequested)return;const n=yield Wi.show(e,t,s,{progressCancellation:r,goBackCommand:i.goBackCommand});if(void 0===n)return;if(n instanceof Gi)return n.execute();const a=n.name;if(void 0===a)return;let h,c;const l=yield Is.git.getDiffStatus(o.repoPath,"HEAD",a,{filter:"R"});if(void 0!==l){const e=y.normalizePath(_e.relative(o.repoPath,o.fsPath)),t=l.find(t=>t.fileName===e);void 0!==t&&void 0!==t.originalFileName&&(h=O.Uri.file(_e.join(o.repoPath,t.originalFileName)),c=`${_e.basename(t.originalFileName)} (${a})`)}const d={repoPath:o.repoPath,lhs:{sha:n.remote?`remotes/${a}`:a,uri:h||o,title:c||`${_e.basename(o.fsPath)} (${a})`},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,d)}finally{r.dispose()}})}}class Po extends _i{constructor(){super(Ut.DiffWithNext)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield Te.fromUri(t);let s;if(void 0===i.commit||!(i.commit instanceof je)||void 0!==i.range)try{const e=void 0===i.commit?o.sha:i.commit.sha;if(Ot.isStagedUncommitted(e))return O.commands.executeCommand(Ut.DiffWithWorking,t);const r=yield Is.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:void 0!==e?void 0:2,range:i.range,skipMerges:!0});if(void 0===r)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e&&r.commits.get(e)||f.first(r.commits.values()),void 0===o.sha&&void 0!==(s=yield Is.git.getStatusForFile(o.repoPath,o.fsPath)))return O.commands.executeCommand(Ut.DiffWithWorking,t)}catch(e){return se.error(e,"DiffWithNextCommand",`getLogForFile(${o.repoPath}, ${o.fsPath})`),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}if(void 0===i.commit.nextSha){if(void 0!==(s=s||(yield Is.git.getStatusForFile(o.repoPath,o.fsPath)))&&"M"===s.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:Ot.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,e)}return O.commands.executeCommand(Ut.DiffWithWorking,t)}const r={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:i.commit.nextSha,uri:i.commit.nextUri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,r)})}}class Fo extends _i{constructor(){super(Ut.DiffWithPrevious)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||!i.commit.isFile){const e=yield Te.fromUri(t);try{let o=void 0===i.commit?e.sha:i.commit.sha;if(o===Ot.deletedSha)return Ri.showCommitHasNoPreviousCommitWarningMessage();let s=!1;Ot.isStagedUncommitted(o)&&(e.sha=o=void 0,s=!0);const r=yield Is.git.getLogForFile(e.repoPath,e.fsPath,{maxCount:2,ref:o,skipMerges:!0});if(void 0===r)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=o&&r.commits.get(o)||f.first(r.commits.values()),void 0===e.sha){const o=yield Is.git.getStatusForFile(e.repoPath,e.fsPath);if(void 0!==o){if(s){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:Ot.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,e)}if(void 0!==o.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:Ot.stagedUncommittedSha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,e)}return O.commands.executeCommand(Ut.DiffWithWorking,t,{commit:i.commit,showOptions:i.showOptions})}}}catch(t){return se.error(t,"DiffWithPreviousCommand",`getLogForFile(${e.repoPath}, ${e.fsPath})`),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const o={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:Ot.deletedSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,o)})}}class Ro extends _i{constructor(){super(Ut.DiffWithRevision)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield Te.fromUri(t),s=`Compare ${o.getFormattedPath()}${o.sha?` ${y.pad(V.Dot,1,1)} ${o.shortSha}`:""} with ${V.Ellipsis}`,r=fo.showProgress(s);try{const e=yield Is.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,ref:o.sha});if(void 0===e)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(r.token.isCancellationRequested)return;let n=void 0;if(e.truncated){const o=new Gi({label:"$(arrow-right) Show Next Commits",description:`${y.pad(V.Dash,2,3)} shows ${e.maxCount} newer commits`},Ut.DiffWithRevision,[t,Object.assign({},i)]),s=f.last(e.commits.values());null!=s&&(n=new Gi({label:"$(arrow-left) Show Previous Commits",description:`${y.pad(V.Dash,2,3)} shows ${e.maxCount} older commits`},Ut.DiffWithRevision,[new Te(t,s),Object.assign({},i,{nextPageCommand:o})]))}const a=yield fo.show(e,o,s,{pickerOnly:!0,progressCancellation:r,currentCommand:new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to history of ${V.Space}$(file-text) ${o.getFormattedPath()}${o.sha?` from ${V.Space}$(git-commit) ${o.shortSha}`:""}`},Ut.DiffWithRevision,[t,Object.assign({},i)]),nextPageCommand:i.nextPageCommand,previousPageCommand:n,showAllCommand:void 0!==e&&e.truncated?new Gi({label:"$(sync) Show All Commits",description:`${y.pad(V.Dash,2,3)} this may take a while`},Ut.DiffWithRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===a)return;let h;if(a instanceof Ji){const e=yield a.execute();if(void 0===e)return;if(e instanceof Gi)return e.execute();h=e.name}else{if(a instanceof Gi)return a.execute();h=a.commit.sha}const c={repoPath:o.repoPath,lhs:{sha:h,uri:o},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return yield O.commands.executeCommand(Ut.DiffWith,c)}catch(e){return se.error(e,"DiffWithRevisionCommand"),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}finally{r.dispose()}})}}class To extends _i{constructor(){super(Ut.DiffWithWorking)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;const o=yield Te.fromUri(t);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||Ot.isUncommitted(i.commit.sha)){if(void 0===o.sha)return O.window.showInformationMessage("File matches the working tree");if(Ot.isStagedUncommitted(o.sha)){o.sha=void 0;const e=yield Is.git.getStatusForFile(o.repoPath,o.fsPath);if(void 0!==e&&void 0!==e.indexStatus){const e={repoPath:o.repoPath,lhs:{sha:Ot.stagedUncommittedSha,uri:o.fileUri()},rhs:{sha:"",uri:o.fileUri()},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,e)}}try{if(i.commit=yield Is.git.getLogCommitForFile(o.repoPath,o.fsPath,{ref:o.sha,firstIfNotFound:!0}),void 0===i.commit)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open compare")}catch(e){return se.error(e,"DiffWithWorkingCommand",`getLogCommit(${o.repoPath}, ${o.fsPath}, ${o.sha})`),O.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const[s]=yield Is.git.findWorkingFileName(o.fsPath,o.repoPath);if(void 0===s)return;const r={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return O.commands.executeCommand(Ut.DiffWith,r)})}}var Eo,Bo;!function(e){e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.ADDED_BY_US=9]="ADDED_BY_US",e[e.ADDED_BY_THEM=10]="ADDED_BY_THEM",e[e.DELETED_BY_US=11]="DELETED_BY_US",e[e.DELETED_BY_THEM=12]="DELETED_BY_THEM",e[e.BOTH_ADDED=13]="BOTH_ADDED",e[e.BOTH_DELETED=14]="BOTH_DELETED",e[e.BOTH_MODIFIED=15]="BOTH_MODIFIED"}(Eo||(Eo={})),function(e){e[e.Merge=0]="Merge",e[e.Index=1]="Index",e[e.WorkingTree=2]="WorkingTree"}(Bo||(Bo={}));class No{constructor(e,t){this.uri=e,this.staged=t}}class Ao extends yi{constructor(){super(Ut.ExternalDiff)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return"scm-states"===e.type?((t=Object.assign({},t)).files=e.scmResourceStates.map(e=>new No(e.resourceUri,e.resourceGroupType===Bo.Index)),this.execute(t)):"scm-groups"===e.type?((t=Object.assign({},t)).files=s.filterMap(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?new No(e.resourceUri,e.resourceGroupType===Bo.Index):void 0),this.execute(t)):this.execute(t)})}isModified(e){const t=e.type;return t===Eo.BOTH_MODIFIED||t===Eo.INDEX_MODIFIED||t===Eo.MODIFIED}execute(e={}){return r.__awaiter(this,void 0,void 0,function*(){try{const t=yield Is.git.getRepoPath(void 0);if(!t)return Ri.showNoRepositoryWarningMessage("Unable to open changed files");const i=yield Is.git.getDiffTool(t);if(void 0===i){if(!(yield O.window.showWarningMessage("Unable to open file compare because there is no Git diff tool configured","View Git Docs")))return;return O.commands.executeCommand(j.Open,O.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}if(void 0===e.files){const i=yield Is.git.getStatusForRepo(t);if(void 0===i)return O.window.showWarningMessage("Unable to open changed files");for(const t of(e.files=[],i.files))"M"===t.indexStatus&&e.files.push(new No(t.uri,!0)),"M"===t.workTreeStatus&&e.files.push(new No(t.uri,!1))}for(const o of e.files)Is.git.openDiffTool(t,o.uri,o.staged,i);return}catch(e){return se.error(e,"ExternalDiffCommand"),O.window.showErrorMessage("Unable to open external diff. See output channel for more details")}})}}class Uo extends _i{constructor(){super(Ut.OpenChangedFiles)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=yield Is.git.getRepoPath(t);if(!e)return Ri.showNoRepositoryWarningMessage("Unable to open changed files");const o=yield Is.git.getStatusForRepo(e);if(void 0===o)return O.window.showWarningMessage("Unable to open changed files");i.uris=s.filterMap(o.files,e=>"D"!==e.status?e.uri:void 0)}for(const e of i.uris)yield Di(e,{preserveFocus:!0,preview:!1});return}catch(e){return se.error(e,"OpenChangedFilesCommand"),O.window.showErrorMessage("Unable to open changed files. See output channel for more details")}})}}class Oo extends _i{constructor(){super(Ut.OpenBranchesInRemote)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return wi(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=(t=pi(t,e))&&(yield Te.fromUri(t)),s=void 0===o?Is.git.getHighlanderRepoPath():o.repoPath;if(s)try{const e=(yield Is.git.getRemotes(s)).filter(e=>void 0!==e.provider);return O.commands.executeCommand(Ut.OpenInRemote,t,{resource:{type:"branches"},remote:i.remote,remotes:e})}catch(e){return se.error(e,"OpenBranchesInRemoteCommand"),O.window.showErrorMessage("Unable to open branches in remote provider. See output channel for more details")}})}}class Lo extends _i{constructor(){super(Ut.OpenBranchInRemote)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return fi(e)&&((t=Object.assign({},t)).branch=e.node.branch.name,t.remote=e.node.branch.getRemote()),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=(t=pi(t,e))&&(yield Te.fromUri(t)),s=void 0===o?Is.git.getHighlanderRepoPath():o.repoPath;if(s)try{if(void 0===i.branch){i=Object.assign({},i);const e=yield Is.git.getBranches(s),t=yield to.show(e,`Show history for branch${V.Ellipsis}`);if(void 0===t)return;if(t instanceof Gi)return;if(i.branch=t.branch.name,void 0===i.branch)return}const e=(yield Is.git.getRemotes(s)).filter(e=>void 0!==e.provider);return O.commands.executeCommand(Ut.OpenInRemote,t,{resource:{type:"branch",branch:i.branch},remote:i.remote,remotes:e})}catch(e){return se.error(e,"OpenBranchInRemoteCommandArgs"),O.window.showErrorMessage("Unable to open branch in remote provider. See output channel for more details")}})}}class Io extends _i{static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Ut.OpenCommitInRemote,t)}constructor(){super(Ut.OpenCommitInRemote)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return vi(e)?((t=Object.assign({},t)).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;const o=yield Te.fromUri(t);if(o.repoPath)try{if(void 0===i.sha){const t=void 0===e?0:e.selection.active.line;if(t<0)return;const s=e&&e.document&&e.document.isDirty?yield Is.git.getBlameForLineContents(o,t,e.document.getText()):yield Is.git.getBlameForLine(o,t);if(void 0===s)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open commit in remote provider");let r=s.commit;r.isUncommitted&&(r=r.with({sha:r.previousSha,fileName:r.previousFileName,previousSha:null,previousFileName:null})),i.sha=r.sha}const s=(yield Is.git.getRemotes(o.repoPath)).filter(e=>void 0!==e.provider);return O.commands.executeCommand(Ut.OpenInRemote,t,{resource:{type:"commit",sha:i.sha},remotes:s})}catch(e){return se.error(e,"OpenCommitInRemoteCommand"),O.window.showErrorMessage("Unable to open commit in remote provider. See output channel for more details")}})}}class Mo extends _i{constructor(){super(Ut.OpenFileInRemote)}preExecute(e,t={range:!0}){return r.__awaiter(this,void 0,void 0,function*(){return vi(e)?((t=Object.assign({},t)).range=!1,fi(e)&&(t.branch=void 0!==e.node.branch?e.node.branch.name:void 0),this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={range:!0}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;const o=yield Te.fromUri(t);if(o.repoPath){if(void 0===i.branch){const e=yield Is.git.getBranch(o.repoPath);void 0!==e&&(i.branch=e.name)}try{const s=(yield Is.git.getRemotes(o.repoPath)).filter(e=>void 0!==e.provider),r=i.range&&void 0!==e?new O.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+1})):void 0;return O.commands.executeCommand(Ut.OpenInRemote,t,{resource:{type:void 0===o.sha?"file":"revision",branch:i.branch,fileName:o.getRelativePath(),range:r,sha:o.sha},remotes:s})}catch(e){return se.error(e,"OpenFileInRemoteCommand"),O.window.showErrorMessage("Unable to open file in remote provider. See output channel for more details")}}})}}class Wo extends _i{static getMarkdownCommandArgs(e,t,i){let o;e instanceof O.Uri?o={uri:e,line:i,annotationType:t}:o=e;return super.getMarkdownCommandArgsCore(Ut.OpenFileRevision,o)}constructor(){super(Ut.OpenFileRevision)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){let o;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);try{if(void 0===i.uri){if(void 0===(t=pi(t,e)))return;const s=yield Te.fromUri(t),r=`Open ${s.getFormattedPath()}${s.sha?` ${y.pad(V.Dot,1,1)} ${s.shortSha}`:""} in revision ${V.Ellipsis}`;o=fo.showProgress(r);const n=yield Is.git.getLogForFile(s.repoPath,s.fsPath,{maxCount:i.maxCount,ref:s.sha});if(void 0===n)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(o.token.isCancellationRequested)return;let a=void 0;if(n.truncated){const e=new Gi({label:"$(arrow-right) Show Next Commits",description:`${y.pad(V.Dash,2,3)} shows ${n.maxCount} newer commits`},Ut.OpenFileRevision,[t,Object.assign({},i)]),o=f.last(n.commits.values());null!=o&&(a=new Gi({label:"$(arrow-left) Show Previous Commits",description:`${y.pad(V.Dash,2,3)} shows ${n.maxCount} older commits`},Ut.OpenFileRevision,[new Te(t,o),Object.assign({},i,{nextPageCommand:e})]))}const h=yield fo.show(n,s,r,{pickerOnly:!0,progressCancellation:o,currentCommand:new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to history of ${V.Space}$(file-text) ${s.getFormattedPath()}${s.sha?` from ${V.Space}$(git-commit) ${s.shortSha}`:""}`},Ut.OpenFileRevision,[t,Object.assign({},i)]),nextPageCommand:i.nextPageCommand,previousPageCommand:a,showAllCommand:void 0!==n&&n.truncated?new Gi({label:"$(sync) Show All Commits",description:`${y.pad(V.Dash,2,3)} this may take a while`},Ut.OpenFileRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===h)return;if(h instanceof Ji){const e=yield h.execute();if(void 0===e)return;if(e instanceof Gi)return e.execute();i.uri=Te.toRevisionUri(e.name,s.fsPath,s.repoPath)}else{if(h instanceof Gi)return h.execute();i.uri=Te.toRevisionUri(h.commit.sha,h.commit.uri.fsPath,h.commit.repoPath)}}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new O.Range(i.line,0,i.line,0));const s=yield Di(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?s:Is.annotations.showAnnotations(s,i.annotationType,i.line)}catch(e){return se.error(e,"OpenFileRevisionCommand"),O.window.showErrorMessage("Unable to open file revision. See output channel for more details")}finally{o&&o.dispose()}})}}class Ho extends _i{constructor(){super(Ut.OpenInRemote)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==(i=Object.assign({},i)).remotes&&void 0!==i.resource){if(void 0!==i.remote){const e=i.remotes.filter(e=>e.name===i.remote);e.length>0&&(i.remotes=e)}try{if(1===i.remotes.length)return this.ensureRemoteBranchName(i),new io(i.remotes[0],i.resource).execute();let e="";switch(i.resource.type){case le.Branch:this.ensureRemoteBranchName(i),e=`open ${i.resource.branch} branch in${V.Ellipsis}`;break;case le.Commit:e=`open commit ${Ot.shortenSha(i.resource.sha)} in${V.Ellipsis}`;break;case le.File:e=`open ${i.resource.fileName} in${V.Ellipsis}`;break;case le.Revision:if(void 0!==i.resource.commit&&i.resource.commit instanceof je)"D"===i.resource.commit.status?(i.resource.sha=i.resource.commit.previousSha,e=`open ${i.resource.fileName} ${y.pad(V.Dot,1,1)} ${i.resource.commit.previousShortSha} in${V.Ellipsis}`):(i.resource.sha=i.resource.commit.sha,e=`open ${i.resource.fileName} ${y.pad(V.Dot,1,1)} ${i.resource.commit.shortSha} in${V.Ellipsis}`);else{const t=void 0===i.resource.sha?"":Ot.shortenSha(i.resource.sha),o=t?` ${y.pad(V.Dot,1,1)} ${t}`:"";e=`open ${i.resource.fileName}${o} in${V.Ellipsis}`}}if(1===i.remotes.length)return new io(i.remotes[0],i.resource).execute();const t=yield so.show(i.remotes,e,i.resource,i.goBackCommand);if(void 0===t)return;return t.execute()}catch(e){return se.error(e,"OpenInRemoteCommand"),O.window.showErrorMessage("Unable to open in remote provider. See output channel for more details")}}})}ensureRemoteBranchName(e){if(void 0===e.remotes||void 0===e.resource||"branch"!==e.resource.type)return;const t=e.resource.branch.indexOf("/");if(t>=0){const i=e.resource.branch.substring(0,t),o=e.remotes.find(e=>e.name===i);void 0!==o&&(e.resource.branch=e.resource.branch.substring(t+1),e.remotes=[o])}}}class jo extends _i{constructor(){super(Ut.OpenRepoInRemote)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return wi(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=(t=pi(t,e))&&(yield Te.fromUri(t)),s=void 0===o?Is.git.getHighlanderRepoPath():o.repoPath;if(s)try{const e=(yield Is.git.getRemotes(s)).filter(e=>void 0!==e.provider);return O.commands.executeCommand(Ut.OpenInRemote,t,{resource:{type:"repo"},remote:i.remote,remotes:e})}catch(e){return se.error(e,"OpenRepoInRemoteCommand"),O.window.showErrorMessage("Unable to open repository in remote provider. See output channel for more details")}})}}class Go extends _i{constructor(){super(Ut.OpenWorkingFile)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);try{if(void 0===i.uri){if(void 0===(t=pi(t,e)))return;i.uri=yield Te.fromUri(t)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new O.Range(i.line,0,i.line,0));const o=yield Di(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?o:Is.annotations.showAnnotations(o,i.annotationType,i.line)}catch(e){return se.error(e,"OpenWorkingFileCommand"),O.window.showErrorMessage("Unable to open working file. See output channel for more details")}})}}class Qo extends yi{constructor(){super(Ut.ResetSuppressedWarnings)}execute(){return r.__awaiter(this,void 0,void 0,function*(){yield Hs.update(Hs.name("advanced")("messages").value,void 0,O.ConfigurationTarget.Global)})}}const Vo=/^([@~=:#])/,Ko=new Map([["@",Et.Author],["~",Et.Changes],["=",Et.ChangedOccurrences],[":",Et.Files],["#",Et.Sha]]);class qo extends Si{constructor(){super(Ut.ShowCommitSearch)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=void 0===(t=pi(t,e))?void 0:yield Te.fromUri(t);let s=void 0===o?Is.git.getHighlanderRepoPath():o.repoPath;if(!s){const e=yield wo.show(`Search for commits in which repository${V.Ellipsis}`,i.goBackCommand);if(e instanceof Gi)return e.execute();if(void 0===e)return void 0===i.goBackCommand?void 0:i.goBackCommand.execute();s=e.repoPath}i=Object.assign({},i);const r=Object.assign({},i);if(!i.search||null==i.searchBy){try{if(!i.search&&void 0!==e&&void 0!==o){const t=yield Is.git.getBlameForLine(o,e.selection.active.line);void 0===t||t.commit.isUncommitted||(i.search=`#${t.commit.shortSha}`)}}catch(e){se.error(e,"ShowCommitSearchCommand","search prefetch failed")}if(i.search=yield O.window.showInputBox({value:i.search,prompt:"Please enter a search string",placeHolder:"search by message, author (@<pattern>), files (:<pattern>), commit id (#<sha>), changes (~<pattern>), or changed occurrences (=<string>)"}),void 0===i.search)return void 0===i.goBackCommand?void 0:i.goBackCommand.execute();r.search=i.search;const t=Vo.exec(i.search);t&&t[1]?(i.searchBy=Ko.get(t[1]),i.search=i.search.substring(" "===i.search[1]?2:1)):Ot.isSha(i.search)?i.searchBy=Et.Sha:i.searchBy=Et.Message}void 0===i.searchBy&&(i.searchBy=Et.Message);let n=void 0;switch(i.searchBy){case Et.Author:n=`commits with an author matching '${i.search}'`;break;case Et.Changes:n=`commits with changes matching '${i.search}'`;break;case Et.ChangedOccurrences:n=`commits with changed occurrences matching '${i.search}'`;break;case Et.Files:n=`commits with files matching '${i.search}'`;break;case Et.Message:n=`commits with a message matching '${i.search}'`;break;case Et.Sha:n=`commits with an id matching '${i.search}'`}const a=go.showProgress(n);try{const e=yield Is.git.getLogForSearch(s,i.search,i.searchBy,{maxCount:i.maxCount});if(a.token.isCancellationRequested)return;const o=i.goBackCommand||new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to commit search`},Ut.ShowCommitSearch,[t,r]),h=yield go.show(e,n,a,{goBackCommand:o,showAllCommand:void 0!==e&&e.truncated?new Gi({label:"$(sync) Show All Commits",description:`${y.pad(V.Dash,2,3)} this may take a while`},Ut.ShowCommitSearch,[t,Object.assign({},i,{maxCount:0,goBackCommand:o})]):void 0,showInResultsExplorerCommand:void 0!==e?new Zi(e,n):void 0});if(void 0===h)return;return h instanceof Gi?h.execute():O.commands.executeCommand(Ut.ShowQuickCommitDetails,h.commit.toGitUri(),{sha:h.commit.sha,commit:h.commit,goBackCommand:new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,2)} to search for ${n}`},Ut.ShowCommitSearch,[t,i])})}catch(e){return se.error(e,"ShowCommitSearchCommand"),O.window.showErrorMessage("Unable to find commits. See output channel for more details")}finally{a.dispose()}})}}class zo extends $i{constructor(){super(Ut.ShowFileBlame)}execute(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)try{return void 0===o.type&&(o=Object.assign({},o,{type:Hs.get(Hs.name("blame")("file")("annotationType").value)})),Is.annotations.showAnnotations(e,o.type,void 0!==o.sha?o.sha:e.selection.active.line)}catch(e){return se.error(e,"ShowFileBlameCommand"),O.window.showErrorMessage("Unable to show file blame annotations. See output channel for more details")}})}}class Yo extends yi{constructor(){super(Ut.ShowLastQuickPick)}execute(){return r.__awaiter(this,void 0,void 0,function*(){const e=xi;if(void 0!==e)try{return O.commands.executeCommand(e.command,...e.args)}catch(e){return se.error(e,"ShowLastQuickPickCommand"),O.window.showErrorMessage("Unable to show last quick pick. See output channel for more details")}})}}class Xo extends $i{constructor(){super(Ut.ShowLineBlame)}execute(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)try{return void 0===o.type&&(o=Object.assign({},o,{type:Hs.get(Hs.name("blame")("line")("annotationType").value)})),Is.lineAnnotations.showAnnotations(e,o.type)}catch(e){return se.error(e,"ShowLineBlameCommand"),O.window.showErrorMessage("Unable to show line blame annotations. See output channel for more details")}})}}class Zo extends Si{constructor(){super(Ut.ShowQuickBranchHistory)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=(t=pi(t,e))&&(yield Te.fromUri(t));let s=void 0===(i=Object.assign({},i)).branch?void 0:po.showProgress(i.branch);try{const e=void 0===o?Is.git.getHighlanderRepoPath():o.repoPath;if(!e)return Ri.showNoRepositoryWarningMessage("Unable to show branch history");if(void 0===i.branch){const t=yield Is.git.getBranches(e),o=yield to.show(t,`Show history for branch${V.Ellipsis}`);if(void 0===o)return;if(o instanceof Gi)return o.execute();if(i.branch=o.branch.name,void 0===i.branch)return;s=po.showProgress(i.branch)}if(void 0===i.log&&(i.log=yield Is.git.getLog(e,{maxCount:i.maxCount,ref:o&&o.sha||i.branch}),void 0===i.log))return O.window.showWarningMessage("Unable to show branch history");if(void 0!==s&&s.token.isCancellationRequested)return;const r=yield po.show(i.log,o,i.branch,s,i.goBackCommand,i.nextPageCommand);if(void 0===r)return;if(r instanceof Gi)return r.execute();const n=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to ${V.Space}$(git-branch) ${i.branch} history`},Ut.ShowQuickBranchHistory,[t,Object.assign({},i)]);return O.commands.executeCommand(Ut.ShowQuickCommitDetails,r.commit.toGitUri(),{sha:r.commit.sha,commit:r.commit,repoLog:i.log,goBackCommand:n})}catch(e){return se.error(e,"ShowQuickBranchHistoryCommand"),O.window.showErrorMessage("Unable to show branch history. See output channel for more details")}finally{s&&s.dispose()}})}}class Jo extends Si{static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Ut.ShowQuickCommitDetails,t)}constructor(){super(Ut.ShowQuickCommitDetails)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return"view"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,vi(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;const o=yield Te.fromUri(t);let s=o.repoPath,r=_e.relative(s||"",o.fsPath);if(void 0===(i=Object.assign({},i)).sha){if(void 0===e)return;const t=e.selection.active.line;if(t<0)return;try{const e=yield Is.git.getBlameForLine(o,t);if(void 0===e)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to show commit details");if(e.commit.isUncommitted)return Ri.showLineUncommittedWarningMessage("Unable to show commit details");i.sha=e.commit.sha,s=e.commit.repoPath,r=e.commit.fileName,i.commit=e.commit}catch(e){return se.error(e,"ShowQuickCommitDetailsCommand",`getBlameForLine(${t})`),O.window.showErrorMessage("Unable to show commit details. See output channel for more details")}}try{if((void 0===i.commit||i.commit.isFile)&&(void 0!==i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),void 0===i.commit&&(i.repoLog=void 0)),void 0===i.repoLog)){const e=yield Is.git.getLog(s,{maxCount:2,ref:i.sha});if(void 0===e)return Ri.showCommitNotFoundWarningMessage("Unable to show commit details");i.commit=e.commits.get(i.sha)}if(void 0===i.commit)return Ri.showCommitNotFoundWarningMessage("Unable to show commit details");void 0===i.commit.workingFileName&&(i.commit.workingFileName=r),void 0===i.goBackCommand&&(i.goBackCommand=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to branch history`},Ut.ShowQuickCurrentBranchHistory,[i.commit.toGitUri()]));const e=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to details of ${V.Space}$(git-commit) ${i.commit.shortSha}`},Ut.ShowQuickCommitDetails,[i.commit.toGitUri(),i]),o=yield ho.show(i.commit,t,i.goBackCommand,e,i.repoLog);if(void 0===o)return;return o instanceof ro?O.commands.executeCommand(Ut.ShowQuickCommitFileDetails,o.commit.toGitUri(),{commit:o.commit,sha:o.sha,goBackCommand:e}):o.execute()}catch(e){return se.error(e,"ShowQuickCommitDetailsCommand"),O.window.showErrorMessage("Unable to show commit details. See output channel for more details")}})}}class es extends Si{static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Ut.ShowQuickCommitFileDetails,t)}constructor(){super(Ut.ShowQuickCommitFileDetails)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return"view"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,vi(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return;let o=i.commit&&i.commit.workingFileName;const s=yield Te.fromUri(t);if(void 0===(i=Object.assign({},i)).sha){if(void 0===e)return;const t=e.selection.active.line;if(t<0)return;try{const e=yield Is.git.getBlameForLine(s,t);if(void 0===e)return Ri.showFileNotUnderSourceControlWarningMessage("Unable to show commit file details");if(e.commit.isUncommitted)return Ri.showLineUncommittedWarningMessage("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit,o=_e.relative(i.commit.repoPath,s.fsPath)}catch(e){return se.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),O.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}}try{if((void 0===i.commit||!i.commit.isFile)&&(void 0!==i.commit&&(o=void 0),void 0!==i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),void 0===i.commit&&(i.fileLog=void 0)),void 0===i.fileLog&&(i.commit=yield Is.git.getLogCommitForFile(void 0===i.commit?s.repoPath:i.commit.repoPath,s.fsPath,{ref:i.sha}),void 0===i.commit)))return Ri.showCommitNotFoundWarningMessage("Unable to show commit file details");if(void 0===i.commit)return Ri.showCommitNotFoundWarningMessage("Unable to show commit file details");i.commit.workingFileName=o,[i.commit.workingFileName]=yield Is.git.findWorkingFileName(i.commit);const e=Ot.shortenSha(i.sha);void 0===i.goBackCommand&&(i.goBackCommand=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to details of ${V.Space}$(git-commit) ${e}`},Ut.ShowQuickCommitDetails,[i.commit.toGitUri(),{commit:i.commit,sha:i.sha}]));const r=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to details of ${V.Space}$(file-text) ${_e.basename(i.commit.fileName)} in ${V.Space}$(git-commit) ${e}`},Ut.ShowQuickCommitFileDetails,[i.commit.toGitUri(),i]),n=yield mo.show(i.commit,t,i.goBackCommand,r,i.fileLog);if(void 0===n)return;return n instanceof Gi?n.execute():void 0}catch(e){return se.error(e,"ShowQuickCommitFileDetailsCommand"),O.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}})}}class ts extends Si{constructor(){super(Ut.ShowQuickCurrentBranchHistory)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);try{const e=yield Is.git.getRepoPath(t);if(!e)return Ri.showNoRepositoryWarningMessage("Unable to show branch history");const o=yield Is.git.getBranch(e);if(void 0===o)return;return O.commands.executeCommand(Ut.ShowQuickBranchHistory,t,{branch:o.name,goBackCommand:i.goBackCommand})}catch(e){return se.error(e,"ShowQuickCurrentBranchHistoryCommand"),O.window.showErrorMessage("Unable to show branch history. See output channel for more details")}})}}class is extends Si{constructor(){super(Ut.ShowQuickFileHistory)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=pi(t,e)))return O.commands.executeCommand(Ut.ShowQuickCurrentBranchHistory);const o=yield Te.fromUri(t);i=Object.assign({},i);const s=`${o.getFormattedPath()}${o.sha?` ${y.pad(V.Dot,1,1)} ${o.shortSha}`:""}`,r=fo.showProgress(s);try{if(void 0===i.log&&(i.log=yield Is.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,range:i.range,ref:o.sha}),void 0===i.log))return Ri.showFileNotUnderSourceControlWarningMessage("Unable to show file history");if(r.token.isCancellationRequested)return;let e=void 0;if(i.log.truncated){const s=new Gi({label:"$(arrow-right) Show Next Commits",description:`${y.pad(V.Dash,2,3)} shows ${i.log.maxCount} newer commits`},Ut.ShowQuickFileHistory,[o,Object.assign({},i,{log:void 0})]),r=f.last(i.log.commits.values());null!=r&&(e=new Gi({label:"$(arrow-left) Show Previous Commits",description:`${y.pad(V.Dash,2,3)} shows ${i.log.maxCount} older commits`},Ut.ShowQuickFileHistory,[new Te(t,r),Object.assign({},i,{log:void 0,nextPageCommand:s})]))}const n=yield fo.show(i.log,o,s,{progressCancellation:r,goBackCommand:i.goBackCommand,nextPageCommand:i.nextPageCommand,previousPageCommand:e,showAllCommand:void 0!==i.log&&i.log.truncated?new Gi({label:"$(sync) Show All Commits",description:`${y.pad(V.Dash,2,3)} this may take a while`},Ut.ShowQuickFileHistory,[t,Object.assign({},i,{log:void 0,maxCount:0})]):void 0,showInResultsExplorerCommand:void 0!==i.log?new Xi(i.log,{label:s,resultsType:{singular:"commit",plural:"commits"}}):void 0});if(void 0===n)return;if(n instanceof Gi)return n.execute();const a=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to history of ${V.Space}$(file-text) ${_e.basename(n.commit.fileName)}${o.sha?` from ${V.Space}$(git-commit) ${o.shortSha}`:""}`},Ut.ShowQuickFileHistory,[t,i]);return O.commands.executeCommand(Ut.ShowQuickCommitFileDetails,n.commit.toGitUri(),{commit:n.commit,fileLog:i.log,sha:n.commit.sha,goBackCommand:a})}catch(e){return se.error(e,"ShowQuickFileHistoryCommand"),O.window.showErrorMessage("Unable to show file history. See output channel for more details")}finally{r.dispose()}})}}class os extends Si{constructor(){super(Ut.ShowQuickRepoStatus)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);try{const e=yield Is.git.getRepoPath(t);if(!e)return Ri.showNoRepositoryWarningMessage("Unable to show repository status");const o=yield Is.git.getStatusForRepo(e);if(void 0===o)return O.window.showWarningMessage("Unable to show repository status");const s=yield yo.show(o,i.goBackCommand);if(void 0===s)return;return s instanceof Gi?s.execute():void 0}catch(e){return se.error(e,"ShowQuickRepoStatusCommand"),O.window.showErrorMessage("Unable to show repository status. See output channel for more details")}})}}class ss extends Si{constructor(){super(Ut.ShowQuickStashList)}execute(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){t=pi(t,e);const o=_o.showProgress("list");try{const e=yield Is.git.getRepoPath(t);if(!e)return Ri.showNoRepositoryWarningMessage("Unable to show stashed changes");const s=yield Is.git.getStashList(e);if(void 0===s)return O.window.showWarningMessage("Unable to show stashed changes");if(o.token.isCancellationRequested)return;const r=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to stashed changes`},Ut.ShowQuickStashList,[t,{goBackCommand:i.goBackCommand}]),n=yield _o.show(s,"list",o,i.goBackCommand,r);if(void 0===n)return;return n instanceof Gi?n.execute():O.commands.executeCommand(Ut.ShowQuickCommitDetails,n.commit.toGitUri(),{commit:n.commit,sha:n.commit.sha,goBackCommand:r})}catch(e){return se.error(e,"ShowQuickStashListCommand"),O.window.showErrorMessage("Unable to show stashed changes. See output channel for more details")}finally{o.dispose()}})}}class rs extends yi{constructor(){super(Ut.StashApply)}preExecute(e,t={confirm:!0,deleteAfter:!1}){return r.__awaiter(this,void 0,void 0,function*(){return vi(e)?((t=Object.assign({},t)).stashItem=e.node.commit,this.execute(t)):this.execute(t)})}execute(e={confirm:!0,deleteAfter:!1}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===(e=Object.assign({},e)).stashItem||void 0===e.stashItem.stashName){let t,i=yield Is.git.getActiveRepoPath();if(!i){const o=yield wo.show(`Apply stashed changes from which repository${V.Ellipsis}`,e.goBackCommand);if(o instanceof Gi)return o.execute();if(void 0===o)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();t=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to pick another repository`},Ut.StashApply,[e]),i=o.repoPath}const o=_o.showProgress("apply");try{const s=yield Is.git.getStashList(i);if(void 0===s)return O.window.showInformationMessage("There are no stashed changes");if(o.token.isCancellationRequested)return;const r=new Gi({label:`go back ${V.ArrowBack}`,description:`${y.pad(V.Dash,2,3)} to apply stashed changes`},Ut.StashApply,[e]),n=yield _o.show(s,"apply",o,t||e.goBackCommand,r);if(n instanceof Gi)return n.execute();if(void 0===n)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.goBackCommand=r,e.stashItem=n.commit}finally{o.dispose()}}try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${V.Ellipsis}`:e.stashItem.message,i=yield O.window.showWarningMessage(`Apply stashed changes '${t}' to your working tree?`,{title:"Yes, delete after applying"},{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"No"===i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.deleteAfter="Yes"!==i.title}return yield Is.git.stashApply(e.stashItem.repoPath,e.stashItem.stashName,e.deleteAfter)}catch(e){return se.error(e,"StashApplyCommand"),e.message.includes("Your local changes to the following files would be overwritten by merge")?O.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten."):e.message.includes("Auto-merging")&&e.message.includes("CONFLICT")?O.window.showInformationMessage("Stash applied with conflicts"):O.window.showErrorMessage("Unable to apply stash. See output channel for more details")}})}}class ns extends yi{constructor(){super(Ut.StashDelete)}preExecute(e,t={confirm:!0}){return r.__awaiter(this,void 0,void 0,function*(){return vi(e)?((t=Object.assign({},t)).stashItem=e.node.commit,this.execute(t)):this.execute(t)})}execute(e={confirm:!0}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==(e=Object.assign({},e)).stashItem&&void 0!==e.stashItem.stashName&&void 0!==e.stashItem.repoPath){void 0===e.confirm&&(e.confirm=!0);try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${V.Ellipsis}`:e.stashItem.message,i=yield O.window.showWarningMessage(`Delete stashed changes '${t}'?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"Yes"!==i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute()}return yield Is.git.stashDelete(e.stashItem.repoPath,e.stashItem.stashName)}catch(e){return se.error(e,"StashDeleteCommand"),O.window.showErrorMessage("Unable to delete stash. See output channel for more details")}}})}}class as extends yi{constructor(){super(Ut.StashSave)}preExecute(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){return"scm-states"===e.type?((t=Object.assign({},t)).uris=e.scmResourceStates.map(e=>e.resourceUri),this.execute(t)):"scm-groups"===e.type?((t=Object.assign({},t)).uris=e.scmResourceGroups.reduce((e,t)=>e.concat(t.resourceStates.map(e=>e.resourceUri)),[]),this.execute(t)):this.execute(t)})}execute(e={}){return r.__awaiter(this,void 0,void 0,function*(){let t=yield Is.git.getHighlanderRepoPath();if(!t){const i=yield wo.show(`Stash changes for which repository${V.Ellipsis}`,e.goBackCommand);if(i instanceof Gi)return i.execute();if(void 0===i)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();t=i.repoPath}try{return null==e.message&&((e=Object.assign({},e)).message=yield O.window.showInputBox({prompt:"Please provide a stash message",placeHolder:"Stash message"}),void 0===e.message)?void 0===e.goBackCommand?void 0:e.goBackCommand.execute():yield Is.git.stashSave(t,e.message,e.uris)}catch(e){return se.error(e,"StashSaveCommand"),O.window.showErrorMessage("Unable to save stash. See output channel for more details")}})}}class hs extends $i{constructor(){super(Ut.ToggleCodeLens)}execute(e,t){return Is.codeLens.toggleCodeLens(e)}}class cs extends $i{constructor(){super(Ut.ToggleFileBlame)}execute(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e){if(void 0!==i&&!te.equals(i,e.document.uri)){const t=O.window.visibleTextEditors.find(e=>te.equals(i,e.document.uri));void 0!==t&&(e=t)}try{return void 0===o.type&&(o=Object.assign({},o,{type:Hs.get(Hs.name("blame")("file")("annotationType").value)})),Is.annotations.toggleAnnotations(e,o.type,void 0!==o.sha?o.sha:e.selection.active.line)}catch(e){return se.error(e,"ToggleFileBlameCommand"),O.window.showErrorMessage("Unable to toggle file blame annotations. See output channel for more details")}}})}}class ls extends $i{constructor(){super(Ut.ToggleFileHeatmap)}execute(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e){if(void 0!==i&&!te.equals(i,e.document.uri)){const t=O.window.visibleTextEditors.find(e=>te.equals(i,e.document.uri));void 0!==t&&(e=t)}try{return Is.annotations.toggleAnnotations(e,F.Heatmap)}catch(e){return se.error(e,"ToggleFileHeatmapCommand"),O.window.showErrorMessage("Unable to toggle heatmap annotations. See output channel for more details")}}})}}class ds extends $i{constructor(){super(Ut.ToggleFileRecentChanges)}execute(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e){if(void 0!==i&&!te.equals(i,e.document.uri)){const t=O.window.visibleTextEditors.find(e=>te.equals(i,e.document.uri));void 0!==t&&(e=t)}try{return Is.annotations.toggleAnnotations(e,F.RecentChanges)}catch(e){return se.error(e,"ToggleFileRecentChangesCommand"),O.window.showErrorMessage("Unable to toggle recent file changes annotations. See output channel for more details")}}})}}class us extends $i{constructor(){super(Ut.ToggleLineBlame)}execute(e,t,i,o={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)try{return void 0===o.type&&(o=Object.assign({},o,{type:Hs.get(Hs.name("blame")("line")("annotationType").value)})),Is.lineAnnotations.toggleAnnotations(e,o.type)}catch(e){return se.error(e,"ToggleLineBlameCommand"),O.window.showErrorMessage("Unable to toggle line blame annotations. See output channel for more details")}})}}const ms=/[`\>\#\*\_\-\+\.]/g;class gs{static applyHeatmap(e,t,i){const o=this.getHeatmapColor(i,t);e.renderOptions.before.borderColor=o}static getHeatmapColor(e,t){const i=u.dateDaysFromNow(t,e);return i<=2?"#ffeca7":i<=7?"#ffdd8c":i<=14?"#ffdd7c":i<=30?"#fba447":i<=60?"#f68736":i<=90?"#f37636":i<=180?"#ca6632":i<=365?"#c0513f":i<=730?"#a2503a":"#793738"}static getHoverCommandBar(e,t,i){let o=`[\`${V.DoubleArrowLeft}\`](${Do.getMarkdownCommandArgs(e)} "Open Changes") `;if(void 0!==e.previousSha){i===F.RecentChanges&&(i=F.Gutter);const t=Te.toRevisionUri(e.previousSha,e.previousUri.fsPath,e.repoPath),s=O.window.activeTextEditor.selection.active.line;o+=`[\`${V.SquareWithTopShadow}\`](${Wo.getMarkdownCommandArgs(t,i||F.Gutter,s)} "Blame Previous Revision") `}return t&&(o+=`[\`${V.ArrowUpRight}\`](${Io.getMarkdownCommandArgs(e.sha)} "Open in Remote") `),o+=`[\`${V.MiddleEllipsis}\`](${es.getMarkdownCommandArgs(e.sha)} "Show More Actions")`}static getHoverMessage(e,t,i,o){null===t&&(t="MMMM Do, YYYY h:MMa");let s="",r="",n="";e.isUncommitted?n=`\`${e.shortSha||"00000000"}\``:(r=`\n\n${this.getHoverCommandBar(e,i,o)}`,n=`[\`${e.shortSha}\`](${Jo.getMarkdownCommandArgs(e.sha)} "Show Commit Details")`,s=`\n\n> ${s=e.message.replace(ms,"\\$&").replace(/^===/gm,`${V.ZeroWidthSpace}===`).replace(/\n/g,"  \n")}`);const a=new O.MarkdownString(`${n} &nbsp; ![](${e.getGravatarUri(Is.config.defaultGravatarsStyle).toString()}) &nbsp;__${e.author}__, ${e.fromNow()} &nbsp; _(${e.formatDate(t)})_ ${s}${r}`);return a.isTrusted=!0,a}static getHoverDiffMessage(e,t,i){if(void 0===i||void 0===e.previousSha)return;const o=this.getCodeDiff(i);let s;s=e.isUncommitted?void 0!==t.sha&&Ot.isStagedUncommitted(t.sha)?`[\`Changes\`](${Do.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${V.Dash} &nbsp; [\`${e.previousShortSha}\`](${Jo.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${V.ArrowLeftRight} _${t.shortSha}_\n${o}`:`[\`Changes\`](${Do.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${V.Dash} &nbsp; _uncommitted_\n${o}`:`[\`Changes\`](${Do.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${V.Dash} &nbsp; [\`${e.previousShortSha}\`](${Jo.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${V.ArrowLeftRight} [\`${e.shortSha}\`](${Jo.getMarkdownCommandArgs(e.sha)} "Show Commit Details")\n${o}`;const r=new O.MarkdownString(s);return r.isTrusted=!0,r}static getCodeDiff(e){const t=void 0===e.previous?void 0:e.previous[0];return`\`\`\`\n-  ${void 0===t||void 0===t.line?"":t.line.trim()}\n+  ${void 0===e.line?"":e.line.trim()}\n\`\`\``}static changesHover(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){const o=!e.isUncommitted||void 0!==i.sha&&Ot.isStagedUncommitted(i.sha)?e.previousSha:void 0,s=yield Is.git.getDiffForLine(i,t,o);return{hoverMessage:this.getHoverDiffMessage(e,i,s)}})}static detailsHover(e,t,i,o){return{hoverMessage:this.getHoverMessage(e,t,i,o)}}static gutter(e,t,i,o){const s={renderOptions:{before:Object.assign({},o)}};e.isUncommitted&&(s.renderOptions.before.color=o.uncommittedColor);const r=Rt.fromTemplate(t,e,i);return s.renderOptions.before.contentText=y.pad(r.replace(/ /g,V.Space),1,1),s}static gutterRenderOptions(e,t,i,s){let r=0;for(const e of o.values(s.tokenOptions))if(void 0!==e){if(null==e.truncateTo){r=-1;break}r+=e.truncateTo}r>=0&&(r+=y.width(y.interpolate(i,void 0)))>0&&(r+=3);let n=void 0,a=void 0;return t.enabled&&(n="solid",a="left"===t.location?"0 0 0 2px":"0 2px 0 0"),{backgroundColor:new O.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:n,borderWidth:a,color:new O.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:e?"overline solid rgba(0, 0, 0, .2)":"none",width:r>=0?`${r}ch`:void 0,uncommittedColor:new O.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}static heatmap(e,t,i){const o={renderOptions:{before:Object.assign({},i)}};return gs.applyHeatmap(o,e.date,t),o}static heatmapRenderOptions(){return{borderStyle:"solid",borderWidth:"0 0 0 2px",contentText:V.ZeroWidthSpace,height:"100%",margin:"0 26px -1px 0"}}static hover(e,t,i){const o={renderOptions:{before:Object.assign({},t)}};return this.applyHeatmap(o,e.date,i),o}static hoverRenderOptions(e){return e.enabled?{borderStyle:"solid",borderWidth:"0 0 0 2px",contentText:V.ZeroWidthSpace,height:"100%",margin:"0 26px 0 0",textDecoration:"none"}:{before:void 0}}static trailing(e,t,i){const o=Rt.fromTemplate(t,e,{truncateMessageAtNewLine:!0,dateFormat:i});return{renderOptions:{after:{backgroundColor:new O.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new O.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:y.pad(o.replace(/ /g,V.Space),1,1),fontWeight:"normal",fontStyle:"normal"}}}}static withRange(e,t,i){let o=e.range;return void 0!==t&&(o=o.with({start:o.start.with({character:t})})),void 0!==i&&(o=o.with({end:o.end.with({character:i})})),Object.assign({},e,{range:o})}}class ps extends ie{constructor(e,t,i,o){super(e,t,i,o),this._uri=t.uri,this._blame=e.document.isDirty?Is.git.getBlameForFileContents(this._uri,e.document.getText()):Is.git.getBlameForFile(this._uri),e.document.isDirty&&t.setForceDirtyStateChangeOnNextDocumentChange()}clear(){const e=e=>super[e];return r.__awaiter(this,void 0,void 0,function*(){this._hoverProviderDisposable&&this._hoverProviderDisposable.dispose(),e("clear").call(this)})}onReset(e){const t=e=>super[e];return r.__awaiter(this,void 0,void 0,function*(){void 0!==this.editor&&(this._blame=this.editor.document.isDirty?Is.git.getBlameForFileContents(this._uri,this.editor.document.getText()):Is.git.getBlameForFile(this._uri)),t("onReset").call(this,e)})}selection(e,t){return r.__awaiter(this,void 0,void 0,function*(){if(!this.highlightDecoration)return;if(!(void 0!==t||(t=yield this._blame)&&t.lines.length))return;let i=void 0;if("string"==typeof e)i=e;else if("number"==typeof e){if(e>=0){const o=t.lines[e];i=o&&o.sha}}else i=f.first(t.commits.values()).sha;if(!i)return void this.editor.setDecorations(this.highlightDecoration,[]);const o=s.filterMap(t.lines,e=>e.sha===i?this.editor.document.validateRange(new O.Range(e.line,0,e.line,H)):void 0);this.editor.setDecorations(this.highlightDecoration,o)})}validate(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this._blame;return void 0!==e&&0!==e.lines.length})}getBlame(){return r.__awaiter(this,void 0,void 0,function*(){const e=yield this._blame;if(void 0!==e&&0!==e.lines.length)return e})}registerHoverProviders(e){if(!e.details&&!e.changes)return;const t=[];e.changes&&t.push(O.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),e.details&&t.push(O.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=O.Disposable.from(...t)}provideDetailsHover(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){const i=yield this.getCommitForHover(t);if(void 0===i)return;let o=void 0;i.isUncommitted||void 0!==(o=yield Is.git.getLogCommitForFile(i.repoPath,i.uri.fsPath,{ref:i.sha}))&&(o.previousFileName=i.previousFileName,o.previousSha=i.previousSha);const s=gs.getHoverMessage(o||i,Is.config.defaultDateFormat,yield Is.git.hasRemote(i.repoPath),Is.config.blame.file.annotationType);return new O.Hover(s,e.validateRange(new O.Range(t.line,0,t.line,H)))})}provideChangesHover(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){const i=yield this.getCommitForHover(t);if(void 0===i)return;const o=yield gs.changesHover(i,t.line,yield Te.fromUri(e.uri));return new O.Hover(o.hoverMessage,e.validateRange(new O.Range(t.line,0,t.line,H)))})}getCommitForHover(e){return r.__awaiter(this,void 0,void 0,function*(){const t=Is.config.blame.file.annotationType;if(!(t===F.Hover||t===F.Gutter&&Is.config.annotations.file.gutter.hover.wholeLine)&&0!==e.character)return;const i=yield this.getBlame();if(void 0===i)return;const o=i.lines[e.line];return i.commits.get(o.sha)})}}class fs extends ps{onProvideAnnotation(e,t){return r.__awaiter(this,void 0,void 0,function*(){this.annotationType=F.Gutter;const t=yield this.getBlame();if(void 0===t)return!1;const i=process.hrtime(),s=Is.config.annotations.file.gutter,r=y.getTokensFromTemplate(s.format).reduce((e,t)=>(e[t.key]=t.options,e),{}),n={dateFormat:null===s.dateFormat?Is.config.defaultDateFormat:s.dateFormat,tokenOptions:r},a=Date.now(),h=s.gravatars,c=Is.config.defaultGravatarsStyle,l=s.separateLines,d=gs.gutterRenderOptions(l,s.heatmap,s.format,n);this.decorations=[];const u=Object.create(null),m=h?Object.create(null):void 0;let g,p,f,v=!1;for(const e of t.lines){const i=e.line;f!==e.sha?(v=!1,f=e.sha,void 0!==(g=t.commits.get(e.sha))&&(void 0===(p=u[e.sha])?(p=gs.gutter(g,s.format,n,d),s.heatmap.enabled&&gs.applyHeatmap(p,g.date,a),p.range=new O.Range(i,0,i,0),this.decorations.push(p),h&&void 0!==g.email&&this.addOrUpdateGravatarDecoration(g,p.range,c,m),u[e.sha]=p):(p=Object.assign({},p,{range:new O.Range(i,0,i,0)}),this.decorations.push(p),h&&void 0!==g.email&&this.addOrUpdateGravatarDecoration(g,p.range,c,m)))):(p=Object.assign({},p),s.compact&&!v&&(p.renderOptions={before:Object.assign({},p.renderOptions.before,{contentText:V.Space.repeat(y.width(p.renderOptions.before.contentText))})},l&&(p.renderOptions.before.textDecoration="none"),v=!0),p.range=new O.Range(i,0,i,0),this.decorations.push(p))}if(this.decorations.length&&(this.editor.setDecorations(this.decoration,this.decorations),h))for(const e of(this.additionalDecorations=[],o.values(m)))this.additionalDecorations.push(e),this.editor.setDecorations(e.decoration,e.ranges);const w=process.hrtime(i);return se.log(`${1e3*w[0]+Math.floor(w[1]/1e6)} ms to compute gutter blame annotations`),this.registerHoverProviders(s.hover),this.selection(e,t),!0})}addOrUpdateGravatarDecoration(e,t,i,o){const s=o[e.email];void 0===s?o[e.email]={decoration:O.window.createTextEditorDecorationType({gutterIconPath:e.getGravatarUri(i),gutterIconSize:"16px 16px"}),ranges:[t]}:s.ranges.push(t)}}class vs extends ps{onProvideAnnotation(e,t){return r.__awaiter(this,void 0,void 0,function*(){this.annotationType=F.Heatmap;const t=yield this.getBlame();if(void 0===t)return!1;const i=process.hrtime(),o=Date.now(),s=gs.heatmapRenderOptions();this.decorations=[];const r=Object.create(null);let n,a;for(const e of t.lines){const i=e.line;void 0===(a=r[e.sha])?void 0!==(n=t.commits.get(e.sha))&&((a=gs.heatmap(n,o,s)).range=new O.Range(i,0,i,0),this.decorations.push(a),r[e.sha]=a):(a=Object.assign({},a,{range:new O.Range(i,0,i,0)}),this.decorations.push(a))}this.decorations.length&&this.editor.setDecorations(this.decoration,this.decorations);const h=process.hrtime(i);return se.log(`${1e3*h[0]+Math.floor(h[1]/1e6)} ms to compute heatmap annotations`),this.selection(e,t),!0})}}class ws extends ps{onProvideAnnotation(e){return r.__awaiter(this,void 0,void 0,function*(){this.annotationType=F.Hover;const t=Is.config.annotations.file.hover,i=yield this.getBlame();if(void 0===i)return!1;if(t.heatmap.enabled){const e=process.hrtime(),o=Date.now(),s=gs.hoverRenderOptions(t.heatmap);this.decorations=[];const r=Object.create(null);let n,a;for(const e of i.lines){const t=e.line;void 0===(a=r[e.sha])?void 0!==(n=i.commits.get(e.sha))&&((a=gs.hover(n,s,o)).range=new O.Range(t,0,t,0),this.decorations.push(a),r[e.sha]=a):(a=Object.assign({},a,{range:new O.Range(t,0,t,0)}),this.decorations.push(a))}this.decorations.length&&this.editor.setDecorations(this.decoration,this.decorations);const h=process.hrtime(e);se.log(`${1e3*h[0]+Math.floor(h[1]/1e6)} ms to compute hover blame annotations`)}return this.registerHoverProviders(t),this.selection(e,i),!0})}}class Cs extends ie{constructor(e,t,i,o){super(e,t,i,o)}onProvideAnnotation(e){return r.__awaiter(this,void 0,void 0,function*(){this.annotationType=F.RecentChanges;const e=yield Is.git.getRecentLogCommitForFile(this._uri.repoPath,this._uri.fsPath);if(void 0===e)return!1;const t=yield Is.git.getDiffForFile(this._uri,e.previousSha);if(void 0===t)return!1;const i=process.hrtime(),o=Is.config.annotations.file.recentChanges,s=Is.config.defaultDateFormat;for(const i of(this.decorations=[],t.chunks)){let t=i.currentPosition.start-2;for(const r of i.lines){if(void 0===r.line)continue;if(t++,"unchanged"===r.state)continue;const i=this.editor.document.validateRange(new O.Range(new O.Position(t,0),new O.Position(t,H)));o.hover.details&&this.decorations.push({hoverMessage:gs.getHoverMessage(e,s,yield Is.git.hasRemote(e.repoPath),Is.config.blame.file.annotationType),range:i});let n=void 0;o.hover.changes&&(n=gs.getHoverDiffMessage(e,this._uri,r)),this.decorations.push({hoverMessage:n,range:i})}}this.editor.setDecorations(this.highlightDecoration,this.decorations);const r=process.hrtime(i);return se.log(`${1e3*r[0]+Math.floor(r[1]/1e6)} ms to compute recent changes annotations`),!0})}selection(e){return r.__awaiter(this,void 0,void 0,function*(){})}validate(){return r.__awaiter(this,void 0,void 0,function*(){return!0})}}var bs,ys;!function(e){e.User="User",e.BlameabilityChanged="BlameabilityChanged",e.ColumnChanged="ColumnChanged",e.Disposing="Disposing",e.DocumentChanged="DocumentChanged",e.DocumentClosed="DocumentClosed"}(bs||(bs={})),function(e){e.Computing="computing",e.Computed="computed"}(ys||(ys={}));const _s={blameAnnotation:O.window.createTextEditorDecorationType({isWholeLine:!0,rangeBehavior:O.DecorationRangeBehavior.ClosedClosed,textDecoration:"none"}),blameHighlight:void 0,recentChangesAnnotation:void 0,recentChangesHighlight:void 0};class xs extends O.Disposable{constructor(){super(()=>this.dispose()),this._onDidToggleAnnotations=new O.EventEmitter,this._annotationProviders=new Map,this._keyboardScope=void 0,this._disposable=O.Disposable.from(Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}dispose(){this._annotationProviders.forEach((e,t)=>r.__awaiter(this,void 0,void 0,function*(){return yield this.clearCore(t,bs.Disposing)})),_s.blameAnnotation&&_s.blameAnnotation.dispose(),_s.blameHighlight&&_s.blameHighlight.dispose(),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=Hs.initializing(e);let i;if(t||Hs.changed(e,Hs.name("blame")("file")("lineHighlight").value)){_s.blameHighlight&&_s.blameHighlight.dispose();const e=(i=Hs.get()).blame.file.lineHighlight;e.enabled?_s.blameHighlight=O.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:O.OverviewRulerLane.Right,backgroundColor:e.locations.includes(N.Line)?new O.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(N.OverviewRuler)?new O.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(N.Gutter)?Is.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(N.Gutter)?Is.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}}):_s.blameHighlight=void 0}if(t||Hs.changed(e,Hs.name("recentChanges")("file")("lineHighlight").value)){_s.recentChangesHighlight&&_s.recentChangesHighlight.dispose(),void 0===i&&(i=Hs.get());const e=i.recentChanges.file.lineHighlight;_s.recentChangesHighlight=O.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:O.OverviewRulerLane.Right,backgroundColor:e.locations.includes(N.Line)?new O.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(N.OverviewRuler)?new O.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(N.Gutter)?Is.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(N.Gutter)?Is.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}})}if(!t&&(Hs.changed(e,Hs.name("blame")("file").value)||Hs.changed(e,Hs.name("recentChanges")("file").value)||Hs.changed(e,Hs.name("annotations")("file").value)))for(const e of(void 0===i&&(i=Hs.get()),this._annotationProviders.values()))void 0!==e&&(e.annotationType===F.RecentChanges?e.reset({decoration:_s.recentChangesAnnotation,highlightDecoration:_s.recentChangesHighlight}):e.annotationType===i.blame.file.annotationType?e.reset({decoration:_s.blameAnnotation,highlightDecoration:_s.blameHighlight}):this.showAnnotations(e.editor,i.blame.file.annotationType))}onActiveTextEditorChanged(e){if(void 0!==e&&!X(e))return;void 0===this.getProvider(e)?(z(G.AnnotationStatus,void 0),this.detachKeyboardHook()):(z(G.AnnotationStatus,ys.Computed),this.attachKeyboardHook())}onBlameStateChanged(e){if(e.blameable)return;const t=O.window.activeTextEditor;void 0!==t&&this.clear(t,bs.BlameabilityChanged)}onDirtyStateChanged(e){for(const[t,i]of this._annotationProviders)e.document.is(i.document)&&this.clearCore(t,bs.DocumentChanged)}onTextDocumentClosed(e){if(Is.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)i.document===e&&this.clearCore(t,bs.DocumentClosed)}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(void 0!==t)t.restore(e.textEditor);else{const t=f.find(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey,bs.ColumnChanged)}}onVisibleTextEditorsChanged(e){return r.__awaiter(this,void 0,void 0,function*(){let t;for(const i of e)void 0!==(t=this.getProvider(i))&&t.restore(i)})}clear(e,t=bs.User){return r.__awaiter(this,void 0,void 0,function*(){this.clearCore(ie.getCorrelationKey(e),t)})}getAnnotationType(e){return r.__awaiter(this,void 0,void 0,function*(){const t=this.getProvider(e);if(void 0===t)return;const i=yield Is.tracker.get(e.document);return void 0!==i&&i.isBlameable?t.annotationType:void 0})}getProvider(e){if(void 0!==e&&void 0!==e.document)return this._annotationProviders.get(ie.getCorrelationKey(e))}showAnnotations(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;if(!(yield Is.tracker.getOrAdd(e.document)).isBlameable)return!1;const o=this.getProvider(e);return void 0!==o&&o.annotationType===t?(yield o.selection(i),!0):O.window.withProgress({location:O.ProgressLocation.Window},s=>r.__awaiter(this,void 0,void 0,function*(){const r=e===O.window.activeTextEditor;yield z(G.AnnotationStatus,r?ys.Computing:void 0);const n=this.showAnnotationsCore(o,e,t,i,s),a=yield n;return r&&(yield z(G.AnnotationStatus,a?ys.Computed:void 0)),n}))})}toggleAnnotations(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==e){const i=yield Is.tracker.getOrAdd(e.document);if(t===F.RecentChanges&&!i.isTracked||!i.isBlameable)return!1}const o=this.getProvider(e);if(void 0===o)return this.showAnnotations(e,t,i);const s=o.annotationType!==t;return yield this.clearCore(o.correlationKey,bs.User),!!s&&this.showAnnotations(e,t,i)})}attachKeyboardHook(){return r.__awaiter(this,void 0,void 0,function*(){void 0===this._keyboardScope&&(this._keyboardScope=yield Is.keyboard.beginScope({escape:{onDidPressKey:e=>r.__awaiter(this,void 0,void 0,function*(){const e=O.window.activeTextEditor;void 0!==e&&(yield this.clear(e,bs.User))})}}))})}clearCore(e,t){return r.__awaiter(this,void 0,void 0,function*(){const i=this._annotationProviders.get(e);void 0!==i&&(se.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),yield i.dispose(),e===ie.getCorrelationKey(O.window.activeTextEditor)&&(yield z(G.AnnotationStatus,void 0),yield this.detachKeyboardHook()),0===this._annotationProviders.size&&(se.log("Remove all listener registrations for annotations"),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())})}detachKeyboardHook(){return r.__awaiter(this,void 0,void 0,function*(){void 0!==this._keyboardScope&&(yield this._keyboardScope.dispose(),this._keyboardScope=void 0)})}showAnnotationsCore(e,t,i,o,s){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==s){let e="annotations";switch(i){case F.Gutter:case F.Hover:e="blame annotations";break;case F.Heatmap:e="heatmap annotations";break;case F.RecentChanges:e="recent changes annotations"}s.report({message:`Computing ${e} for ${_e.basename(t.document.fileName)}`})}this.attachKeyboardHook();const r=yield Is.tracker.getOrAdd(t.document);let n=void 0;switch(i){case F.Gutter:n=new fs(t,r,_s.blameAnnotation,_s.blameHighlight);break;case F.Heatmap:n=new vs(t,r,_s.blameAnnotation,void 0);break;case F.Hover:n=new ws(t,r,_s.blameAnnotation,_s.blameHighlight);break;case F.RecentChanges:n=new Cs(t,r,void 0,_s.recentChangesHighlight)}return!(void 0===n||!(yield n.validate()))&&(void 0!==e&&(yield this.clearCore(e.correlationKey,bs.User)),this._annotationsDisposable||0!==this._annotationProviders.size||(se.log("Add listener registrations for annotations"),this._annotationsDisposable=O.Disposable.from(O.window.onDidChangeActiveTextEditor(p.debounce(this.onActiveTextEditorChanged,50),this),O.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),O.window.onDidChangeVisibleTextEditors(this.onVisibleTextEditorsChanged,this),O.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),Is.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),Is.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this))),this._annotationProviders.set(n.correlationKey,n),!!(yield n.provideAnnotation(o))&&(this._onDidToggleAnnotations.fire(),!0))})}}class Ss extends O.CodeLens{constructor(e,t,i,o,s,r,n,a){super(r,a),this.symbolKind=e,this.uri=t,this.blame=i,this.blameRange=o,this.isFullRange=s,this.desiredCommand=n}getBlame(){return this.blame&&this.blame()}}class $s extends O.CodeLens{constructor(e,t,i,o,s,r,n){super(r),this.symbolKind=e,this.uri=t,this.blame=i,this.blameRange=o,this.isFullRange=s,this.desiredCommand=n}getBlame(){return this.blame()}}class Ds{constructor(e,t,i){this._git=t,this._tracker=i,this._onDidChangeCodeLenses=new O.EventEmitter}get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(e){this._onDidChangeCodeLenses.fire()}provideCodeLenses(e,t){return r.__awaiter(this,void 0,void 0,function*(){const i=yield this._tracker.getOrAdd(e);if(!i.isBlameable)return[];let o=!1;if(e.isDirty)if(i.isDirtyIdle){const t=Hs.get(Hs.name("advanced")("blame")("sizeThresholdAfterEdit").value);t>0&&e.lineCount>t&&(o=!0)}else o=!0;const s=Hs.get(Hs.name("codeLens").value,e.uri);this._debug=s.debug;let r=s.perLanguageLocations&&s.perLanguageLocations.find(t=>void 0!==t.language&&t.language.toLowerCase()===e.languageId);null==r&&(r={language:void 0,locations:s.locations,customSymbols:s.customLocationSymbols}),r.customSymbols=null!=r.customSymbols?r.customSymbols=r.customSymbols.map(e=>e.toLowerCase()):[];const n=[],a=i.uri;let h,c;if(o)1===r.locations.length&&r.locations.includes($.Document)||(c=yield O.commands.executeCommand(j.ExecuteDocumentSymbolProvider,e.uri));else{if(t.isCancellationRequested)return n;if(1===r.locations.length&&r.locations.includes($.Document)?h=e.isDirty?yield this._git.getBlameForFileContents(a,e.getText()):yield this._git.getBlameForFile(a):[h,c]=yield Promise.all([e.isDirty?this._git.getBlameForFileContents(a,e.getText()):this._git.getBlameForFile(a),O.commands.executeCommand(j.ExecuteDocumentSymbolProvider,e.uri)]),void 0===h||0===h.lines.length)return n}if(t.isCancellationRequested)return n;const l=p.once(()=>e.validateRange(new O.Range(0,1e6,1e6,1e6))),d=o?{title:this.getDirtyTitle(s)}:void 0;if(void 0!==c&&(se.log("GitCodeLensProvider.provideCodeLenses:",`${c.length} symbol(s) found`),c.forEach(t=>this.provideCodeLens(n,e,t,r,l,h,a,s,o,d))),(r.locations.includes($.Document)||r.customSymbols.includes("file"))&&!r.customSymbols.includes("!file")&&!n.find(e=>0===e.range.start.line&&0===e.range.end.line)){const e=l();let t=void 0;(o||s.recentChange.enabled)&&(o||(t=p.once(()=>this._git.getBlameForRangeSync(h,a,e))),n.push(new Ss(O.SymbolKind.File,a,t,e,!0,new O.Range(0,0,0,e.start.character),s.recentChange.command,d))),!o&&s.authors.enabled&&(void 0===t&&(t=p.once(()=>this._git.getBlameForRangeSync(h,a,e))),n.push(new $s(O.SymbolKind.File,a,t,e,!0,new O.Range(0,1,0,e.start.character),s.authors.command)))}return n})}validateSymbolAndGetBlameRange(e,t,i){let o,s=!1;const r=O.SymbolKind[e.kind].toLowerCase();switch(e.kind){case O.SymbolKind.File:(t.locations.includes($.Containers)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`)),s&&(o=i());break;case O.SymbolKind.Package:(t.locations.includes($.Containers)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`)),s&&0===e.location.range.start.line&&0===e.location.range.end.line&&(o=i());break;case O.SymbolKind.Class:case O.SymbolKind.Interface:case O.SymbolKind.Module:case O.SymbolKind.Namespace:case O.SymbolKind.Struct:(t.locations.includes($.Containers)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`));break;case O.SymbolKind.Constructor:case O.SymbolKind.Enum:case O.SymbolKind.Function:case O.SymbolKind.Method:(t.locations.includes($.Blocks)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`));break;default:t.customSymbols.includes(r)&&(s=!t.customSymbols.includes(`!${r}`))}return s?o||e.location.range:void 0}provideCodeLens(e,t,i,o,s,r,n,a,h,c){const l=this.validateSymbolAndGetBlameRange(i,o,s);if(void 0===l)return;const d=t.lineAt(i.location.range.start);if(e.length&&e[e.length-1].range.start.line===d.lineNumber)return;let u,m=0;if((h||a.recentChange.enabled)&&(h||(u=p.once(()=>this._git.getBlameForRangeSync(r,n,l))),e.push(new Ss(i.kind,n,u,l,!1,d.range.with(new O.Position(d.range.start.line,m)),a.recentChange.command,c)),m++),a.authors.enabled){let o=!l.isSingleLine;if(!o&&"csharp"===t.languageId)switch(i.kind){case O.SymbolKind.File:break;case O.SymbolKind.Package:case O.SymbolKind.Module:case O.SymbolKind.Namespace:case O.SymbolKind.Class:case O.SymbolKind.Interface:case O.SymbolKind.Constructor:case O.SymbolKind.Method:case O.SymbolKind.Function:case O.SymbolKind.Enum:o=!0}o&&!h&&(void 0===u&&(u=p.once(()=>this._git.getBlameForRangeSync(r,n,l))),e.push(new $s(i.kind,n,u,l,!1,d.range.with(new O.Position(d.range.start.line,m)),a.authors.command)))}}resolveCodeLens(e,t){return e instanceof Ss?this.resolveGitRecentChangeCodeLens(e,t):e instanceof $s?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=f.first(i.commits.values());let s=`${o.author}, ${o.formattedDate}`;switch(this._debug&&(s+=` [${O.SymbolKind[e.symbolKind]}(${e.range.start.character}-${e.range.end.character}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${o.shortSha})]`),e.desiredCommand){case S.DiffWithPrevious:return this.applyDiffWithPreviousCommand(s,e,i,o);case S.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(s,e,i,o);case S.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(s,e,i,o);case S.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(s,e,i,o);case S.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(s,e,i,o);case S.ToggleFileBlame:return this.applyToggleFileBlameCommand(s,e,i);default:return e}}resolveGitAuthorsCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=i.authors.size;let s=`${o} ${o>1?"authors":"author"} (${f.first(i.authors.values()).name}${o>1?" and others":""})`;switch(this._debug&&(s+=` [${O.SymbolKind[e.symbolKind]}(${e.range.start.character}-${e.range.end.character}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${f.join(f.map(i.authors.values(),e=>e.name),", ")})]`),e.desiredCommand){case S.DiffWithPrevious:return this.applyDiffWithPreviousCommand(s,e,i);case S.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(s,e,i);case S.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(s,e,i);case S.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(s,e,i);case S.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(s,e,i);case S.ToggleFileBlame:return this.applyToggleFileBlameCommand(s,e,i);default:return e}}applyDiffWithPreviousCommand(e,t,i,o){if(void 0===o){const e=i.allLines[t.range.start.line];o=i.commits.get(e.sha)}return t.command={title:e,command:Ut.DiffWithPrevious,arguments:[O.Uri.file(t.uri.fsPath),{commit:o}]},t}applyShowQuickCommitDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":S.ShowQuickCommitDetails,arguments:[O.Uri.file(t.uri.fsPath),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCommitFileDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":S.ShowQuickCommitFileDetails,arguments:[O.Uri.file(t.uri.fsPath),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCurrentBranchHistoryCommand(e,t,i,o){return t.command={title:e,command:S.ShowQuickCurrentBranchHistory,arguments:[O.Uri.file(t.uri.fsPath)]},t}applyShowQuickFileHistoryCommand(e,t,i,o){return t.command={title:e,command:S.ShowQuickFileHistory,arguments:[O.Uri.file(t.uri.fsPath),{range:t.isFullRange?void 0:t.blameRange}]},t}applyToggleFileBlameCommand(e,t,i){return t.command={title:e,command:Ut.ToggleFileBlame,arguments:[O.Uri.file(t.uri.fsPath)]},t}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?Hs.get(Hs.name("strings")("codeLens")("unsavedChanges")("recentChangeAndAuthors").value):e.recentChange.enabled?Hs.get(Hs.name("strings")("codeLens")("unsavedChanges")("recentChangeOnly").value):Hs.get(Hs.name("strings")("codeLens")("unsavedChanges")("authorsOnly").value)}}Ds.selector=[{scheme:Q.File},{scheme:Q.Git},{scheme:Q.GitLensGit}];class ks extends O.Disposable{constructor(){super(()=>this.dispose()),this._disposable=O.Disposable.from(Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}dispose(){this._providerDisposable&&this._providerDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=Hs.initializing(e),i=Hs.name("codeLens").value;if(t||Hs.changed(e,i,null)||Hs.changed(e,Hs.name("defaultDateStyle").value)||Hs.changed(e,Hs.name("defaultDateFormat").value)){t||se.log("CodeLens config changed; resetting CodeLens provider");const e=Hs.get(i);e.enabled&&(e.recentChange.enabled||e.authors.enabled)?void 0!==this._provider?this._provider.reset():this.createProvider():(void 0!==this._providerDisposable&&(this._providerDisposable.dispose(),this._providerDisposable=void 0),this._provider=void 0),this._canToggle=e.recentChange.enabled||e.authors.enabled,z(G.CanToggleCodeLens,this._canToggle)}}onBlameStateChanged(e){void 0!==this._provider&&e.blameable&&(se.log("Blame state changed; resetting CodeLens provider"),this._provider.reset("saved"))}onDirtyIdleTriggered(e){if(void 0===this._provider||!e.document.isBlameable)return;const t=Hs.get(Hs.name("advanced")("blame")("sizeThresholdAfterEdit").value);t>0&&e.document.lineCount>t||(se.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset("idle"))}toggleCodeLens(e){if(this._canToggle){if(se.log("toggleCodeLens()"),void 0!==this._provider)return void 0!==this._providerDisposable&&(this._providerDisposable.dispose(),this._providerDisposable=void 0),void(this._provider=void 0);this.createProvider()}}createProvider(){this._provider=new Ds(Is.context,Is.git,Is.tracker),this._providerDisposable=O.Disposable.from(O.languages.registerCodeLensProvider(Ds.selector,this._provider),Is.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),Is.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}}class Ps extends O.Disposable{constructor(){super(()=>this.dispose()),this._onDidChangeActiveLine=new O.EventEmitter}get onDidChangeActiveLine(){return this._onDidChangeActiveLine.event}dispose(){this.stop()}onActiveTextEditorChanged(e){this._editor!==e&&(void 0===e||X(e))&&(this.reset(),this._editor=e,this._line=void 0!==e?e.selection.active.line:void 0,this.fireLineChanged({editor:e,line:this._line,reason:"editor"}))}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!X(e.textEditor))return;const t=this._editor===e.textEditor?"line":"editor",i=e.selections[0].active.line;this._editor===e.textEditor&&this._line===i||(this.reset(),this._editor=e.textEditor,this._line=i,this.fireLineChanged({editor:this._editor,line:this._line,reason:t}))}get line(){return this._line}reset(){this.state=void 0}start(){void 0===this._disposable&&(this._disposable=O.Disposable.from(O.window.onDidChangeActiveTextEditor(p.debounce(this.onActiveTextEditorChanged,0),this),O.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this)),setImmediate(()=>this.onActiveTextEditorChanged(O.window.activeTextEditor)))}stop(){void 0!==this._disposable&&(void 0!==this._lineChangedDebounced&&this._lineChangedDebounced.cancel(),this._disposable.dispose(),this._disposable=void 0)}fireLineChanged(e){void 0!==e.line?(void 0===this._lineChangedDebounced&&(this._lineChangedDebounced=p.debounce(e=>{O.window.activeTextEditor===e.editor&&e.line===(e.editor&&e.editor.selection.active.line)&&this._onDidChangeActiveLine.fire(e)},250,{track:!0})),this._lineChangedDebounced.pending()||this._onDidChangeActiveLine.fire(Object.assign({},e,{pending:!0})),this._lineChangedDebounced(e)):setImmediate(()=>{O.window.activeTextEditor===e.editor&&(void 0!==this._lineChangedDebounced&&this._lineChangedDebounced.cancel(),this._onDidChangeActiveLine.fire(e))})}}const Fs=O.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:O.DecorationRangeBehavior.ClosedClosed});class Rs{constructor(e,t){this._enabled=e,this._annotationType=t}get annotationType(){return this._annotationType}get enabled(){return!this.suspended&&this._enabled}get suspended(){return void 0!==this._suspendReason}reset(e,t){return!(this._enabled===e&&this._annotationType===t&&!this.suspended)&&(this._enabled=e,this._annotationType=t,this._suspendReason=void 0,!0)}resume(e){const t=void 0!==this._suspendReason;return this._suspendReason=void 0,t}suspend(e){const t=void 0===this._suspendReason;return this._suspendReason=e,t}}class Ts extends O.Disposable{constructor(){super(()=>this.dispose()),this._lineTracker=new Ps,this._disposable=O.Disposable.from(this._lineTracker,Hs.onDidChange(this.onConfigurationChanged,this),Is.annotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),O.debug.onDidStartDebugSession(this.onDebugSessionStarted,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}dispose(){this.clearAnnotations(this._editor),this.unregisterHoverProviders(),this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),this._lineTrackingDisposable&&this._lineTrackingDisposable.dispose(),this._statusBarItem&&this._statusBarItem.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=Hs.initializing(e),i=Hs.get();let o=!1;if((t||Hs.changed(e,Hs.name("blame")("line").value))&&(o=!0,this._blameAnnotationState=void 0),(t||Hs.changed(e,Hs.name("annotations")("line")("trailing").value)||Hs.changed(e,Hs.name("annotations")("line")("hover").value))&&(o=!0,this.unregisterHoverProviders()),t||Hs.changed(e,Hs.name("statusBar").value))if(o=!0,i.statusBar.enabled){const e="left"!==i.statusBar.alignment?O.StatusBarAlignment.Right:O.StatusBarAlignment.Left;void 0!==this._statusBarItem&&this._statusBarItem.alignment!==e&&(this._statusBarItem.dispose(),this._statusBarItem=void 0),this._statusBarItem=this._statusBarItem||O.window.createStatusBarItem(e,e===O.StatusBarAlignment.Right?1e3:0),this._statusBarItem.command=i.statusBar.command}else void 0!==this._statusBarItem&&(this._statusBarItem.dispose(),this._statusBarItem=void 0);if(!o)return;i.statusBar.enabled||i.blame.line.enabled||void 0!==this._blameAnnotationState&&this._blameAnnotationState.enabled?(this._lineTracker.start(),this._lineTrackingDisposable=this._lineTrackingDisposable||O.Disposable.from(this._lineTracker.onDidChangeActiveLine(this.onActiveLineChanged,this),Is.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),Is.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),Is.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))):(this._lineTracker.stop(),void 0!==this._lineTrackingDisposable&&(this._lineTrackingDisposable.dispose(),this._lineTrackingDisposable=void 0)),this.refresh(O.window.activeTextEditor,{full:!0})}onActiveLineChanged(e){e.pending||void 0===e.line?this.clear(e.editor):this.refresh(e.editor)}onBlameStateChanged(e){e.blameable?this.refresh(e.editor):this.clear(e.editor)}onDebugSessionStarted(){this.suspendBlameAnnotations("debugging",O.window.activeTextEditor)&&(this._debugSessionEndDisposable=O.debug.onDidTerminateDebugSession(this.onDebugSessionEnded,this))}onDebugSessionEnded(){void 0!==this._debugSessionEndDisposable&&(this._debugSessionEndDisposable.dispose(),this._debugSessionEndDisposable=void 0),this.resumeBlameAnnotations("debugging",O.window.activeTextEditor)}onDirtyIdleTriggered(e){const t=Hs.get(Hs.name("advanced")("blame")("sizeThresholdAfterEdit").value);t>0&&e.document.lineCount>t||this.resumeBlameAnnotations("dirty",O.window.activeTextEditor)}onDirtyStateChanged(e){return r.__awaiter(this,void 0,void 0,function*(){e.dirty?this.suspendBlameAnnotations("dirty",O.window.activeTextEditor):this.resumeBlameAnnotations("dirty",O.window.activeTextEditor,{force:!0})})}onFileAnnotationsToggled(){this.refresh(O.window.activeTextEditor)}clear(e){return r.__awaiter(this,void 0,void 0,function*(){this._editor!==e&&void 0!==this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e),this._lineTracker.reset(),this.unregisterHoverProviders(),this._statusBarItem&&this._statusBarItem.hide()})}provideDetailsHover(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===this._editor||this._editor.document!==e)return;if(this._lineTracker.line!==t.line)return;const i=void 0!==this._lineTracker.state?this._lineTracker.state.commit:void 0;if(void 0===i)return;const o=yield Is.annotations.getAnnotationType(this._editor);if(o===F.Gutter&&Is.config.annotations.file.gutter.hover.details||o===F.Hover&&Is.config.annotations.file.hover.details)return;const s=this.getBlameAnnotationState(),r=s.annotationType===B.Hover||s.annotationType===B.Trailing&&Is.config.annotations.line.trailing.hover.wholeLine||o===F.Hover||o===F.Gutter&&Is.config.annotations.file.gutter.hover.wholeLine,n=e.validateRange(new O.Range(t.line,r?0:H,t.line,H));if(!r&&n.start.character!==t.character)return;let a=void 0!==this._lineTracker.state?this._lineTracker.state.logCommit:void 0;void 0!==a||i.isUncommitted||void 0!==(a=yield Is.git.getLogCommitForFile(i.repoPath,i.uri.fsPath,{ref:i.sha}))&&(a.previousSha=i.previousSha,a.previousFileName=i.previousFileName,void 0!==this._lineTracker.state&&(this._lineTracker.state.logCommit=a));const h=yield Is.tracker.get(e);if(void 0===h)return;const c=gs.getHoverMessage(a||i,Is.config.defaultDateFormat,h.hasRemotes,Is.config.blame.file.annotationType);return new O.Hover(c,n)})}provideChangesHover(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===this._editor||this._editor.document!==e)return;if(this._lineTracker.line!==t.line)return;const i=void 0!==this._lineTracker.state?this._lineTracker.state.commit:void 0;if(void 0===i)return;const o=yield Is.annotations.getAnnotationType(this._editor);if(o===F.Gutter&&Is.config.annotations.file.gutter.hover.changes||o===F.Hover&&Is.config.annotations.file.hover.changes)return;const s=this.getBlameAnnotationState(),r=s.annotationType===B.Hover||s.annotationType===B.Trailing&&Is.config.annotations.line.trailing.hover.wholeLine||o===F.Hover||o===F.Gutter&&Is.config.annotations.file.gutter.hover.wholeLine,n=e.validateRange(new O.Range(t.line,r?0:H,t.line,H));if(!r&&n.start.character!==t.character)return;const a=yield Is.tracker.get(e);if(void 0===a)return;const h=yield gs.changesHover(i,t.line,a.uri);return void 0!==h.hoverMessage?new O.Hover(h.hoverMessage,n):void 0})}show(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){if(void 0!==i.document){if(i.document.isDirty){const e=yield Is.tracker.get(i.document);void 0!==e&&e.setForceDirtyStateChangeOnNextDocumentChange()}this.updateStatusBar(e,i),this.updateTrailingAnnotation(e,t,i,o)}})}showAnnotations(e,t){return r.__awaiter(this,void 0,void 0,function*(){this.setBlameAnnotationState(!0,t,e)})}toggleAnnotations(e,t){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;const i=this.getBlameAnnotationState();this.setBlameAnnotationState(!i.enabled,t,e)})}resumeBlameAnnotations(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){if(!(i.force||void 0!==this._blameAnnotationState&&this._blameAnnotationState.suspended))return;let o=!1;void 0!==this._blameAnnotationState&&(o=this._blameAnnotationState.resume(e)),void 0!==t&&(i.force||o)&&(yield this.refresh(t))})}suspendBlameAnnotations(e,t,i={}){return r.__awaiter(this,void 0,void 0,function*(){const o=this.getBlameAnnotationState();if(void 0===this._blameAnnotationState&&!o.enabled)return!1;void 0===this._blameAnnotationState&&(this._blameAnnotationState=new Rs(o.enabled,o.annotationType));const s=this._blameAnnotationState.suspend(e);return void 0!==t&&(i.force||s)?(yield this.refresh(t),!0):void 0})}setBlameAnnotationState(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){let o=!0;void 0===this._blameAnnotationState?this._blameAnnotationState=new Rs(e,t):o=this._blameAnnotationState.reset(e,t),void 0!==i&&o&&(yield this.refresh(i))})}clearAnnotations(e){void 0!==e&&e.setDecorations(Fs,[])}getBlameAnnotationState(){return void 0!==this._blameAnnotationState?this._blameAnnotationState:{enabled:Is.config.blame.line.enabled||Is.config.statusBar.enabled,annotationType:Is.config.blame.line.annotationType}}refresh(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e&&void 0===this._editor)return;if(void 0===e||void 0===this._lineTracker.line)return void this.clear(this._editor);this._editor!==e&&(t.full=!0,this.clearAnnotations(this._editor),this._editor=e);const i=this.getBlameAnnotationState();if(i.enabled&&(void 0===t.trackedDocument&&(t.trackedDocument=yield Is.tracker.getOrAdd(e.document)),t.trackedDocument.isBlameable))return i.enabled&&(t.full||void 0===this._hoverProviderDisposable)&&this.registerHoverProviders(e,i.annotationType===B.Trailing?Is.config.annotations.line.trailing.hover:Is.config.annotations.line.hover),void 0===this._updateBlameDebounced&&(this._updateBlameDebounced=p.debounce(this.updateBlame,50,{track:!0})),void this._updateBlameDebounced(this._lineTracker.line,e,t.trackedDocument);yield this.clear(e)})}registerHoverProviders(e,t){if(this.unregisterHoverProviders(),void 0===e)return;if(!t.details&&!t.changes)return;const i=[];t.changes&&i.push(O.languages.registerHoverProvider({pattern:e.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.details&&i.push(O.languages.registerHoverProvider({pattern:e.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=O.Disposable.from(...i)}unregisterHoverProviders(){void 0!==this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}updateBlame(e,t,i){return r.__awaiter(this,void 0,void 0,function*(){if(this._lineTracker.reset(),this._lineTracker.line!==e||this._updateBlameDebounced.pending())return;const o=t.document.isDirty?yield Is.git.getBlameForLineContents(i.uri,e,t.document.getText()):yield Is.git.getBlameForLine(i.uri,e);let s,r;this._lineTracker.line===e&&i.isBlameable&&!this._updateBlameDebounced.pending()&&(this.getBlameAnnotationState().enabled&&(r=void 0===o?void 0:o.line,s=void 0===o?void 0:o.commit));void 0===this._lineTracker.state&&(this._lineTracker.state=new ae(s)),void 0===s||void 0===r?this.clear(t):this.show(s,r,t,e)})}updateStatusBar(e,t){const i=Is.config.statusBar;if(i.enabled&&void 0!==this._statusBarItem&&X(t)){switch(this._statusBarItem.text=`$(git-commit) ${Rt.fromTemplate(i.format,e,{truncateMessageAtNewLine:!0,dateFormat:null===i.dateFormat?Is.config.defaultDateFormat:i.dateFormat})}`,i.command){case U.ToggleFileBlame:this._statusBarItem.tooltip="Toggle Blame Annotations";break;case U.DiffWithPrevious:this._statusBarItem.command=Ut.DiffLineWithPrevious,this._statusBarItem.tooltip="Compare Line Revision with Previous";break;case U.DiffWithWorking:this._statusBarItem.command=Ut.DiffLineWithWorking,this._statusBarItem.tooltip="Compare Line Revision with Working";break;case U.ToggleCodeLens:this._statusBarItem.tooltip="Toggle Git CodeLens";break;case U.ShowQuickCommitDetails:this._statusBarItem.tooltip="Show Commit Details";break;case U.ShowQuickCommitFileDetails:this._statusBarItem.tooltip="Show Line Commit Details";break;case U.ShowQuickFileHistory:this._statusBarItem.tooltip="Show File History";break;case U.ShowQuickCurrentBranchHistory:this._statusBarItem.tooltip="Show Branch History"}this._statusBarItem.show()}}updateTrailingAnnotation(e,t,i,o){return r.__awaiter(this,void 0,void 0,function*(){const s=Is.config.blame.line;if(!s.enabled||s.annotationType!==B.Trailing||!X(i))return;o=void 0===o?t.line:o;const r=Is.config.annotations.line.trailing,n=gs.trailing(e,r.format,null===r.dateFormat?Is.config.defaultDateFormat:r.dateFormat);n.range=i.document.validateRange(new O.Range(o,H,o,H)),i.setDecorations(Fs,[n])})}}class Es extends O.Disposable{constructor(){super(()=>this.dispose()),this._onDidChangeAutoRefresh=new O.EventEmitter,this._onDidChangeTreeData=new O.EventEmitter,Is.explorerCommands,O.commands.registerCommand("gitlens.gitExplorer.refresh",this.refresh,this),O.commands.registerCommand("gitlens.gitExplorer.refreshNode",this.refreshNode,this),O.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToAuto",()=>this.setFilesLayout(P.Auto),this),O.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToList",()=>this.setFilesLayout(P.List),this),O.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToTree",()=>this.setFilesLayout(P.Tree),this),O.commands.registerCommand("gitlens.gitExplorer.setAutoRefreshToOn",()=>this.setAutoRefresh(Is.config.gitExplorer.autoRefresh,!0),this),O.commands.registerCommand("gitlens.gitExplorer.setAutoRefreshToOff",()=>this.setAutoRefresh(Is.config.gitExplorer.autoRefresh,!1),this),O.commands.registerCommand("gitlens.gitExplorer.switchToHistoryView",()=>this.switchTo(R.History),this),O.commands.registerCommand("gitlens.gitExplorer.switchToRepositoryView",()=>this.switchTo(R.Repository),this),Is.context.subscriptions.push(O.window.onDidChangeActiveTextEditor(p.debounce(this.onActiveEditorChanged,500),this),O.window.onDidChangeVisibleTextEditors(p.debounce(this.onVisibleEditorsChanged,500),this),Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}dispose(){this._disposable&&this._disposable.dispose()}onActiveEditorChanged(e){return r.__awaiter(this,void 0,void 0,function*(){if(this._view!==R.History)return;const t=yield this.getRootNode(e);this.setRoot(t)&&this.refresh(Bt.ActiveEditorChanged,t)})}onConfigurationChanged(e){return r.__awaiter(this,void 0,void 0,function*(){const t=Hs.initializing(e);if(!t&&!Hs.changed(e,Hs.name("gitExplorer").value)&&!Hs.changed(e,Hs.name("defaultGravatarsStyle").value))return;(t||Hs.changed(e,Hs.name("gitExplorer")("enabled").value))&&z(G.GitExplorer,this.config.enabled),(t||Hs.changed(e,Hs.name("gitExplorer")("autoRefresh").value))&&this.setAutoRefresh(Is.config.gitExplorer.autoRefresh);let i=this.config.view;i===R.Auto&&(i=Is.context.workspaceState.get(q.GitExplorerView,R.Repository)),t?(this._view=i,z(G.GitExplorerView,this._view),this.setRoot(yield this.getRootNode(O.window.activeTextEditor)),this._disposable=O.window.registerTreeDataProvider("gitlens.gitExplorer",this)):this.reset(i)})}onRepositoriesChanged(){this._view===R.Repository&&(this.clearRoot(),se.log(`GitExplorer[view=${this._view}].onRepositoriesChanged`),this.refresh(Bt.RepoChanged))}onVisibleEditorsChanged(e){void 0!==this._root&&this._view===R.History&&(0!==e.length&&e.some(e=>e.document&&Is.git.isTrackable(e.document.uri))||(this.clearRoot(),this.refresh(Bt.VisibleEditorsChanged)))}get autoRefresh(){return this.config.autoRefresh&&Is.context.workspaceState.get(q.GitExplorerAutoRefresh,!0)}get config(){return Is.config.gitExplorer}getChildren(e){return r.__awaiter(this,void 0,void 0,function*(){return void 0!==this._loading&&(yield this._loading,this._loading=void 0),void 0===this._root?this._view===R.History?[new Mt(`No active file ${V.Dash} no history to show`)]:[new Mt("No repositories found")]:void 0===e?this._root.getChildren():e.getChildren()})}getTreeItem(e){return r.__awaiter(this,void 0,void 0,function*(){return e.getTreeItem()})}getRootNode(e){return r.__awaiter(this,void 0,void 0,function*(){switch(this._view){case R.History:{const t=this.getHistoryNode(e||O.window.activeTextEditor);return this._loading=t.then(e=>p.wait(0)),t}default:{const e=Is.git.getRepositories();this._loading=e.then(e=>p.wait(0));const t=[...yield e];if(0===t.length)return;if(1===t.length){const e=t[0];return new ri(Te.fromRepoPath(e.path),e,this,!0)}return new gi(t,this)}}})}getHistoryNode(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===e||0===O.window.visibleTextEditors.length||!O.window.visibleTextEditors.some(e=>e.document&&Is.git.isTrackable(e.document.uri)))return;if(void 0===e.document||!Is.git.isTrackable(e.document.uri))return this._root;const t=yield Te.fromUri(e.document.uri),i=yield Is.git.getRepository(t);return void 0!==i?te.equals(t,this._root&&this._root.uri)?this._root:new mi(t,i,this):void 0})}getQualifiedCommand(e){return`gitlens.gitExplorer.${e}`}refresh(e,t){return r.__awaiter(this,void 0,void 0,function*(){void 0===e&&(e=Bt.Command),se.log(`GitExplorer[view=${this._view}].refresh`,`reason='${e}'`),(void 0===this._root||void 0===t&&this._view===R.History)&&(this.clearRoot(),this.setRoot(yield this.getRootNode(O.window.activeTextEditor))),this._onDidChangeTreeData.fire()})}refreshNode(e,t){se.log(`GitExplorer[view=${this._view}].refreshNode`),void 0!==t&&e.supportsPaging&&(e.maxCount=t.maxCount),this._onDidChangeTreeData.fire(e===this._root?void 0:e)}reset(e,t=!1){return r.__awaiter(this,void 0,void 0,function*(){this.setView(e),t&&void 0!==this._root&&this.clearRoot(),(this.setRoot(yield this.getRootNode(O.window.activeTextEditor))||t)&&this.refresh(Bt.ViewChanged)})}clearRoot(){void 0!==this._root&&(this._root.dispose(),this._root=void 0)}setFilesLayout(e){return r.__awaiter(this,void 0,void 0,function*(){return Hs.update(Hs.name("gitExplorer")("files")("layout").value,e,O.ConfigurationTarget.Global)})}setRoot(e){return this._root!==e&&(void 0!==this._root&&this._root.dispose(),this._root=e,!0)}setView(e){this._view!==e&&(Is.config.gitExplorer.view===R.Auto&&Is.context.workspaceState.update(q.GitExplorerView,e),this._view=e,z(G.GitExplorerView,this._view),e!==R.Repository&&Is.git.stopWatchingFileSystem())}switchTo(e){return r.__awaiter(this,void 0,void 0,function*(){this._view!==e&&this.reset(e,!0)})}setAutoRefresh(e,t){return r.__awaiter(this,void 0,void 0,function*(){void 0!==this._autoRefreshDisposable&&(this._autoRefreshDisposable.dispose(),this._autoRefreshDisposable=void 0);let i=!1;e&&(void 0===t?t=Is.context.workspaceState.get(q.GitExplorerAutoRefresh,!0):(i=t,yield Is.context.workspaceState.update(q.GitExplorerAutoRefresh,t),this._onDidChangeAutoRefresh.fire()),t&&(this._autoRefreshDisposable=Is.git.onDidChangeRepositories(this.onRepositoriesChanged,this),Is.context.subscriptions.push(this._autoRefreshDisposable))),z(G.GitExplorerAutoRefresh,e&&t),i&&this.refresh(Bt.AutoRefreshChanged)})}}class Bs extends O.Disposable{constructor(){super(()=>this.dispose()),O.commands.registerCommand("gitlens.explorers.openChanges",this.openChanges,this),O.commands.registerCommand("gitlens.explorers.openChangesWithWorking",this.openChangesWithWorking,this),O.commands.registerCommand("gitlens.explorers.openFile",this.openFile,this),O.commands.registerCommand("gitlens.explorers.openFileRevision",this.openFileRevision,this),O.commands.registerCommand("gitlens.explorers.openFileRevisionInRemote",this.openFileRevisionInRemote,this),O.commands.registerCommand("gitlens.explorers.openChangedFiles",this.openChangedFiles,this),O.commands.registerCommand("gitlens.explorers.openChangedFileChanges",this.openChangedFileChanges,this),O.commands.registerCommand("gitlens.explorers.openChangedFileChangesWithWorking",this.openChangedFileChangesWithWorking,this),O.commands.registerCommand("gitlens.explorers.openChangedFileRevisions",this.openChangedFileRevisions,this),O.commands.registerCommand("gitlens.explorers.applyChanges",this.applyChanges,this),O.commands.registerCommand("gitlens.explorers.compareSelectedAncestorWithWorking",this.compareSelectedAncestorWithWorking,this),O.commands.registerCommand("gitlens.explorers.compareWithHead",this.compareWithHead,this),O.commands.registerCommand("gitlens.explorers.compareWithRemote",this.compareWithRemote,this),O.commands.registerCommand("gitlens.explorers.compareWithSelected",this.compareWithSelected,this),O.commands.registerCommand("gitlens.explorers.compareWithWorking",this.compareWithWorking,this),O.commands.registerCommand("gitlens.explorers.selectForCompare",this.selectForCompare,this),O.commands.registerCommand("gitlens.explorers.terminalCheckoutBranch",this.terminalCheckoutBranch,this),O.commands.registerCommand("gitlens.explorers.terminalCreateBranch",this.terminalCreateBranch,this),O.commands.registerCommand("gitlens.explorers.terminalDeleteBranch",this.terminalDeleteBranch,this),O.commands.registerCommand("gitlens.explorers.terminalMergeBranch",this.terminalMergeBranch,this),O.commands.registerCommand("gitlens.explorers.terminalRebaseBranch",this.terminalRebaseBranch,this),O.commands.registerCommand("gitlens.explorers.terminalRebaseBranchToRemote",this.terminalRebaseBranchToRemote,this),O.commands.registerCommand("gitlens.explorers.terminalSquashBranchIntoCommit",this.terminalSquashBranchIntoCommit,this),O.commands.registerCommand("gitlens.explorers.terminalCherryPickCommit",this.terminalCherryPickCommit,this),O.commands.registerCommand("gitlens.explorers.terminalRebaseCommit",this.terminalRebaseCommit,this),O.commands.registerCommand("gitlens.explorers.terminalResetCommit",this.terminalResetCommit,this),O.commands.registerCommand("gitlens.explorers.terminalRevertCommit",this.terminalRevertCommit,this),O.commands.registerCommand("gitlens.explorers.terminalRemoveRemote",this.terminalRemoveRemote,this),O.commands.registerCommand("gitlens.explorers.terminalCreateTag",this.terminalCreateTag,this),O.commands.registerCommand("gitlens.explorers.terminalDeleteTag",this.terminalDeleteTag,this)}dispose(){this._disposable&&this._disposable.dispose()}applyChanges(e){return r.__awaiter(this,void 0,void 0,function*(){return yield Is.git.checkoutFile(e.uri),this.openFile(e)})}compareWithHead(e){e instanceof It&&Is.resultsExplorer.showComparisonInResults(e.repoPath,e.ref,"HEAD")}compareWithRemote(e){e.branch.tracking&&Is.resultsExplorer.showComparisonInResults(e.repoPath,e.branch.tracking,e.ref)}compareWithWorking(e){e instanceof It&&Is.resultsExplorer.showComparisonInResults(e.repoPath,e.ref,"")}compareSelectedAncestorWithWorking(e){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===this._selection||!(e instanceof Vt))return;if(this._selection.repoPath!==e.repoPath||"branch"!==this._selection.type)return;const t=yield Is.git.getMergeBase(this._selection.repoPath,this._selection.ref,e.ref);void 0!==t&&Is.resultsExplorer.showComparisonInResults(this._selection.repoPath,t,"")})}compareWithSelected(e){void 0!==this._selection&&e instanceof It&&this._selection.repoPath===e.repoPath&&Is.resultsExplorer.showComparisonInResults(this._selection.repoPath,this._selection.ref,e.ref)}selectForCompare(e){if(!(e instanceof It))return;const t=e instanceof Vt?"branch":"ref";this._selection={ref:e.ref,repoPath:e.repoPath,type:t},z(G.ExplorersCanCompare,t)}openChanges(e){const t=e.getCommand();if(void 0===t||void 0===t.arguments)return;const[i,o]=t.arguments;return o.showOptions.preview=!1,O.commands.executeCommand(t.command,i,o)}openChangesWithWorking(e){const t={commit:e.commit,showOptions:{preserveFocus:!0,preview:!1}};return O.commands.executeCommand(Ut.DiffWithWorking,e.commit.toGitUri(),t)}openFile(e){return Di(e.uri,{preserveFocus:!0,preview:!1})}openFileRevision(e,t={showOptions:{preserveFocus:!0,preview:!1}}){return Di(t.uri||("D"===e.commit.status?Te.toRevisionUri(e.commit.previousSha,e.commit.previousUri.fsPath,e.commit.repoPath):Te.toRevisionUri(e.uri)),t.showOptions||{preserveFocus:!0,preview:!1})}openChangedFileChanges(e,t={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=e.commit.fileStatuses.map(e=>Te.fromFileStatus(e,i));for(const s of o)yield this.openDiffWith(i,{uri:s,sha:void 0!==e.commit.previousSha?e.commit.previousSha:Ot.deletedSha},{uri:s,sha:e.commit.sha},t)})}openChangedFileChangesWithWorking(e,t={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=s.filterMap(e.commit.fileStatuses,e=>"D"!==e.status?Te.fromFileStatus(e,i):void 0);for(const s of o)yield this.openDiffWith(i,{uri:s,sha:e.commit.sha},{uri:s,sha:""},t)})}openChangedFiles(e,t={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=s.filterMap(e.commit.fileStatuses,e=>Te.fromFileStatus(e,i));for(const e of o)yield Di(e,t)})}openChangedFileRevisions(e,t={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){const i=s.filterMap(e.commit.fileStatuses,t=>Te.toRevisionUri("D"===t.status?e.commit.previousFileSha:e.commit.sha,t,e.commit.repoPath));for(const e of i)yield Di(e,t)})}openDiffWith(e,t,i,o={preserveFocus:!1,preview:!1}){return r.__awaiter(this,void 0,void 0,function*(){const s={repoPath:e,lhs:t,rhs:i,showOptions:o};return O.commands.executeCommand(Ut.DiffWith,s)})}openFileRevisionInRemote(e){return r.__awaiter(this,void 0,void 0,function*(){return O.commands.executeCommand(Ut.OpenFileInRemote,e.commit.toGitUri("D"===e.commit.status),{range:!1})})}terminalCheckoutBranch(e){return r.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof Vt))return;const t=`checkout ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)})}terminalCreateBranch(e){return r.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof It))return;let t=!1,i=void 0;e instanceof Vt&&e.branch.remote&&(t=!0,i=e.branch.getName());const o=yield O.window.showInputBox({prompt:"Please provide a branch name (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Branch name",value:i});if(void 0===o||""===o)return;const s=`branch ${t?"-t ":""}${o} ${e.ref}`;this.sendTerminalCommand(s,e.repoPath)})}terminalDeleteBranch(e){if(!(e instanceof Vt))return;const t=e.branch.remote?`push ${e.branch.remote} :${e.ref}`:`branch -d ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)}terminalMergeBranch(e){if(!(e instanceof Vt))return;const t=`merge ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)}terminalRebaseBranch(e){if(!(e instanceof Vt))return;const t=`rebase -i ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)}terminalRebaseBranchToRemote(e){if(e instanceof Vt){if(!e.branch.current||!e.branch.tracking)return;const t=`rebase -i ${e.branch.tracking}`;this.sendTerminalCommand(t,e.repoPath)}else if(e instanceof Zt){const t=`rebase -i ${e.status.upstream}`;this.sendTerminalCommand(t,e.status.repoPath)}}terminalSquashBranchIntoCommit(e){if(!(e instanceof Vt))return;const t=`merge --squash ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)}terminalCherryPickCommit(e){if(!(e instanceof Qt))return;const t=`cherry-pick -e ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)}terminalRebaseCommit(e){if(!(e instanceof Qt))return;const t=`rebase -i ${e.ref}^`;this.sendTerminalCommand(t,e.repoPath)}terminalResetCommit(e){if(!(e instanceof Qt))return;const t=`reset --soft ${e.ref}^`;this.sendTerminalCommand(t,e.repoPath)}terminalRevertCommit(e){if(!(e instanceof Qt))return;const t=`revert -e ${e.ref}`;this.sendTerminalCommand(t,e.repoPath)}terminalRemoveRemote(e){if(!(e instanceof qt))return;const t=`remote remove ${e.remote.name}`;this.sendTerminalCommand(t,e.remote.repoPath)}terminalCreateTag(e){return r.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof It))return;const t=yield O.window.showInputBox({prompt:"Please provide a tag name (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Tag name"});if(void 0===t||""===t)return;const i=yield O.window.showInputBox({prompt:"Please provide an optional message to annotate the tag (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Tag message"});if(void 0===i)return;const o=`tag ${""!==i?`-a -m "${i}" `:""}${t} ${e.ref}`;this.sendTerminalCommand(o,e.repoPath)})}terminalDeleteTag(e){e instanceof oi&&this.sendTerminalCommand(`tag -d ${e.ref}`,e.repoPath)}ensureTerminal(){return void 0===this._terminal&&(this._terminal=O.window.createTerminal(M),this._disposable=O.window.onDidCloseTerminal(e=>{e.name===M&&(this._terminal=void 0,this._disposable.dispose(),this._disposable=void 0)},this),Is.context.subscriptions.push(this._disposable)),this._terminal}sendTerminalCommand(e,t){const i=this.ensureTerminal();i.show(!1),i.sendText(`git -C ${t} ${e}`,!1)}}class Ns{provideTextDocumentContent(e,t){return r.__awaiter(this,void 0,void 0,function*(){const t=Te.fromRevisionUri(e);if(!t.repoPath||t.sha===Ot.deletedSha)return"";try{return yield Is.git.getVersionedFileText(t.repoPath,t.fsPath,t.sha||"HEAD")}catch(e){return se.error(e,"GitContentProvider","getVersionedFileText"),void O.window.showErrorMessage(`Unable to show Git revision ${Ot.shortenSha(t.sha)} of '${_e.relative(t.repoPath,t.fsPath)}'`)}})}}Ns.scheme=Q.GitLensGit;class As extends O.CodeLens{constructor(e,t,i){super(i),this.fileName=e,this.commit=t}}class Us extends O.CodeLens{constructor(e,t,i){super(i),this.fileName=e,this.commit=t}}class Os{provideCodeLenses(e,t){return r.__awaiter(this,void 0,void 0,function*(){const t=Te.fromRevisionUri(e.uri),i=[],o=yield Is.git.getLogCommitForFile(t.repoPath,t.fsPath,{ref:t.sha,firstIfNotFound:!0});return void 0===o?i:(o.previousSha&&i.push(new Us(o.previousUri.fsPath,o,new O.Range(0,0,0,1))),i.push(new As(o.uri.fsPath,o,new O.Range(0,1,0,2))),i)})}resolveCodeLens(e,t){return e instanceof As?this._resolveDiffWithWorkingTreeCodeLens(e,t):e instanceof Us?this._resolveGitDiffWithPreviousCodeLens(e,t):Promise.reject(void 0)}_resolveDiffWithWorkingTreeCodeLens(e,t){return e.command={title:`Compare Revision (${e.commit.shortSha}) with Working`,command:Ut.DiffWithWorking,arguments:[O.Uri.file(e.fileName),{commit:e.commit,line:e.range.start.line}]},Promise.resolve(e)}_resolveGitDiffWithPreviousCodeLens(e,t){return e.command={title:`Compare Revision (${e.commit.shortSha}) with Previous (${e.commit.previousShortSha})`,command:Ut.DiffWithPrevious,arguments:[O.Uri.file(e.fileName),{commit:e.commit,line:e.range.start.line}]},Promise.resolve(e)}}Os.selector={scheme:Q.GitLensGit};class Ls extends O.Disposable{constructor(){super(()=>this.dispose()),this._roots=[],this._onDidChangeTreeData=new O.EventEmitter,Is.explorerCommands,O.commands.registerCommand("gitlens.resultsExplorer.refresh",this.refreshNodes,this),O.commands.registerCommand("gitlens.resultsExplorer.refreshNode",this.refreshNode,this),O.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToAuto",()=>this.setFilesLayout(P.Auto),this),O.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToList",()=>this.setFilesLayout(P.List),this),O.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToTree",()=>this.setFilesLayout(P.Tree),this),O.commands.registerCommand("gitlens.resultsExplorer.clearResultsNode",this.clearResultsNode,this),O.commands.registerCommand("gitlens.resultsExplorer.close",this.close,this),O.commands.registerCommand("gitlens.resultsExplorer.setKeepResultsToOn",()=>this.setKeepResults(!0),this),O.commands.registerCommand("gitlens.resultsExplorer.setKeepResultsToOff",()=>this.setKeepResults(!1),this),z(G.ResultsExplorerKeepResults,this.keepResults),Is.context.subscriptions.push(Hs.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(Hs.initializingChangeEvent)}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}dispose(){this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){return r.__awaiter(this,void 0,void 0,function*(){const t=Hs.initializing(e);(t||Hs.changed(e,Hs.name("resultsExplorer").value)||Hs.changed(e,Hs.name("defaultGravatarsStyle").value))&&(t||0===this._roots.length||this.refresh(Bt.ConfigurationChanged),t&&(this._disposable=O.window.registerTreeDataProvider("gitlens.resultsExplorer",this)))})}get config(){return Is.config.resultsExplorer}get keepResults(){return Is.context.workspaceState.get(q.ResultsExplorerKeepResults,!1)}close(){this.clearResults(),z(G.ResultsExplorer,!1)}getChildren(e){return r.__awaiter(this,void 0,void 0,function*(){return 0===this._roots.length?[new Mt("No results")]:void 0===e?this._roots:e.getChildren()})}getTreeItem(e){return r.__awaiter(this,void 0,void 0,function*(){return e.getTreeItem()})}getQualifiedCommand(e){return`gitlens.resultsExplorer.${e}`}refresh(e){return r.__awaiter(this,void 0,void 0,function*(){void 0===e&&(e=Bt.Command),se.log("ResultsExplorer.refresh",`reason='${e}'`),this._onDidChangeTreeData.fire()})}refreshNode(e,t){se.log("ResultsExplorer.refreshNode"),void 0!==t&&e.supportsPaging&&(e.maxCount=t.maxCount),e.refresh(),this._onDidChangeTreeData.fire(this._roots.includes(e)?void 0:e)}refreshNodes(){se.log("ResultsExplorer.refreshNodes"),this._roots.forEach(e=>e.refresh()),this._onDidChangeTreeData.fire()}showComparisonInResults(e,t,i){this.addResults(new di(e,t,i,this)),this.showResults()}showCommitInResults(e){this.addResults(new ai(e,this)),this.showResults()}showCommitsInResults(e,t){const i=void 0===e.query?t=>Promise.resolve(e):e.query;this.addResults(new hi(e.repoPath,i=>r.__awaiter(this,void 0,void 0,function*(){if("string"==typeof t)return t;const o=void 0!==i?i.count:0,s=void 0!==i&&i.truncated,r=void 0===t.resultsType?{singular:"result",plural:"results"}:t.resultsType;let n="";if((yield Is.git.getRepositoryCount())>1){const t=yield Is.git.getRepository(e.repoPath);n=` ${y.pad(V.Dash,1,1)} ${t&&t.formattedName||e.repoPath}`}return 1===o?`1 ${r.singular} for ${t.label}${n}`:`${0===o?"No":`${o}${s?"+":""}`} ${r.plural} for ${t.label}${n}`}),p.seeded(i,e),this,Nt.SearchResults)),this.showResults()}showResults(){return r.__awaiter(this,void 0,void 0,function*(){yield O.commands.executeCommand("workbench.view.explorer"),Ri.showResultExplorerInfoMessage(),z(G.ResultsExplorer,!0)})}addResults(e){return!this._roots.includes(e)&&(this._roots.length>0&&!this.keepResults&&this.clearResults(),this._roots.splice(0,0,e),this.refreshNode(e),!0)}clearResults(){0!==this._roots.length&&(this._roots.forEach(e=>e.dispose()),this._roots=[],this.refresh())}clearResultsNode(e){const t=this._roots.findIndex(t=>t===e);-1!==t&&(this._roots.splice(t,1),e.dispose(),this.refresh())}setFilesLayout(e){return r.__awaiter(this,void 0,void 0,function*(){return Hs.update(Hs.name("resultsExplorer")("files")("layout").value,e,O.ConfigurationTarget.Global)})}setKeepResults(e){Is.context.workspaceState.update(q.ResultsExplorerKeepResults,e),z(G.ResultsExplorerKeepResults,e)}}class Is{static initialize(e,t){let i;(this._context=e,this._config=t,e.subscriptions.push(this._tracker=new he),e.subscriptions.push(this._git=new Ot),this._tracker.initialize(),e.subscriptions.push(this._annotationController=new xs),e.subscriptions.push(this._currentLineController=new Ts),e.subscriptions.push(this._codeLensController=new ks),e.subscriptions.push(this._keyboard=new Ii),t.gitExplorer.enabled)?e.subscriptions.push(this._gitExplorer=new Es):i=Hs.onDidChange(t=>{Hs.changed(t,Hs.name("gitExplorer")("enabled").value)&&(i.dispose(),e.subscriptions.push(this._gitExplorer=new Es))});e.subscriptions.push(O.workspace.registerTextDocumentContentProvider(Ns.scheme,new Ns)),e.subscriptions.push(O.languages.registerCodeLensProvider(Os.selector,new Os))}static get annotations(){return this._annotationController}static get codeLens(){return this._codeLensController}static get config(){return void 0===this._config&&(this._config=Hs.get()),this._config}static get context(){return this._context}static get explorerCommands(){return void 0===this._explorerCommands&&this._context.subscriptions.push(this._explorerCommands=new Bs),this._explorerCommands}static get git(){return this._git}static get gitExplorer(){return this._gitExplorer}static get keyboard(){return this._keyboard}static get lineAnnotations(){return this._currentLineController}static get resultsExplorer(){return void 0===this._resultsExplorer&&this._context.subscriptions.push(this._resultsExplorer=new Ls),this._resultsExplorer}static get tracker(){return this._tracker}static resetConfig(){this._config=void 0}}const Ms=new Proxy({},{get:(e,t,i)=>Ms});class Ws{constructor(){this._onDidChange=new O.EventEmitter,this.initializingChangeEvent={affectsConfiguration:(e,t)=>!1}}static configure(e){e.subscriptions.push(O.workspace.onDidChangeConfiguration(Hs.onConfigurationChanged,Hs))}get onDidChange(){return this._onDidChange.event}onConfigurationChanged(e){if(!e.affectsConfiguration(L,null))return;Is.resetConfig(),Hs.changed(e,Hs.name("defaultGravatarsStyle").value)&&Ee.clear();const t=Hs.name("keymap").value;Hs.changed(e,t)&&z(G.KeyMap,this.get(t)),this._onDidChange.fire(e)}get(e,t,i){return void 0===i?O.workspace.getConfiguration(void 0===e?void 0:L,t).get(void 0===e?L:e):O.workspace.getConfiguration(void 0===e?void 0:L,t).get(void 0===e?L:e,i)}changed(e,t,i){return e.affectsConfiguration(`${L}.${t}`,i)}initializing(e){return e===this.initializingChangeEvent}inspect(e,t){return O.workspace.getConfiguration(void 0===e?void 0:L,t).inspect(void 0===e?L:e)}name(e){return p.propOf(Ms,e)}update(e,t,i){return O.workspace.getConfiguration(L).update(e,t,i)}}const Hs=new Ws;t.activate=function(e){return r.__awaiter(this,void 0,void 0,function*(){const t=process.hrtime();se.configure(e);const i=O.extensions.getExtension(W),s=i.packageJSON.version,n=O.workspace.getConfiguration("git",null).get("enabled",!0);if(!n)return se.log(`GitLens(v${s}) was NOT activated -- "git.enabled": false`),void z(G.Enabled,n);Ws.configure(e);const a=Hs.get();try{yield Ot.initialize(a.advanced.git)}catch(e){return se.error(e,`GitLens(v${s}).activate`),e.message.includes("Unable to find git")&&(yield O.window.showErrorMessage(`GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that '${L}.${Hs.name("advanced")("git").value}' is pointed to its installed location.`)),void z(G.Enabled,!1)}const h=Ot.getGitVersion(),c=e.globalState.get(K.GitLensVersion);yield function(e,t){return r.__awaiter(this,void 0,void 0,function*(){if(void 0===t)return;const i=_.fromString(t);try{if(1!==_.compare(i,_.from(6,1,2)))try{const t=Hs.name("advanced")("messages").value,i=Hs.get(t);let s=!1;for(const t of o.values(Fi)){const o=e.globalState.get(t);void 0!==o&&(s=!0,i[t]=o,e.globalState.update(t,void 0))}if(!s)return;yield Hs.update(t,i,O.ConfigurationTarget.Global)}catch(e){se.error(e,"migrateSettings - messages")}if(1!==_.compare(i,_.from(7,1,0))){const e=Hs.name("advanced")("quickPick")("closeOnFocusOut").value,t=Hs.inspect(e);void 0!==t&&(void 0!==t.globalValue?yield Hs.update(e,!t.globalValue,O.ConfigurationTarget.Global):void 0!==t.workspaceFolderValue&&(yield Hs.update(e,!t.workspaceFolderValue,O.ConfigurationTarget.WorkspaceFolder)))}if(1!==_.compare(i,_.from(7,3,0,"beta2"))){const e="advanced.maxQuickHistory",t=Hs.inspect(e);if(void 0!==t){const e=Hs.name("advanced")("maxListItems").value;void 0!==t.globalValue?yield Hs.update(e,t.globalValue,O.ConfigurationTarget.Global):void 0!==t.workspaceFolderValue&&(yield Hs.update(e,t.workspaceFolderValue,O.ConfigurationTarget.WorkspaceFolder))}}if(1!==_.compare(i,_.from(7,3,0,"beta4"))){const e="gitExplorer.gravatarsDefault",t=Hs.inspect(e);if(void 0!==t){const e=Hs.name("defaultGravatarsStyle").value;void 0!==t.globalValue?yield Hs.update(e,t.globalValue,O.ConfigurationTarget.Global):void 0!==t.workspaceFolderValue&&(yield Hs.update(e,t.workspaceFolderValue,O.ConfigurationTarget.WorkspaceFolder))}}}catch(e){se.error(e,"migrateSettings")}})}(e,c),function(e,t){r.__awaiter(this,void 0,void 0,function*(){Ot.validateGitVersion(2,2)||(yield Ri.showUnsupportedGitVersionErrorMessage(t))})}(0,h),function(e,t,i){r.__awaiter(this,void 0,void 0,function*(){if(Hs.get(Hs.name("advanced")("messages")(Fi.UpdateNotice).value))return;if(void 0===i)return se.log("GitLens first-time install"),void(yield Ri.showWelcomeMessage());i!==t&&se.log(`GitLens upgraded from v${i} to v${t}`);const[e,o]=t.split("."),[s,r]=i.split(".");e===s&&o===r||e<s||e===s&&o<r||(yield Ri.showUpdateMessage(t))})}(0,s,c),e.globalState.update(K.GitLensVersion,s),Is.initialize(e,a),z(G.KeyMap,Is.config.keymap),Is.context.subscriptions.push(O.commands.registerTextEditorCommand("gitlens.computingFileAnnotations",()=>{})),Is.context.subscriptions.push(new Ti),Is.context.subscriptions.push(new Uo),Is.context.subscriptions.push(new Ao),Is.context.subscriptions.push(new Bi),Is.context.subscriptions.push(new Ni),Is.context.subscriptions.push(new xo),Is.context.subscriptions.push(new So),Is.context.subscriptions.push(new $o),Is.context.subscriptions.push(new Do),Is.context.subscriptions.push(new ko),Is.context.subscriptions.push(new Po),Is.context.subscriptions.push(new Fo),Is.context.subscriptions.push(new Ro),Is.context.subscriptions.push(new To),Is.context.subscriptions.push(new Oo),Is.context.subscriptions.push(new Lo),Is.context.subscriptions.push(new Io),Is.context.subscriptions.push(new Mo),Is.context.subscriptions.push(new Wo),Is.context.subscriptions.push(new Ho),Is.context.subscriptions.push(new jo),Is.context.subscriptions.push(new Go),Is.context.subscriptions.push(new ki),Is.context.subscriptions.push(new zo),Is.context.subscriptions.push(new Xo),Is.context.subscriptions.push(new cs),Is.context.subscriptions.push(new ls),Is.context.subscriptions.push(new ds),Is.context.subscriptions.push(new us),Is.context.subscriptions.push(new Qo),Is.context.subscriptions.push(new Yo),Is.context.subscriptions.push(new Zo),Is.context.subscriptions.push(new ts),Is.context.subscriptions.push(new Jo),Is.context.subscriptions.push(new es),Is.context.subscriptions.push(new qo),Is.context.subscriptions.push(new is),Is.context.subscriptions.push(new os),Is.context.subscriptions.push(new ss),Is.context.subscriptions.push(new rs),Is.context.subscriptions.push(new ns),Is.context.subscriptions.push(new as),Is.context.subscriptions.push(new hs);const l=process.hrtime(t);se.log(`GitLens(v${s}) activated in ${1e3*l[0]+Math.floor(l[1]/1e6)} ms`)})},t.deactivate=function(){}},function(e,t){e.exports=require("date-fns")},function(e,t){e.exports=require("date-fns/locale/en")},function(e,t){e.exports=require("lodash.debounce")},function(e,t){e.exports=require("lodash.once")},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("iconv-lite")},function(e,t){e.exports=require("tmp")}]);